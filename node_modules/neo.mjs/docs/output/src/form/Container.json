{"classData":[{"comment":"/**\n * @class Neo.form.Container\n * @extends Neo.container.Base\n */","meta":{"filename":"Container.mjs","lineno":5,"columnno":0,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form","code":{}},"kind":"class","name":"Container","augments":["Neo.container.Base"],"memberof":"Neo.form","longname":"Neo.form.Container","scope":"static","$longname":"Neo.form.Container","$kind":"class","id":2022,"neoClassName":"Neo.form.Container"},{"comment":"/**\n         * @member {String} className='Neo.form.Container'\n         * @protected\n         */","meta":{"filename":"Container.mjs","lineno":15,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form","code":{}},"kind":"member","name":"className","type":{"names":["String"]},"defaultvalue":"'Neo.form.Container'","access":"protected","longname":"className","scope":"global","$longname":"className","$kind":"property","id":2023,"neoClassName":"Neo.form.Container"},{"comment":"/**\n         * @member {String} ntype='form-container'\n         * @protected\n         */","meta":{"filename":"Container.mjs","lineno":20,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form","code":{}},"kind":"member","name":"ntype","type":{"names":["String"]},"defaultvalue":"'form-container'","access":"protected","longname":"ntype","scope":"global","$longname":"ntype","$kind":"property","id":2024,"neoClassName":"Neo.form.Container"},{"comment":"/**\n         * @member {String[]} baseCls=['neo-form-container'],\n         * @protected\n         */","meta":{"filename":"Container.mjs","lineno":25,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form","code":{}},"kind":"member","name":"baseCls","type":{"names":["Array.<String>"]},"defaultvalue":"['neo-form-container'],","access":"protected","longname":"baseCls","scope":"global","$longname":"baseCls","$kind":"property","id":2025,"neoClassName":"Neo.form.Container"},{"comment":"/**\n         * @member {Object} vdom={tag: 'form',cn:[],onsubmit:'return false;'}\n         */","meta":{"filename":"Container.mjs","lineno":29,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form","code":{}},"kind":"member","name":"vdom","type":{"names":["Object"]},"defaultvalue":"{tag: 'form',cn:[],onsubmit:'return false;'}","description":"<p>'form',cn:[],onsubmit:'return false;'}</p>","longname":"vdom","scope":"global","$longname":"vdom","$kind":"property","id":2026,"neoClassName":"Neo.form.Container"},{"comment":"/**\n     * Helper function used by setValues() which wraps the leaves of a tree structure into a new property.\n     * The logic assumes that field config values must not be objects (separation between the key & value realm).\n     * @param {Object} values\n     * @param {String} configName\n     */","meta":{"range":[1207,2032],"filename":"Container.mjs","lineno":39,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form","code":{"id":"astnode100061458","name":"Container.adjustTreeLeaves","type":"MethodDefinition","paramnames":["values","configName"]},"vars":{"":null}},"description":"<p>Helper function used by setValues() which wraps the leaves of a tree structure into a new property.\nThe logic assumes that field config values must not be objects (separation between the key &amp; value realm).</p>","params":[{"type":{"names":["Object"]},"name":"values"},{"type":{"names":["String"]},"name":"configName"}],"name":"adjustTreeLeaves","longname":"Container.adjustTreeLeaves","kind":"function","memberof":"Container","scope":"static","$longname":"Container.adjustTreeLeaves","$kind":"method","id":2027,"neoClassName":"Neo.form.Container"},{"comment":"/**\n     * @param {Neo.container.Base} parent\n     * @param {Object[]} modules\n     * @returns {Object[]}\n     */","meta":{"range":[2156,2512],"filename":"Container.mjs","lineno":72,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form","code":{"id":"astnode100061563","name":"Container#findNotLoadedModules","type":"MethodDefinition","paramnames":["parent","modules"]},"vars":{"":null}},"params":[{"type":{"names":["Neo.container.Base"]},"name":"parent"},{"type":{"names":["Array.<Object>"]},"name":"modules"}],"returns":[{"type":{"names":["Array.<Object>"]}}],"name":"findNotLoadedModules","longname":"Container#findNotLoadedModules","kind":"function","memberof":"Container","scope":"instance","$longname":"Container#findNotLoadedModules","$kind":"method","id":2028,"neoClassName":"Neo.form.Container"},{"comment":"/**\n     * Either pass a field name or id\n     * @param {String} name\n     * @returns {Promise<Neo.form.field.Base|null>} fields\n     */","meta":{"range":[2659,3044],"filename":"Container.mjs","lineno":89,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form","code":{"id":"astnode100061623","name":"Container#getField","type":"MethodDefinition","paramnames":["name"]},"vars":{"":null}},"description":"<p>Either pass a field name or id</p>","params":[{"type":{"names":["String"]},"name":"name"}],"returns":[{"type":{"names":["Promise.<(Neo.form.field.Base|null)>"]},"description":"fields"}],"name":"getField","longname":"Container#getField","kind":"function","memberof":"Container","scope":"instance","async":true,"$longname":"Container#getField","$kind":"method","id":2029,"neoClassName":"Neo.form.Container"},{"comment":"/**\n     * @param {Neo.form.field.Base} field\n     * @returns {String}\n     */","meta":{"range":[3133,3305],"filename":"Container.mjs","lineno":110,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form","code":{"id":"astnode100061670","name":"Container#getFieldPath","type":"MethodDefinition","paramnames":["field"]},"vars":{"":null}},"params":[{"type":{"names":["Neo.form.field.Base"]},"name":"field"}],"returns":[{"type":{"names":["String"]}}],"name":"getFieldPath","longname":"Container#getFieldPath","kind":"function","memberof":"Container","scope":"instance","$longname":"Container#getFieldPath","$kind":"method","id":2030,"neoClassName":"Neo.form.Container"},{"comment":"/**\n     * @returns {Promise<Neo.form.field.Base[]>} fields\n     */","meta":{"range":[3383,3631],"filename":"Container.mjs","lineno":121,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form","code":{"id":"astnode100061708","name":"Container#getFields","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"returns":[{"type":{"names":["Promise.<Array.<Neo.form.field.Base>>"]},"description":"fields"}],"name":"getFields","longname":"Container#getFields","kind":"function","memberof":"Container","scope":"instance","params":[],"async":true,"$longname":"Container#getFields","$kind":"method","id":2031,"neoClassName":"Neo.form.Container"},{"comment":"/**\n     * @returns {Promise<Object>}\n     */","meta":{"range":[3687,5037],"filename":"Container.mjs","lineno":136,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form","code":{"id":"astnode100061746","name":"Container#getValues","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"returns":[{"type":{"names":["Promise.<Object>"]}}],"name":"getValues","longname":"Container#getValues","kind":"function","memberof":"Container","scope":"instance","params":[],"async":true,"$longname":"Container#getValues","$kind":"method","id":2032,"neoClassName":"Neo.form.Container"},{"comment":"/**\n     * Returns true in case no form field isValid() call returns false\n     * @returns {Promise<Boolean>}\n     */","meta":{"range":[5165,5439],"filename":"Container.mjs","lineno":184,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form","code":{"id":"astnode100061921","name":"Container#isValid","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Returns true in case no form field isValid() call returns false</p>","returns":[{"type":{"names":["Promise.<Boolean>"]}}],"name":"isValid","longname":"Container#isValid","kind":"function","memberof":"Container","scope":"instance","params":[],"async":true,"$longname":"Container#isValid","$kind":"method","id":2033,"neoClassName":"Neo.form.Container"},{"comment":"/**\n     * Loads all not loaded items inside card layouts\n     * @returns {Promise<Neo.component.Base[]>}\n     */","meta":{"range":[5563,5890],"filename":"Container.mjs","lineno":202,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form","code":{"id":"astnode100061961","name":"Container#loadModules","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Loads all not loaded items inside card layouts</p>","returns":[{"type":{"names":["Promise.<Array.<Neo.component.Base>>"]}}],"name":"loadModules","longname":"Container#loadModules","kind":"function","memberof":"Container","scope":"instance","params":[],"async":true,"$longname":"Container#loadModules","$kind":"method","id":2034,"neoClassName":"Neo.form.Container"},{"comment":"/**\n     * Resets field values by field name or field id.\n     * Fields not included with a value will get reset to null.\n     * @param {Object} [values]\n     */","meta":{"range":[6062,6379],"filename":"Container.mjs","lineno":221,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form","code":{"id":"astnode100062013","name":"Container#reset","type":"MethodDefinition","paramnames":["values"]},"vars":{"":null}},"description":"<p>Resets field values by field name or field id.\nFields not included with a value will get reset to null.</p>","params":[{"type":{"names":["Object"]},"optional":true,"name":"values"}],"name":"reset","longname":"Container#reset","kind":"function","memberof":"Container","scope":"instance","async":true,"$longname":"Container#reset","$kind":"method","id":2035,"neoClassName":"Neo.form.Container"},{"comment":"/**\n     * Set field configs by field name or field id\n     * @param {Object} configs={}\n     * @param {Boolean} suspendEvents=false\n     */","meta":{"range":[6530,7955],"filename":"Container.mjs","lineno":239,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form","code":{"id":"astnode100062070","name":"Container#setConfigs","type":"MethodDefinition","paramnames":["configs","suspendEvents"]},"vars":{"":null}},"description":"<p>Set field configs by field name or field id</p>","params":[{"type":{"names":["Object"]},"defaultvalue":"{}","name":"configs"},{"type":{"names":["Boolean"]},"defaultvalue":false,"name":"suspendEvents"}],"name":"setConfigs","longname":"Container#setConfigs","kind":"function","memberof":"Container","scope":"instance","async":true,"$longname":"Container#setConfigs","$kind":"method","id":2036,"neoClassName":"Neo.form.Container"},{"comment":"/**\n     * Set field values by field name or field id\n     * @param {Object} values={}\n     * @param {Boolean} suspendEvents=false\n     */","meta":{"range":[8104,8266],"filename":"Container.mjs","lineno":286,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form","code":{"id":"astnode100062243","name":"Container#setValues","type":"MethodDefinition","paramnames":["values","suspendEvents"]},"vars":{"":null}},"description":"<p>Set field values by field name or field id</p>","params":[{"type":{"names":["Object"]},"defaultvalue":"{}","name":"values"},{"type":{"names":["Boolean"]},"defaultvalue":false,"name":"suspendEvents"}],"name":"setValues","longname":"Container#setValues","kind":"function","memberof":"Container","scope":"instance","async":true,"$longname":"Container#setValues","$kind":"method","id":2037,"neoClassName":"Neo.form.Container"},{"comment":"/**\n     * Updates the invalid state for all fields which have validate() implemented.\n     * This can be useful for create-entity forms which show up \"clean\" until pressing a submit button.\n     * @returns {Promise<Boolean>}\n     */","meta":{"range":[8510,8829],"filename":"Container.mjs","lineno":297,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form","code":{"id":"astnode100062268","name":"Container#validate","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Updates the invalid state for all fields which have validate() implemented.\nThis can be useful for create-entity forms which show up \"clean\" until pressing a submit button.</p>","returns":[{"type":{"names":["Promise.<Boolean>"]}}],"name":"validate","longname":"Container#validate","kind":"function","memberof":"Container","scope":"instance","params":[],"async":true,"$longname":"Container#validate","$kind":"method","id":2038,"neoClassName":"Neo.form.Container"}]}