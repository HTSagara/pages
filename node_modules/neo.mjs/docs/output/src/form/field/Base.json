{"classData":[{"comment":"/**\n * Abstract base class for form fields\n * @class Neo.form.field.Base\n * @extends Neo.component.Base\n */","meta":{"filename":"Base.mjs","lineno":5,"columnno":0,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"description":"<p>Abstract base class for form fields</p>\n","kind":"class","name":"Base","augments":["Neo.component.Base"],"memberof":"Neo.form.field","longname":"Neo.form.field.Base","scope":"static","$longname":"Neo.form.field.Base","$kind":"class","id":2240,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * @member {Object} delayable\n     * @protected\n     * @static\n     */","meta":{"filename":"Base.mjs","lineno":16,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"kind":"member","name":"delayable","type":{"names":["Object"]},"access":"protected","scope":"static","longname":"delayable","$longname":"delayable","$kind":"property","id":2241,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * Valid values for isTouchedEvent\n     * @member {String[]} isTouchedEvents=['focusEnter','focusLeave']\n     * @protected\n     * @static\n     */","meta":{"filename":"Base.mjs","lineno":26,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"description":"<p>Valid values for isTouchedEvent</p>\n","kind":"member","name":"isTouchedEvents","type":{"names":["Array.<String>"]},"defaultvalue":"['focusEnter','focusLeave']","access":"protected","scope":"static","longname":"isTouchedEvents","$longname":"isTouchedEvents","$kind":"property","id":2242,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n         * @member {String} className='Neo.form.field.Base'\n         * @protected\n         */","meta":{"filename":"Base.mjs","lineno":33,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"kind":"member","name":"className","type":{"names":["String"]},"defaultvalue":"'Neo.form.field.Base'","access":"protected","longname":"className","scope":"global","$longname":"className","$kind":"property","id":2243,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n         * @member {String} ntype='basefield'\n         * @protected\n         */","meta":{"filename":"Base.mjs","lineno":38,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"kind":"member","name":"ntype","type":{"names":["String"]},"defaultvalue":"'basefield'","access":"protected","longname":"ntype","scope":"global","$longname":"ntype","$kind":"property","id":2244,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n         * Form groups can get set on any parent component level.\n         * An alternative way for using dots in field names.\n         * @member {String|null} formGroup_=null\n         */","meta":{"filename":"Base.mjs","lineno":44,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"description":"<p>Form groups can get set on any parent component level.\nAn alternative way for using dots in field names.</p>\n","kind":"member","name":"formGroup_","type":{"names":["String","null"]},"defaultvalue":null,"longname":"formGroup_","scope":"global","$longname":"formGroup_","$kind":"property","id":2245,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n         * True indicates that a user has interacted with the form field\n         * @member {Boolean} isTouched_=false\n         */","meta":{"filename":"Base.mjs","lineno":49,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"description":"<p>True indicates that a user has interacted with the form field</p>\n","kind":"member","name":"isTouched_","type":{"names":["Boolean"]},"defaultvalue":false,"longname":"isTouched_","scope":"global","$longname":"isTouched_","$kind":"property","id":2246,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n         * Event name which sets isTouched to true. Valid options are 'focusEnter' & 'focusLeave'\n         * @member {String} isTouched_=false\n         */","meta":{"filename":"Base.mjs","lineno":54,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"description":"<p>Event name which sets isTouched to true. Valid options are &#39;focusEnter&#39; &amp; &#39;focusLeave&#39;</p>\n","kind":"member","name":"isTouched_","type":{"names":["String"]},"defaultvalue":false,"longname":"isTouched_","scope":"global","$longname":"isTouched_","$kind":"property","id":2247,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n         * @member {String|null} name_=null\n         */","meta":{"filename":"Base.mjs","lineno":58,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"kind":"member","name":"name_","type":{"names":["String","null"]},"defaultvalue":null,"longname":"name_","scope":"global","$longname":"name_","$kind":"property","id":2248,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n         * Neo itself does not need field names to get mapped to the DOM (input nodes),\n         * except for CheckBoxes & Radios to work. It can be useful for testing tools\n         * & accessibility though, so the default got set to true.\n         * Feel free to change it to false to keep the DOM minimal.\n         * @member {Boolean} renderName_=true\n         */","meta":{"filename":"Base.mjs","lineno":66,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"description":"<p>Neo itself does not need field names to get mapped to the DOM (input nodes),\nexcept for CheckBoxes &amp; Radios to work. It can be useful for testing tools\n&amp; accessibility though, so the default got set to true.\nFeel free to change it to false to keep the DOM minimal.</p>\n","kind":"member","name":"renderName_","type":{"names":["Boolean"]},"defaultvalue":true,"longname":"renderName_","scope":"global","$longname":"renderName_","$kind":"property","id":2249,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n         * In case renderName is set to true, you can optionally render the combination\n         * of all formGroup(s) & the field name into the DOM => input node\n         * @member {Boolean} renderPath=true\n         */","meta":{"filename":"Base.mjs","lineno":72,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"description":"<p>In case renderName is set to true, you can optionally render the combination\nof all formGroup(s) &amp; the field name into the DOM =&gt; input node</p>\n","kind":"member","name":"renderPath","type":{"names":["Boolean"]},"defaultvalue":true,"longname":"renderPath","scope":"global","$longname":"renderPath","$kind":"property","id":2250,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n         * @member {*} value_=null\n         */","meta":{"filename":"Base.mjs","lineno":76,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"kind":"member","name":"value_","type":{"names":["*"]},"defaultvalue":null,"longname":"value_","scope":"global","$longname":"value_","$kind":"property","id":2251,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * An internal cache for formGroups of all parent levels\n     * @member {String|null} formGroupString=null\n     */","meta":{"filename":"Base.mjs","lineno":83,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"description":"<p>An internal cache for formGroups of all parent levels</p>\n","kind":"member","name":"formGroupString","type":{"names":["String","null"]},"defaultvalue":null,"longname":"formGroupString","scope":"global","$longname":"formGroupString","$kind":"property","id":2252,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * Base implementation to check if the fields value has changed.\n     * Can get overridden in superclasses.\n     * @returns {Boolean}\n     */","meta":{"range":[2808,3017],"filename":"Base.mjs","lineno":94,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100068334","name":"Base#isDirty","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Base implementation to check if the fields value has changed.\nCan get overridden in superclasses.</p>\n","returns":[{"type":{"names":["Boolean"]}}],"name":"isDirty","longname":"Base#isDirty","kind":"member","memberof":"Base","scope":"instance","params":[],"$longname":"Base#isDirty","$kind":"property","id":2253,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * An internal cache for formGroup(s) and the field name\n     * @member {String|null} path=null\n     */","meta":{"filename":"Base.mjs","lineno":99,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"description":"<p>An internal cache for formGroup(s) and the field name</p>\n","kind":"member","name":"path","type":{"names":["String","null"]},"defaultvalue":null,"longname":"path","scope":"global","$longname":"path","$kind":"property","id":2254,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * Triggered after the name isTouched got changed\n     * @param {String|null} value\n     * @param {String|null} oldValue\n     */","meta":{"range":[3296,3443],"filename":"Base.mjs","lineno":106,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100068369","name":"Base#afterSetIsTouched","type":"MethodDefinition","paramnames":["value","oldValue"]},"vars":{"":null}},"description":"<p>Triggered after the name isTouched got changed</p>\n","params":[{"type":{"names":["String","null"]},"name":"value"},{"type":{"names":["String","null"]},"name":"oldValue"}],"name":"afterSetIsTouched","longname":"Base#afterSetIsTouched","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#afterSetIsTouched","$kind":"method","id":2255,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * Triggered after the name config got changed\n     * @param {String|null} value\n     * @param {String|null} oldValue\n     */","meta":{"range":[3587,3739],"filename":"Base.mjs","lineno":118,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100068395","name":"Base#afterSetName","type":"MethodDefinition","paramnames":["value","oldValue"]},"vars":{"":null}},"description":"<p>Triggered after the name config got changed</p>\n","params":[{"type":{"names":["String","null"]},"name":"value"},{"type":{"names":["String","null"]},"name":"oldValue"}],"name":"afterSetName","longname":"Base#afterSetName","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#afterSetName","$kind":"method","id":2256,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * Triggered after the role config got changed\n     * @param {String|null} value\n     * @param {String|null} oldValue\n     * @protected\n     */","meta":{"range":[3901,4000],"filename":"Base.mjs","lineno":130,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100068424","name":"Base#afterSetRole","type":"MethodDefinition","paramnames":["value","oldValue"]},"vars":{"":null}},"description":"<p>Triggered after the role config got changed</p>\n","params":[{"type":{"names":["String","null"]},"name":"value"},{"type":{"names":["String","null"]},"name":"oldValue"}],"access":"protected","name":"afterSetRole","longname":"Base#afterSetRole","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#afterSetRole","$kind":"method","id":2257,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * Triggered after the value config got changed\n     * @param {*} value\n     * @param {*} oldValue\n     */","meta":{"range":[4125,4235],"filename":"Base.mjs","lineno":140,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100068444","name":"Base#afterSetValue","type":"MethodDefinition","paramnames":["value","oldValue"]},"vars":{"":null}},"description":"<p>Triggered after the value config got changed</p>\n","params":[{"type":{"names":["*"]},"name":"value"},{"type":{"names":["*"]},"name":"oldValue"}],"name":"afterSetValue","longname":"Base#afterSetValue","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#afterSetValue","$kind":"method","id":2258,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * Triggered when accessing the formGroup config\n     * @param {String|null} value\n     * @returns {String|null} parents\n     * @protected\n     */","meta":{"range":[4400,4876],"filename":"Base.mjs","lineno":150,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100068461","name":"Base#beforeGetFormGroup","type":"MethodDefinition","paramnames":["value"]},"vars":{"":null}},"description":"<p>Triggered when accessing the formGroup config</p>\n","params":[{"type":{"names":["String","null"]},"name":"value"}],"returns":[{"type":{"names":["String","null"]},"description":"parents"}],"access":"protected","name":"beforeGetFormGroup","longname":"Base#beforeGetFormGroup","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#beforeGetFormGroup","$kind":"method","id":2259,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * Triggered before the isTouchedEvent config gets changed\n     * @param {String} value\n     * @param {String} oldValue\n     * @protected\n     */","meta":{"range":[5040,5162],"filename":"Base.mjs","lineno":178,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100068532","name":"Base#beforeSetIsTouchedEvent","type":"MethodDefinition","paramnames":["value","oldValue"]},"vars":{"":null}},"description":"<p>Triggered before the isTouchedEvent config gets changed</p>\n","params":[{"type":{"names":["String"]},"name":"value"},{"type":{"names":["String"]},"name":"oldValue"}],"access":"protected","name":"beforeSetIsTouchedEvent","longname":"Base#beforeSetIsTouchedEvent","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#beforeSetIsTouchedEvent","$kind":"method","id":2260,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * Changes the value of a inputEl vdom object attribute or removes it in case it has no value\n     * @param {String} key\n     * @param {Array|Number|Object|String|null} value\n     * @param {Boolean} silent=false\n     */","meta":{"range":[5400,5674],"filename":"Base.mjs","lineno":188,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100068546","name":"Base#changeInputElKey","type":"MethodDefinition","paramnames":["key","value","silent"]},"vars":{"":null}},"description":"<p>Changes the value of a inputEl vdom object attribute or removes it in case it has no value</p>\n","params":[{"type":{"names":["String"]},"name":"key"},{"type":{"names":["Array","Number","Object","String","null"]},"name":"value"},{"type":{"names":["Boolean"]},"defaultvalue":false,"name":"silent"}],"name":"changeInputElKey","longname":"Base#changeInputElKey","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#changeInputElKey","$kind":"method","id":2261,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * Override this method as needed\n     * @param {*}      value\n     * @param {*}      oldValue\n     * @param {String} eventName\n     */","meta":{"range":[5828,6496],"filename":"Base.mjs","lineno":206,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100068598","name":"Base#doFireChangeEvent","type":"MethodDefinition","paramnames":["value","oldValue","eventName"]},"vars":{"":null}},"description":"<p>Override this method as needed</p>\n","params":[{"type":{"names":["*"]},"name":"value"},{"type":{"names":["*"]},"name":"oldValue"},{"type":{"names":["String"]},"name":"eventName"}],"name":"doFireChangeEvent","longname":"Base#doFireChangeEvent","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#doFireChangeEvent","$kind":"method","id":2262,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * Override this method as needed\n     * @param {*} value\n     * @param {*} oldValue\n     */","meta":{"range":[6607,6705],"filename":"Base.mjs","lineno":232,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100068687","name":"Base#fireChangeEvent","type":"MethodDefinition","paramnames":["value","oldValue"]},"vars":{"":null}},"description":"<p>Override this method as needed</p>\n","params":[{"type":{"names":["*"]},"name":"value"},{"type":{"names":["*"]},"name":"oldValue"}],"name":"fireChangeEvent","longname":"Base#fireChangeEvent","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#fireChangeEvent","$kind":"method","id":2263,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * Override this method as needed\n     * @param {*} value\n     * @param {*} oldValue\n     */","meta":{"range":[6816,6922],"filename":"Base.mjs","lineno":241,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100068701","name":"Base#fireUserChangeEvent","type":"MethodDefinition","paramnames":["value","oldValue"]},"vars":{"":null}},"description":"<p>Override this method as needed</p>\n","params":[{"type":{"names":["*"]},"name":"value"},{"type":{"names":["*"]},"name":"oldValue"}],"name":"fireUserChangeEvent","longname":"Base#fireUserChangeEvent","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#fireUserChangeEvent","$kind":"method","id":2264,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * Forms in neo can be nested. This method will return the closest parent which is a form.Container or null.\n     * @returns {Neo.form.Container|null}\n     */","meta":{"range":[7099,7428],"filename":"Base.mjs","lineno":249,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100068715","name":"Base#getClosestForm","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Forms in neo can be nested. This method will return the closest parent which is a form.Container or null.</p>\n","returns":[{"type":{"names":["Neo.form.Container","null"]}}],"name":"getClosestForm","longname":"Base#getClosestForm","kind":"function","memberof":"Base","scope":"instance","params":[],"$longname":"Base#getClosestForm","$kind":"method","id":2265,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * Override this method as needed\n     * @returns {Object|null}\n     */","meta":{"range":[7518,7563],"filename":"Base.mjs","lineno":267,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100068747","name":"Base#getInputEl","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Override this method as needed</p>\n","returns":[{"type":{"names":["Object","null"]}}],"name":"getInputEl","longname":"Base#getInputEl","kind":"function","memberof":"Base","scope":"instance","params":[],"$longname":"Base#getInputEl","$kind":"method","id":2266,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * Returns the combination of the field formGroup(s) & name\n     * @returns {String|null}\n     */","meta":{"range":[7679,8375],"filename":"Base.mjs","lineno":275,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100068755","name":"Base#getPath","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Returns the combination of the field formGroup(s) &amp; name</p>\n","returns":[{"type":{"names":["String","null"]}}],"name":"getPath","longname":"Base#getPath","kind":"function","memberof":"Base","scope":"instance","params":[],"$longname":"Base#getPath","$kind":"method","id":2267,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * @returns {*}\n     */","meta":{"range":[8417,8467],"filename":"Base.mjs","lineno":308,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100068848","name":"Base#getSubmitValue","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"returns":[{"type":{"names":["*"]}}],"name":"getSubmitValue","longname":"Base#getSubmitValue","kind":"function","memberof":"Base","scope":"instance","params":[],"$longname":"Base#getSubmitValue","$kind":"method","id":2268,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * @deprecated in v7.x\n     * @returns {*}\n     */","meta":{"range":[8536,8591],"filename":"Base.mjs","lineno":316,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100068856","name":"Base#getValue","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"deprecated":"in v7.x","returns":[{"type":{"names":["*"]}}],"name":"getValue","longname":"Base#getValue","kind":"function","memberof":"Base","scope":"instance","params":[],"$longname":"Base#getValue","$kind":"method","id":2269,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * @returns {Boolean}\n     */","meta":{"range":[8639,8676],"filename":"Base.mjs","lineno":323,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100068865","name":"Base#isValid","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"returns":[{"type":{"names":["Boolean"]}}],"name":"isValid","longname":"Base#isValid","kind":"function","memberof":"Base","scope":"instance","params":[],"$longname":"Base#isValid","$kind":"method","id":2270,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * @param {Object} data\n     */","meta":{"range":[8726,8883],"filename":"Base.mjs","lineno":330,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100068871","name":"Base#onFocusEnter","type":"MethodDefinition","paramnames":["data"]},"vars":{"":null}},"params":[{"type":{"names":["Object"]},"name":"data"}],"name":"onFocusEnter","longname":"Base#onFocusEnter","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#onFocusEnter","$kind":"method","id":2271,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * @param {Object} data\n     * @param {Object[]} data.oldPath\n     * @protected\n     */","meta":{"range":[8989,9686],"filename":"Base.mjs","lineno":343,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100068895","name":"Base#onFocusLeave","type":"MethodDefinition","paramnames":["data"]},"vars":{"":null}},"params":[{"type":{"names":["Object"]},"name":"data"},{"type":{"names":["Array.<Object>"]},"name":"data.oldPath"}],"access":"protected","name":"onFocusLeave","longname":"Base#onFocusLeave","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#onFocusLeave","$kind":"method","id":2272,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * Resets the field to a new value or null\n     * @param {*} value=null\n     */","meta":{"range":[9784,9879],"filename":"Base.mjs","lineno":371,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100068988","name":"Base#reset","type":"MethodDefinition","paramnames":["value"]},"vars":{"":null}},"description":"<p>Resets the field to a new value or null</p>\n","params":[{"type":{"names":["*"]},"defaultvalue":null,"name":"value"}],"name":"reset","longname":"Base#reset","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#reset","$kind":"method","id":2273,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * Checks for client-side field errors\n     * @param {Boolean} silent=true\n     * @returns {Boolean} Returns true in case there are no client-side errors\n     */","meta":{"range":[10059,10108],"filename":"Base.mjs","lineno":381,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100069009","name":"Base#validate","type":"MethodDefinition","paramnames":["silent"]},"vars":{"":null}},"description":"<p>Checks for client-side field errors</p>\n","params":[{"type":{"names":["Boolean"]},"defaultvalue":true,"name":"silent"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true in case there are no client-side errors"}],"name":"validate","longname":"Base#validate","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#validate","$kind":"method","id":2274,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n * The change event fires after the value config gets changed\n * @event change\n * @param {*} value\n * @param {*} oldValue\n * @returns {Object}\n */","meta":{"filename":"Base.mjs","lineno":386,"columnno":0,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"description":"<p>The change event fires after the value config gets changed</p>\n","kind":"event","name":"change","params":[{"type":{"names":["*"]},"name":"value"},{"type":{"names":["*"]},"name":"oldValue"}],"returns":[{"type":{"names":["Object"]}}],"longname":"event:change","scope":"global","$longname":"event:change","$kind":"event","id":2275,"neoClassName":"Neo.form.field.Base"}]}