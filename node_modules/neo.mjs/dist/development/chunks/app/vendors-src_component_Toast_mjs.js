"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["vendors-src_component_Toast_mjs"],{

/***/ "./src/component/Toast.mjs":
/*!*********************************!*\
  !*** ./src/component/Toast.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _component_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../component/Base.mjs */ "./src/component/Base.mjs");
/* harmony import */ var _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Array.mjs */ "./src/util/Array.mjs");
/* harmony import */ var _manager_Toast_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../manager/Toast.mjs */ "./src/manager/Toast.mjs");




/**
 * @class Neo.component.Toast
 * @extends Neo.component.Base
 *
 * @example
        Neo.toast({
            // mandatory
            appName         : this.component.appName,
            msg             : 'Alarm was set to 11:30 for journey into Neo development',
            // optional                        defaults
            closable        : true,         // false
            iconCls         : 'fa fa-bell', // null
            maxWidth        : 300,          // 250
            position        : 'br',         // 'tr'
            slideDirection  : 'right',      // 'right'
            title           : 'Alarm Clock' // null
        })
 */
class Toast extends _component_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    /**
     * Valid values for positions
     * @member {String[]} positions = ['tl','tc','tr','bl','bc','br']
     * @protected
     * @static
     */
    static positions = ['tl', 'tc', 'tr', 'bl', 'bc', 'br']
    /**
     * True automatically applies the core/Observable.mjs mixin
     * @member {String[]} slideDirections = ['down','up','left','right']
     * @static
     */
    static slideDirections = ['down', 'up', 'left', 'right']

    static config = {
        /**
         * @member {String} className='Neo.component.Toast'
         * @protected
         */
        className: 'Neo.component.Toast',
        /**
         * @member {String} ntype='toast'
         * @protected
         */
        ntype: 'toast',
        /**
         * @member {String[]} baseCls=['neo-toast']
         * @protected
         */
        baseCls: ['neo-toast'],
        /**
         * If true makes the toast sticky and show a close icon
         * @member {Boolean} closable=false
         */
        closable_: false,
        /**
         * @member {Boolean} floating=true
         */
        floating: true,
        /**
         * If set, it shows this icon in front of the text
         * e.g. 'fa fa-cog'
         * @member {String|null} iconCls=null
         */
        iconCls_: null,
        /**
         * Limits the width of the Toast
         * @member {Number} maxWidth=250
         */
        maxWidth: 250,
        /**
         * Sets the minimum height of the Toast
         * @member {Number} minHeight=50
         */
        minHeight: 50,
        /**
         * Your message. You can also pass in an iconCls
         * @member {String|null} msg_=null
         */
        msg_: null,
        /**
         * Describes the position of the toast, e.g. bl=bottom-left
         * This creates a cls `noe-toast-position`
         * @member {'tl'|'tc'|'tr'|'bl'|'bc'|'br'} position='tr'
         */
        position_: 'tr',
        /**
         * Describes which direction from which side the toasts slides-in
         * This creates a cls `neo-toast-slide-${direction}-in`
         * @member {'down'|'up'|'left'|'right'} slideDirection_='right'
         */
        slideDirection_: 'right',
        /**
         * Adds a title to the toast
         * @member {Number} title_=null
         */
        title_: null,
        /**
         * @member {String|null} title=null
         */
        vdom:
        {cn: [{
            cls: 'neo-toast-inner', cn: [
                {cls: ['neo-toast-icon'], removeDom: true},
                {cls: 'neo-toast-text', cn: [
                    {cls: ['neo-toast-title'], removeDom: true},
                    {cls: 'neo-toast-msg'}
                ]},
                {cls: ['neo-toast-close', 'fa', 'fa-close'], removeDom: true}
            ]
        }]}
    }

    /**
     * Timeout in ms after which the toast is removed
     * @member {Number} removeDelay=3000
     */
    removeDelay = 3000
    /**
     * Used by the ToastManager
     * @member {Boolean} running=false
     * @private
     */
    running = false

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);

        let me = this;

        // click listener for close
        me.addDomListeners([
            {click: {fn: me.destroy, delegate: '.neo-toast-close', scope: me}}
        ]);

        _manager_Toast_mjs__WEBPACK_IMPORTED_MODULE_2__["default"].register(me)
    }

    /**
     * @param {String|null} value
     * @param {String|null} oldValue
     */
    afterSetClosable(value, oldValue) {
        let vdom = this.getVdomInner().cn[2];

        vdom.removeDom = !value
    }

    /**
     * @param {String|null} value
     * @param {String|null} oldValue
     */
    afterSetIconCls(value, oldValue) {
        let vdom  = this.getVdomInner().cn[0],
            {cls} = vdom;

        vdom.removeDom = Neo.isEmpty(value);
        _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"][value ? 'add' : 'remove'](cls, value)
    }

    /**
     * Using the afterSetMsg to trigger the setup of the dom
     * A new container is added as an item.
     * We cannot use the vdom here.
     * @param {String|null} value
     * @param {String|null} oldValue
     */
    afterSetMsg(value, oldValue) {
        let vdom = this.getTextRootVdom().cn[1];

        vdom.innerHTML = value
    }

    /**
     * Apply a cls, based on the position
     * @param {String} value
     * @param {String} oldValue
     */
    afterSetPosition(value, oldValue) {
        value && this.addCls(`neo-toast-${value}`)
    }

    /**
     * Apply a cls, based on the slideDirection
     * @param {String} value
     * @param {String} oldValue
     */
    afterSetSlideDirection(value, oldValue) {
        value && this.addCls(`neo-toast-slide-${value}-in`)
    }

    /**
     * Close the toast after the mounted if not closable
     * @param {Boolean} value
     * @param {Boolean} oldValue
     */
    afterSetMounted(value, oldValue) {
        super.afterSetMounted(value, oldValue);

        let me = this;

        if (!me.closable && value) {
            me.timeout(me.removeDelay).then(() => {
                me.destroy(true)
            })
        }
    }

    /**
     * @param {String|null} value
     * @param {String|null} oldValue
     */
    afterSetTitle(value, oldValue) {
        let vdom = this.getTextRootVdom().cn[0];

        vdom.removeDom = Neo.isEmpty(value);
        vdom.innerHTML = value;
        _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"][value ? 'add' : 'remove'](vdom.cls, 'neo-toast-has-title')
    }

    /**
     * Triggered before the position config gets changed
     * @param {String} value
     * @param {String} oldValue
     * @protected
     */
    beforeSetPosition(value, oldValue) {
        return this.beforeSetEnumValue(value, oldValue, 'position')
    }

    /**
     * Triggered before the slideDirection config gets changed
     * @param {String} value
     * @param {String} oldValue
     * @protected
     */
    beforeSetSlideDirection(value, oldValue) {
        return this.beforeSetEnumValue(value, oldValue, 'slideDirection')
    }

    /**
     *
     */
    async destroy(...args) {
        let me = this;
        const superDestroy = super.destroy.bind(me);

        me.addDomListeners({
            animationend: function () {
                _manager_Toast_mjs__WEBPACK_IMPORTED_MODULE_2__["default"].removeToast(me.id);
                _manager_Toast_mjs__WEBPACK_IMPORTED_MODULE_2__["default"].unregister(me);
                superDestroy(...args);
            }
        });

        me.addCls('neo-toast-fade-out')
    }

    /**
     * This is a dialog, so we have to add an item to be able to
     * @returns {Object} vdom
     */
    getTextRootVdom() {
        return this.getVdomInner().cn[1]
    }

    /**
     * This is a dialog, so we have to add an item to be able to
     * @returns {Object} vdom
     */
    getVdomInner() {
        return this.vdom.cn[0]
    }
}

Neo.setupClass(Toast);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Toast);


/***/ }),

/***/ "./src/manager/Toast.mjs":
/*!*******************************!*\
  !*** ./src/manager/Toast.mjs ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Base.mjs */ "./src/manager/Base.mjs");
/* harmony import */ var _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Array.mjs */ "./src/util/Array.mjs");



/**
 * See Neo.dialog.Toast for examples
 * @class Neo.manager.Toast
 * @extends Neo.manager.Base
 * @singleton
 */
class Toast extends _Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.manager.Toast'
         * @protected
         */
        className: 'Neo.manager.Toast',
        /**
         * @member {Boolean} singleton=true
         * @protected
         */
        singleton: true
    }

    /**
     * Using a default margin between the item
     * If you switch the distance to the top or bottom you have to change this value accordingly
     * @member {Number} defaultMargin=16
     */
    defaultMargin = 16
    /**
     * Currently only 1 is supported, because they would overlap
     * @member {Number} maxToasts=3
     */
    maxToasts = 3
    /**
     * Counts the currently running Toasts per area
     * @member {Object} running
     */
    running = {
        bc: [], bl: [], br: [],
        tc: [], tl: [], tr: []
    }
    /**
     * If you prefer your own class to open, override here
     * @member {String} toastClass='Neo.component.Toast'
     */
    toastClass = 'Neo.component.Toast'

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);
        Neo.toast = this.createToast.bind(this);
    }

    /**
     * Create the Toast definition and pass it to the Collection
     * @param {Object} toast
     * @returns {String|null}
     */
    createToast(toast) {
        let me = this;

        if (toast.position && !me.running[toast.position]) {
            Neo.logError('[Neo.manager.Toast] Supported values for slideDirection are: tl, tc, tr, bl, bc, br');
            return null
        }

        if (!toast.msg || !toast.appName) {
            !toast.msg     && Neo.logError('[Neo.manager.Toast] Toast has to define a msg');
            !toast.appName && Neo.logError('[Neo.manager.Toast] Toast has to define an appName. Typically me.appName.');
            return null
        }

        toast = Neo.create({
            className: this.toastClass,
            ...toast
        });

        toast.on({
            mounted: me.updateItemsInPosition,
            scope  : me
        })

        return toast.id
    }

    /**
     * Find the first toast based on the maximum allowed toasts
     * @returns {*}
     * @private
     */
    findFirstToast() {
        let me = this,
            firstToast, item;

        me.filters = [{property: 'running', value: false}];

        for (item of me.map.values()) {
            if (me.running[item.position].length < me.maxToasts) {
                firstToast = item;
                firstToast.running = true;
                break
            }
        }

        me.clearFilters();

        return firstToast
    }

    /**
     * @param {Object} item
     */
    register(item) {
        super.register(item);
        this.runQueue()
    }

    /**
     * Removes a task from collection.
     * @param {String} toastId
     */
    removeToast(toastId) {
        let me    = this,
            toast = me.get(toastId),
            position;

        if (!toast) {
            return
        }

        position = toast.position;

        // decrease total of displayed toasts for a position
        _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].remove(me.running[position], toastId);

        me.updateItemsInPosition(toastId)
    }

    /**
     * Runs a ToastManager to show an item from collection.
     */
    runQueue() {
        let me = this,
            toast;

        if (me.getCount() > 0) {
            toast = me.findFirstToast();

            toast && me.showToast(toast)
        }
    }

    /**
     * @param {Neo.component.Toast} toast
     */
    showToast(toast) {
        toast.render(true);

        let me = this;

        // increase total of displayed toasts for a position
        me.running[toast.position].unshift(toast.id);

        // todo: we could use a mounted listener
        me.timeout(50).then(() => {
            me.updateItemsInPosition(toast.id)
        })
    }

    /**
     * Removes a collection item passed by reference or key
     * @param {Object|String} item
     */
    unregister(item) {
        super.unregister(item);
        this.runQueue()
    }

    /**
     * To handle multiple toasts we handle the exact position
     * from the top or bottom
     * @param {String} id
     * @returns {Promise<void>}
     */
    async updateItemsInPosition(id) {
        let me            = this,
            toast         = me.get(id),
            {position}    = toast,
            positionArray = me.running[position],
            acc           = 0,
            margin        = me.defaultMargin,
            moveTo        = position.substring(0, 1) === 't' ? 'top' : 'bottom',
            component, componentId, index, moveObj, rects;

        rects = await toast.getDomRect(positionArray);

        for ([index, componentId] of positionArray.entries()) {
            component = Neo.getComponent(componentId);
            moveObj   = {};

            acc = acc + margin;
            moveObj[moveTo] = acc + 'px';
            component.style = moveObj;
            component.update();

            // Sometimes the index is already reduced
            // so the last index might not be available
            if(rects[index]) {
                acc = acc + rects[index].height
            }
        }
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(Toast));


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,