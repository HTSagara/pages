"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["examples_videoMove_app_mjs"],{

/***/ "./examples/videoMove/MainContainer.mjs":
/*!**********************************************!*\
  !*** ./examples/videoMove/MainContainer.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _src_button_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../src/button/Base.mjs */ "./src/button/Base.mjs");
/* harmony import */ var _src_component_Video_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../src/component/Video.mjs */ "./src/component/Video.mjs");
/* harmony import */ var _src_container_Viewport_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../src/container/Viewport.mjs */ "./src/container/Viewport.mjs");




/**
 * @class Neo.examples.videoMove.MainContainer
 * @extends Neo.container.Viewport
 */
class MainContainer extends _src_container_Viewport_mjs__WEBPACK_IMPORTED_MODULE_2__["default"] {
    static config = {
        className: 'Neo.examples.videoMove.MainContainer',
        cls      : ['examples-videomove-maincontainer'],
        layout   : {ntype: 'vbox', align: 'stretch'},

        items: [{
            ntype : 'container',
            cls   : ['video-wrapper'],
            layout: {ntype: 'hbox', align: 'stretch'},

            itemDefaults: {
                ntype : 'container',
                layout: 'fit'
            },

            items: [{
                reference: 'container-1',

                items: [{
                    module : _src_component_Video_mjs__WEBPACK_IMPORTED_MODULE_1__["default"],
                    playing: true,
                    url    : 'https://video-ssl.itunes.apple.com/itunes-assets/Video125/v4/a0/57/54/a0575426-dd8e-2d25-bdf3-139702870b50/mzvf_786190431362224858.640x464.h264lc.U.p.m4v'
                }]
            }, {
                reference: 'container-2'
            }]
        }, {
            ntype : 'container',
            layout: {ntype: 'vbox', align: 'start'},
            style : {marginTop: '50px'},

            items: [{
                module : _src_button_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"],
                handler: 'up.onMoveVideoButtonClick',
                text   : 'Move Video'
            }]
        }]
    }

    /**
     *
     * @param {Object} data
     */
    onMoveVideoButtonClick(data) {
        let me         = this,
            container1 = me.getReference('container-1'),
            container2 = me.getReference('container-2');

        container1.silentVdomUpdate = true;
        container2.silentVdomUpdate = true;

        if (container2.items.length < 1) {
            container2.add(container1.removeAt(0, false))
        } else {
            container1.add(container2.removeAt(0, false))
        }

        me.promiseUpdate().then(() => {
            container1.silentVdomUpdate = false;
            container2.silentVdomUpdate = false
        })
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(MainContainer));


/***/ }),

/***/ "./examples/videoMove/app.mjs":
/*!************************************!*\
  !*** ./examples/videoMove/app.mjs ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   onStart: () => (/* binding */ onStart)
/* harmony export */ });
/* harmony import */ var _MainContainer_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MainContainer.mjs */ "./examples/videoMove/MainContainer.mjs");


const onStart = () => Neo.app({
    mainView: _MainContainer_mjs__WEBPACK_IMPORTED_MODULE_0__["default"],
    name    : 'Neo.examples.videoMove'
});


/***/ }),

/***/ "./src/component/Video.mjs":
/*!*********************************!*\
  !*** ./src/component/Video.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _component_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../component/Base.mjs */ "./src/component/Base.mjs");
/* harmony import */ var _util_VDom_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/VDom.mjs */ "./src/util/VDom.mjs");



let isOperaMini = null;

/**
 * @class Neo.component.Video
 * @extends Neo.component.Base
 *
 * @example
 *     ntype   : 'video',
 *     url     : 'https://video-ssl.itunes.apple.com/itunes-assets/Video125/v4/a0/57/54/a0575426-dd8e-2d25-bdf3-139702870b50/mzvf_786190431362224858.640x464.h264lc.U.p.m4v'
 *     autoplay: true
 *
 * @methods
 *      play
 *      pause
 */
class Video extends _component_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /*
         * @member {String} className='Neo.component.Video'
         * @protected
         */
        className: 'Neo.component.Video',
        /*
         * @member {String} ntype='video'
         * @protected
         */
        ntype: 'video',
        /*
         * @member {String[]} baseCls=['neo-video']
         */
        baseCls: ['neo-video'],
        /**
         * Automatically start the video
         * Initial setting, which does not make sense to change later
         * !!Most browsers only support muted autostart
         * @member {Boolean} autoplay=false
         */
        autoplay: false,
        /**
         * In case the browser does not support the video source the component should show an error.
         * @member {String} errorMsg='The browser does not support the video'
         */
        errorMsg: 'Your browser does not support the video tag.',
        /**
         * Current state of the video
         * @member {Boolean} playing_=false
         */
        playing_: false,
        /**
         * Type of the video
         * @member {String} type='video/mp4'
         */
        type: 'video/mp4',
        /*
         * @member {String|null} url_=null
         */
        url_: null,
        /**
         * @member {Object} _vdom
         */
        _vdom: {
            cn: [{
                flag: 'ghost',
                cls: ['neo-video-ghost'],
                cn: [{
                    tag: 'i',
                    cls: ['fa-solid', 'fa-circle-play']
                }]
            }, {
                // Neo specific configs
                tag: 'video',
                flag: 'media',
                cls: ['neo-video-media'],
                removeDom: true,
                // dom attributes
                autoplay: true,
                controls: true
            }]
        }
    }

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);

        let me = this;

        me.handleAutoplay();
        me.addDomListeners({click: me.play, delegate: '.neo-video-ghost'});
    }

    /**
     * afterSetPlaying - run the event listeners
     * @param {Boolean} value
     * @param {Boolean} oldValue
     */
    afterSetPlaying(value, oldValue) {
        let {vdom} = this,
            media = _util_VDom_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].getFlags(vdom, 'media')[0],
            ghost = _util_VDom_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].getFlags(vdom, 'ghost')[0];

        ghost.removeDom = value;
        media.removeDom = !value;

        this.update()
    }

    /**
     * Add a source element into the video element containing the url
     * @param {String} value
     * @param {String|null} oldValue
     */
    async afterSetUrl(value, oldValue) {
        if (!value) return;

        let me     = this,
            {vdom} = me,
            media  = _util_VDom_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].getFlags(vdom, 'media')[0],
            userAgent;

        if (isOperaMini === null) {
            userAgent   = await Neo.Main.getByPath({path: 'navigator.userAgent'});
            isOperaMini = userAgent.includes('Opera Mini');
        }

        media.cn = [{
            tag : 'source',
            src : value,
            type: me.type
        }];

        // Opera Mini might not support the video-source => check the user agent string
        if (isOperaMini) {
            media.cn.push({
                tag : 'span',
                html: me.errorMsg
            })
        }

        this.update()
    }

    /**
     * autoplay - run the event listeners
     * Only called in constructor and sets playing => calls update already
     *
     * Rationale: update() sends the vdom & vnode on a workers roundtrip to get the deltas.
     * While this is happening,  the component locks itself for future updates until the new vnode got back (async).
     * After the delay the framework  would trigger a 2nd roundtrip to get the deltas for the visible node.
     *
     * @protected
     */
    handleAutoplay() {
        if (!this.autoplay) return;

        let {vdom} = this,
            media = _util_VDom_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].getFlags(vdom, 'media')[0];

        // Most browsers require videos to be muted for autoplay to work.
        media.muted = true;
        // Allows inline playback on iOS devices
        media.playsInline = true;

        this.playing = true;
    }

    /**
     * Simulates `Clicked media` programmatically
     */
    pause() {
        this.playing = false
    }

    /**
     * Clicked ghost
     */
    play() {
        this.playing = true
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(Video));


/***/ }),

/***/ "./src/container/Viewport.mjs":
/*!************************************!*\
  !*** ./src/container/Viewport.mjs ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Base.mjs */ "./src/container/Base.mjs");


/**
 * @class Neo.container.Viewport
 * @extends Neo.container.Base
 */
class Viewport extends _Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.container.Viewport'
         * @protected
         */
        className: 'Neo.container.Viewport',
        /**
         * @member {String} ntype='viewport'
         * @protected
         */
        ntype: 'viewport',
        /**
         * true applies 'neo-body-viewport' to the document.body
         * @member {Boolean} applyBodyCls=true
         */
        applyBodyCls: true,
        /**
         * Assuming that a Viewport is the top level view of your app, and you want to mount it right away.
         * Could be without any items. Use false otherwise.
         * @member {Boolean} autoMount=true
         */
        autoMount: true,
        /**
         * @member {String[]} baseCls=['neo-viewport']
         */
        baseCls: ['neo-viewport'],
        /**
         * true applies a main.addon.ResizeObserver and fires a custom resize event
         * which other instances can subscribe to.
         * @member {Boolean} monitorSize_=false
         */
        monitorSize_: false
    }

    /**
     * Triggered after the mounted config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetMounted(value, oldValue) {
        super.afterSetMounted(value, oldValue);

        let me = this;

        if (value && me.monitorSize) {
            me.addDomListeners([{resize: me.onDomResize, scope: me}])
        }
    }

    /**
     *
     */
    onConstructed() {
        super.onConstructed();

        let {appName, windowId} = this;

        this.applyBodyCls && Neo.main.DomAccess.applyBodyCls({
            appName,
            cls: ['neo-body-viewport'],
            windowId
        })
    }

    /**
     * @param {Object} data
     */
    onDomResize(data) {
        this.fire('resize', data)
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(Viewport));


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmtzL2FwcC9leGFtcGxlc192aWRlb01vdmVfYXBwX21qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQWlEO0FBQ0k7QUFDRzs7QUFFeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsbUVBQVE7QUFDcEM7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGdDQUFnQzs7QUFFcEQ7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLGdDQUFnQzs7QUFFckQ7QUFDQTtBQUNBO0FBQ0EsYUFBYTs7QUFFYjtBQUNBOztBQUVBO0FBQ0EsNkJBQTZCLGdFQUFLO0FBQ2xDO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBLHFCQUFxQiw4QkFBOEI7QUFDbkQscUJBQXFCLGtCQUFrQjs7QUFFdkM7QUFDQSx5QkFBeUIsNERBQU07QUFDL0I7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBLGlFQUFlLDZCQUE2QixFQUFDOzs7Ozs7Ozs7Ozs7Ozs7O0FDekVJOztBQUUxQztBQUNQLGNBQWMsMERBQWE7QUFDM0I7QUFDQSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7OztBQ0xpRDtBQUNMOztBQUU3Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiwyREFBYTtBQUNqQztBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixVQUFVO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixTQUFTO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixhQUFhO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTs7QUFFQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSw0QkFBNEIsNkNBQTZDO0FBQ3pFOztBQUVBO0FBQ0E7QUFDQSxlQUFlLFNBQVM7QUFDeEIsZUFBZSxTQUFTO0FBQ3hCO0FBQ0E7QUFDQSxhQUFhLE1BQU07QUFDbkIsb0JBQW9CLHNEQUFRO0FBQzVCLG9CQUFvQixzREFBUTs7QUFFNUI7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxhQUFhO0FBQzVCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWEsTUFBTTtBQUNuQixxQkFBcUIsc0RBQVE7QUFDN0I7O0FBRUE7QUFDQSxvREFBb0QsNEJBQTRCO0FBQ2hGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsYUFBYSxNQUFNO0FBQ25CLG9CQUFvQixzREFBUTs7QUFFNUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUVBQWUscUJBQXFCLEVBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7QUMxTEY7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGlEQUFTO0FBQ2hDO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFNBQVM7QUFDN0I7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFVBQVU7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixTQUFTO0FBQzdCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxTQUFTO0FBQ3hCLGVBQWUsU0FBUztBQUN4QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLGlDQUFpQyxrQ0FBa0M7QUFDbkU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGFBQWEsbUJBQW1COztBQUVoQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlFQUFlLHdCQUF3QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmVvLm1qcy8uL2V4YW1wbGVzL3ZpZGVvTW92ZS9NYWluQ29udGFpbmVyLm1qcyIsIndlYnBhY2s6Ly9uZW8ubWpzLy4vZXhhbXBsZXMvdmlkZW9Nb3ZlL2FwcC5tanMiLCJ3ZWJwYWNrOi8vbmVvLm1qcy8uL3NyYy9jb21wb25lbnQvVmlkZW8ubWpzIiwid2VicGFjazovL25lby5tanMvLi9zcmMvY29udGFpbmVyL1ZpZXdwb3J0Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQnV0dG9uICAgZnJvbSAnLi4vLi4vc3JjL2J1dHRvbi9CYXNlLm1qcyc7XG5pbXBvcnQgVmlkZW8gICAgZnJvbSAnLi4vLi4vc3JjL2NvbXBvbmVudC9WaWRlby5tanMnO1xuaW1wb3J0IFZpZXdwb3J0IGZyb20gJy4uLy4uL3NyYy9jb250YWluZXIvVmlld3BvcnQubWpzJztcblxuLyoqXG4gKiBAY2xhc3MgTmVvLmV4YW1wbGVzLnZpZGVvTW92ZS5NYWluQ29udGFpbmVyXG4gKiBAZXh0ZW5kcyBOZW8uY29udGFpbmVyLlZpZXdwb3J0XG4gKi9cbmNsYXNzIE1haW5Db250YWluZXIgZXh0ZW5kcyBWaWV3cG9ydCB7XG4gICAgc3RhdGljIGNvbmZpZyA9IHtcbiAgICAgICAgY2xhc3NOYW1lOiAnTmVvLmV4YW1wbGVzLnZpZGVvTW92ZS5NYWluQ29udGFpbmVyJyxcbiAgICAgICAgY2xzICAgICAgOiBbJ2V4YW1wbGVzLXZpZGVvbW92ZS1tYWluY29udGFpbmVyJ10sXG4gICAgICAgIGxheW91dCAgIDoge250eXBlOiAndmJveCcsIGFsaWduOiAnc3RyZXRjaCd9LFxuXG4gICAgICAgIGl0ZW1zOiBbe1xuICAgICAgICAgICAgbnR5cGUgOiAnY29udGFpbmVyJyxcbiAgICAgICAgICAgIGNscyAgIDogWyd2aWRlby13cmFwcGVyJ10sXG4gICAgICAgICAgICBsYXlvdXQ6IHtudHlwZTogJ2hib3gnLCBhbGlnbjogJ3N0cmV0Y2gnfSxcblxuICAgICAgICAgICAgaXRlbURlZmF1bHRzOiB7XG4gICAgICAgICAgICAgICAgbnR5cGUgOiAnY29udGFpbmVyJyxcbiAgICAgICAgICAgICAgICBsYXlvdXQ6ICdmaXQnXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBpdGVtczogW3tcbiAgICAgICAgICAgICAgICByZWZlcmVuY2U6ICdjb250YWluZXItMScsXG5cbiAgICAgICAgICAgICAgICBpdGVtczogW3tcbiAgICAgICAgICAgICAgICAgICAgbW9kdWxlIDogVmlkZW8sXG4gICAgICAgICAgICAgICAgICAgIHBsYXlpbmc6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHVybCAgICA6ICdodHRwczovL3ZpZGVvLXNzbC5pdHVuZXMuYXBwbGUuY29tL2l0dW5lcy1hc3NldHMvVmlkZW8xMjUvdjQvYTAvNTcvNTQvYTA1NzU0MjYtZGQ4ZS0yZDI1LWJkZjMtMTM5NzAyODcwYjUwL216dmZfNzg2MTkwNDMxMzYyMjI0ODU4LjY0MHg0NjQuaDI2NGxjLlUucC5tNHYnXG4gICAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICByZWZlcmVuY2U6ICdjb250YWluZXItMidcbiAgICAgICAgICAgIH1dXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIG50eXBlIDogJ2NvbnRhaW5lcicsXG4gICAgICAgICAgICBsYXlvdXQ6IHtudHlwZTogJ3Zib3gnLCBhbGlnbjogJ3N0YXJ0J30sXG4gICAgICAgICAgICBzdHlsZSA6IHttYXJnaW5Ub3A6ICc1MHB4J30sXG5cbiAgICAgICAgICAgIGl0ZW1zOiBbe1xuICAgICAgICAgICAgICAgIG1vZHVsZSA6IEJ1dHRvbixcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiAndXAub25Nb3ZlVmlkZW9CdXR0b25DbGljaycsXG4gICAgICAgICAgICAgICAgdGV4dCAgIDogJ01vdmUgVmlkZW8nXG4gICAgICAgICAgICB9XVxuICAgICAgICB9XVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKi9cbiAgICBvbk1vdmVWaWRlb0J1dHRvbkNsaWNrKGRhdGEpIHtcbiAgICAgICAgbGV0IG1lICAgICAgICAgPSB0aGlzLFxuICAgICAgICAgICAgY29udGFpbmVyMSA9IG1lLmdldFJlZmVyZW5jZSgnY29udGFpbmVyLTEnKSxcbiAgICAgICAgICAgIGNvbnRhaW5lcjIgPSBtZS5nZXRSZWZlcmVuY2UoJ2NvbnRhaW5lci0yJyk7XG5cbiAgICAgICAgY29udGFpbmVyMS5zaWxlbnRWZG9tVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgY29udGFpbmVyMi5zaWxlbnRWZG9tVXBkYXRlID0gdHJ1ZTtcblxuICAgICAgICBpZiAoY29udGFpbmVyMi5pdGVtcy5sZW5ndGggPCAxKSB7XG4gICAgICAgICAgICBjb250YWluZXIyLmFkZChjb250YWluZXIxLnJlbW92ZUF0KDAsIGZhbHNlKSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnRhaW5lcjEuYWRkKGNvbnRhaW5lcjIucmVtb3ZlQXQoMCwgZmFsc2UpKVxuICAgICAgICB9XG5cbiAgICAgICAgbWUucHJvbWlzZVVwZGF0ZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgY29udGFpbmVyMS5zaWxlbnRWZG9tVXBkYXRlID0gZmFsc2U7XG4gICAgICAgICAgICBjb250YWluZXIyLnNpbGVudFZkb21VcGRhdGUgPSBmYWxzZVxuICAgICAgICB9KVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTmVvLnNldHVwQ2xhc3MoTWFpbkNvbnRhaW5lcik7XG4iLCJpbXBvcnQgTWFpbkNvbnRhaW5lciAgZnJvbSAnLi9NYWluQ29udGFpbmVyLm1qcyc7XG5cbmV4cG9ydCBjb25zdCBvblN0YXJ0ID0gKCkgPT4gTmVvLmFwcCh7XG4gICAgbWFpblZpZXc6IE1haW5Db250YWluZXIsXG4gICAgbmFtZSAgICA6ICdOZW8uZXhhbXBsZXMudmlkZW9Nb3ZlJ1xufSk7XG4iLCJpbXBvcnQgQmFzZUNvbXBvbmVudCBmcm9tICcuLi9jb21wb25lbnQvQmFzZS5tanMnO1xuaW1wb3J0IFZEb21VdGlsICAgICAgZnJvbSAnLi4vdXRpbC9WRG9tLm1qcyc7XG5cbmxldCBpc09wZXJhTWluaSA9IG51bGw7XG5cbi8qKlxuICogQGNsYXNzIE5lby5jb21wb25lbnQuVmlkZW9cbiAqIEBleHRlbmRzIE5lby5jb21wb25lbnQuQmFzZVxuICpcbiAqIEBleGFtcGxlXG4gKiAgICAgbnR5cGUgICA6ICd2aWRlbycsXG4gKiAgICAgdXJsICAgICA6ICdodHRwczovL3ZpZGVvLXNzbC5pdHVuZXMuYXBwbGUuY29tL2l0dW5lcy1hc3NldHMvVmlkZW8xMjUvdjQvYTAvNTcvNTQvYTA1NzU0MjYtZGQ4ZS0yZDI1LWJkZjMtMTM5NzAyODcwYjUwL216dmZfNzg2MTkwNDMxMzYyMjI0ODU4LjY0MHg0NjQuaDI2NGxjLlUucC5tNHYnXG4gKiAgICAgYXV0b3BsYXk6IHRydWVcbiAqXG4gKiBAbWV0aG9kc1xuICogICAgICBwbGF5XG4gKiAgICAgIHBhdXNlXG4gKi9cbmNsYXNzIFZpZGVvIGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gICAgc3RhdGljIGNvbmZpZyA9IHtcbiAgICAgICAgLypcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBjbGFzc05hbWU9J05lby5jb21wb25lbnQuVmlkZW8nXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIGNsYXNzTmFtZTogJ05lby5jb21wb25lbnQuVmlkZW8nLFxuICAgICAgICAvKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IG50eXBlPSd2aWRlbydcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgbnR5cGU6ICd2aWRlbycsXG4gICAgICAgIC8qXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ1tdfSBiYXNlQ2xzPVsnbmVvLXZpZGVvJ11cbiAgICAgICAgICovXG4gICAgICAgIGJhc2VDbHM6IFsnbmVvLXZpZGVvJ10sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBdXRvbWF0aWNhbGx5IHN0YXJ0IHRoZSB2aWRlb1xuICAgICAgICAgKiBJbml0aWFsIHNldHRpbmcsIHdoaWNoIGRvZXMgbm90IG1ha2Ugc2Vuc2UgdG8gY2hhbmdlIGxhdGVyXG4gICAgICAgICAqICEhTW9zdCBicm93c2VycyBvbmx5IHN1cHBvcnQgbXV0ZWQgYXV0b3N0YXJ0XG4gICAgICAgICAqIEBtZW1iZXIge0Jvb2xlYW59IGF1dG9wbGF5PWZhbHNlXG4gICAgICAgICAqL1xuICAgICAgICBhdXRvcGxheTogZmFsc2UsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbiBjYXNlIHRoZSBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdGhlIHZpZGVvIHNvdXJjZSB0aGUgY29tcG9uZW50IHNob3VsZCBzaG93IGFuIGVycm9yLlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IGVycm9yTXNnPSdUaGUgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHRoZSB2aWRlbydcbiAgICAgICAgICovXG4gICAgICAgIGVycm9yTXNnOiAnWW91ciBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdGhlIHZpZGVvIHRhZy4nLFxuICAgICAgICAvKipcbiAgICAgICAgICogQ3VycmVudCBzdGF0ZSBvZiB0aGUgdmlkZW9cbiAgICAgICAgICogQG1lbWJlciB7Qm9vbGVhbn0gcGxheWluZ189ZmFsc2VcbiAgICAgICAgICovXG4gICAgICAgIHBsYXlpbmdfOiBmYWxzZSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFR5cGUgb2YgdGhlIHZpZGVvXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gdHlwZT0ndmlkZW8vbXA0J1xuICAgICAgICAgKi9cbiAgICAgICAgdHlwZTogJ3ZpZGVvL21wNCcsXG4gICAgICAgIC8qXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ3xudWxsfSB1cmxfPW51bGxcbiAgICAgICAgICovXG4gICAgICAgIHVybF86IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3R9IF92ZG9tXG4gICAgICAgICAqL1xuICAgICAgICBfdmRvbToge1xuICAgICAgICAgICAgY246IFt7XG4gICAgICAgICAgICAgICAgZmxhZzogJ2dob3N0JyxcbiAgICAgICAgICAgICAgICBjbHM6IFsnbmVvLXZpZGVvLWdob3N0J10sXG4gICAgICAgICAgICAgICAgY246IFt7XG4gICAgICAgICAgICAgICAgICAgIHRhZzogJ2knLFxuICAgICAgICAgICAgICAgICAgICBjbHM6IFsnZmEtc29saWQnLCAnZmEtY2lyY2xlLXBsYXknXVxuICAgICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgLy8gTmVvIHNwZWNpZmljIGNvbmZpZ3NcbiAgICAgICAgICAgICAgICB0YWc6ICd2aWRlbycsXG4gICAgICAgICAgICAgICAgZmxhZzogJ21lZGlhJyxcbiAgICAgICAgICAgICAgICBjbHM6IFsnbmVvLXZpZGVvLW1lZGlhJ10sXG4gICAgICAgICAgICAgICAgcmVtb3ZlRG9tOiB0cnVlLFxuICAgICAgICAgICAgICAgIC8vIGRvbSBhdHRyaWJ1dGVzXG4gICAgICAgICAgICAgICAgYXV0b3BsYXk6IHRydWUsXG4gICAgICAgICAgICAgICAgY29udHJvbHM6IHRydWVcbiAgICAgICAgICAgIH1dXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXG4gICAgICovXG4gICAgY29uc3RydWN0KGNvbmZpZykge1xuICAgICAgICBzdXBlci5jb25zdHJ1Y3QoY29uZmlnKTtcblxuICAgICAgICBsZXQgbWUgPSB0aGlzO1xuXG4gICAgICAgIG1lLmhhbmRsZUF1dG9wbGF5KCk7XG4gICAgICAgIG1lLmFkZERvbUxpc3RlbmVycyh7Y2xpY2s6IG1lLnBsYXksIGRlbGVnYXRlOiAnLm5lby12aWRlby1naG9zdCd9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBhZnRlclNldFBsYXlpbmcgLSBydW4gdGhlIGV2ZW50IGxpc3RlbmVyc1xuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gdmFsdWVcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9sZFZhbHVlXG4gICAgICovXG4gICAgYWZ0ZXJTZXRQbGF5aW5nKHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICBsZXQge3Zkb219ID0gdGhpcyxcbiAgICAgICAgICAgIG1lZGlhID0gVkRvbVV0aWwuZ2V0RmxhZ3ModmRvbSwgJ21lZGlhJylbMF0sXG4gICAgICAgICAgICBnaG9zdCA9IFZEb21VdGlsLmdldEZsYWdzKHZkb20sICdnaG9zdCcpWzBdO1xuXG4gICAgICAgIGdob3N0LnJlbW92ZURvbSA9IHZhbHVlO1xuICAgICAgICBtZWRpYS5yZW1vdmVEb20gPSAhdmFsdWU7XG5cbiAgICAgICAgdGhpcy51cGRhdGUoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhIHNvdXJjZSBlbGVtZW50IGludG8gdGhlIHZpZGVvIGVsZW1lbnQgY29udGFpbmluZyB0aGUgdXJsXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlXG4gICAgICogQHBhcmFtIHtTdHJpbmd8bnVsbH0gb2xkVmFsdWVcbiAgICAgKi9cbiAgICBhc3luYyBhZnRlclNldFVybCh2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgaWYgKCF2YWx1ZSkgcmV0dXJuO1xuXG4gICAgICAgIGxldCBtZSAgICAgPSB0aGlzLFxuICAgICAgICAgICAge3Zkb219ID0gbWUsXG4gICAgICAgICAgICBtZWRpYSAgPSBWRG9tVXRpbC5nZXRGbGFncyh2ZG9tLCAnbWVkaWEnKVswXSxcbiAgICAgICAgICAgIHVzZXJBZ2VudDtcblxuICAgICAgICBpZiAoaXNPcGVyYU1pbmkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHVzZXJBZ2VudCAgID0gYXdhaXQgTmVvLk1haW4uZ2V0QnlQYXRoKHtwYXRoOiAnbmF2aWdhdG9yLnVzZXJBZ2VudCd9KTtcbiAgICAgICAgICAgIGlzT3BlcmFNaW5pID0gdXNlckFnZW50LmluY2x1ZGVzKCdPcGVyYSBNaW5pJyk7XG4gICAgICAgIH1cblxuICAgICAgICBtZWRpYS5jbiA9IFt7XG4gICAgICAgICAgICB0YWcgOiAnc291cmNlJyxcbiAgICAgICAgICAgIHNyYyA6IHZhbHVlLFxuICAgICAgICAgICAgdHlwZTogbWUudHlwZVxuICAgICAgICB9XTtcblxuICAgICAgICAvLyBPcGVyYSBNaW5pIG1pZ2h0IG5vdCBzdXBwb3J0IHRoZSB2aWRlby1zb3VyY2UgPT4gY2hlY2sgdGhlIHVzZXIgYWdlbnQgc3RyaW5nXG4gICAgICAgIGlmIChpc09wZXJhTWluaSkge1xuICAgICAgICAgICAgbWVkaWEuY24ucHVzaCh7XG4gICAgICAgICAgICAgICAgdGFnIDogJ3NwYW4nLFxuICAgICAgICAgICAgICAgIGh0bWw6IG1lLmVycm9yTXNnXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy51cGRhdGUoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGF1dG9wbGF5IC0gcnVuIHRoZSBldmVudCBsaXN0ZW5lcnNcbiAgICAgKiBPbmx5IGNhbGxlZCBpbiBjb25zdHJ1Y3RvciBhbmQgc2V0cyBwbGF5aW5nID0+IGNhbGxzIHVwZGF0ZSBhbHJlYWR5XG4gICAgICpcbiAgICAgKiBSYXRpb25hbGU6IHVwZGF0ZSgpIHNlbmRzIHRoZSB2ZG9tICYgdm5vZGUgb24gYSB3b3JrZXJzIHJvdW5kdHJpcCB0byBnZXQgdGhlIGRlbHRhcy5cbiAgICAgKiBXaGlsZSB0aGlzIGlzIGhhcHBlbmluZywgIHRoZSBjb21wb25lbnQgbG9ja3MgaXRzZWxmIGZvciBmdXR1cmUgdXBkYXRlcyB1bnRpbCB0aGUgbmV3IHZub2RlIGdvdCBiYWNrIChhc3luYykuXG4gICAgICogQWZ0ZXIgdGhlIGRlbGF5IHRoZSBmcmFtZXdvcmsgIHdvdWxkIHRyaWdnZXIgYSAybmQgcm91bmR0cmlwIHRvIGdldCB0aGUgZGVsdGFzIGZvciB0aGUgdmlzaWJsZSBub2RlLlxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGhhbmRsZUF1dG9wbGF5KCkge1xuICAgICAgICBpZiAoIXRoaXMuYXV0b3BsYXkpIHJldHVybjtcblxuICAgICAgICBsZXQge3Zkb219ID0gdGhpcyxcbiAgICAgICAgICAgIG1lZGlhID0gVkRvbVV0aWwuZ2V0RmxhZ3ModmRvbSwgJ21lZGlhJylbMF07XG5cbiAgICAgICAgLy8gTW9zdCBicm93c2VycyByZXF1aXJlIHZpZGVvcyB0byBiZSBtdXRlZCBmb3IgYXV0b3BsYXkgdG8gd29yay5cbiAgICAgICAgbWVkaWEubXV0ZWQgPSB0cnVlO1xuICAgICAgICAvLyBBbGxvd3MgaW5saW5lIHBsYXliYWNrIG9uIGlPUyBkZXZpY2VzXG4gICAgICAgIG1lZGlhLnBsYXlzSW5saW5lID0gdHJ1ZTtcblxuICAgICAgICB0aGlzLnBsYXlpbmcgPSB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNpbXVsYXRlcyBgQ2xpY2tlZCBtZWRpYWAgcHJvZ3JhbW1hdGljYWxseVxuICAgICAqL1xuICAgIHBhdXNlKCkge1xuICAgICAgICB0aGlzLnBsYXlpbmcgPSBmYWxzZVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsaWNrZWQgZ2hvc3RcbiAgICAgKi9cbiAgICBwbGF5KCkge1xuICAgICAgICB0aGlzLnBsYXlpbmcgPSB0cnVlXG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBOZW8uc2V0dXBDbGFzcyhWaWRlbyk7XG4iLCJpbXBvcnQgQ29udGFpbmVyIGZyb20gJy4vQmFzZS5tanMnO1xuXG4vKipcbiAqIEBjbGFzcyBOZW8uY29udGFpbmVyLlZpZXdwb3J0XG4gKiBAZXh0ZW5kcyBOZW8uY29udGFpbmVyLkJhc2VcbiAqL1xuY2xhc3MgVmlld3BvcnQgZXh0ZW5kcyBDb250YWluZXIge1xuICAgIHN0YXRpYyBjb25maWcgPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IGNsYXNzTmFtZT0nTmVvLmNvbnRhaW5lci5WaWV3cG9ydCdcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgY2xhc3NOYW1lOiAnTmVvLmNvbnRhaW5lci5WaWV3cG9ydCcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IG50eXBlPSd2aWV3cG9ydCdcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgbnR5cGU6ICd2aWV3cG9ydCcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiB0cnVlIGFwcGxpZXMgJ25lby1ib2R5LXZpZXdwb3J0JyB0byB0aGUgZG9jdW1lbnQuYm9keVxuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBhcHBseUJvZHlDbHM9dHJ1ZVxuICAgICAgICAgKi9cbiAgICAgICAgYXBwbHlCb2R5Q2xzOiB0cnVlLFxuICAgICAgICAvKipcbiAgICAgICAgICogQXNzdW1pbmcgdGhhdCBhIFZpZXdwb3J0IGlzIHRoZSB0b3AgbGV2ZWwgdmlldyBvZiB5b3VyIGFwcCwgYW5kIHlvdSB3YW50IHRvIG1vdW50IGl0IHJpZ2h0IGF3YXkuXG4gICAgICAgICAqIENvdWxkIGJlIHdpdGhvdXQgYW55IGl0ZW1zLiBVc2UgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBhdXRvTW91bnQ9dHJ1ZVxuICAgICAgICAgKi9cbiAgICAgICAgYXV0b01vdW50OiB0cnVlLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nW119IGJhc2VDbHM9WyduZW8tdmlld3BvcnQnXVxuICAgICAgICAgKi9cbiAgICAgICAgYmFzZUNsczogWyduZW8tdmlld3BvcnQnXSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHRydWUgYXBwbGllcyBhIG1haW4uYWRkb24uUmVzaXplT2JzZXJ2ZXIgYW5kIGZpcmVzIGEgY3VzdG9tIHJlc2l6ZSBldmVudFxuICAgICAgICAgKiB3aGljaCBvdGhlciBpbnN0YW5jZXMgY2FuIHN1YnNjcmliZSB0by5cbiAgICAgICAgICogQG1lbWJlciB7Qm9vbGVhbn0gbW9uaXRvclNpemVfPWZhbHNlXG4gICAgICAgICAqL1xuICAgICAgICBtb25pdG9yU2l6ZV86IGZhbHNlXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGFmdGVyIHRoZSBtb3VudGVkIGNvbmZpZyBnb3QgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gdmFsdWVcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFmdGVyU2V0TW91bnRlZCh2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgc3VwZXIuYWZ0ZXJTZXRNb3VudGVkKHZhbHVlLCBvbGRWYWx1ZSk7XG5cbiAgICAgICAgbGV0IG1lID0gdGhpcztcblxuICAgICAgICBpZiAodmFsdWUgJiYgbWUubW9uaXRvclNpemUpIHtcbiAgICAgICAgICAgIG1lLmFkZERvbUxpc3RlbmVycyhbe3Jlc2l6ZTogbWUub25Eb21SZXNpemUsIHNjb3BlOiBtZX1dKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBvbkNvbnN0cnVjdGVkKCkge1xuICAgICAgICBzdXBlci5vbkNvbnN0cnVjdGVkKCk7XG5cbiAgICAgICAgbGV0IHthcHBOYW1lLCB3aW5kb3dJZH0gPSB0aGlzO1xuXG4gICAgICAgIHRoaXMuYXBwbHlCb2R5Q2xzICYmIE5lby5tYWluLkRvbUFjY2Vzcy5hcHBseUJvZHlDbHMoe1xuICAgICAgICAgICAgYXBwTmFtZSxcbiAgICAgICAgICAgIGNsczogWyduZW8tYm9keS12aWV3cG9ydCddLFxuICAgICAgICAgICAgd2luZG93SWRcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgICAqL1xuICAgIG9uRG9tUmVzaXplKGRhdGEpIHtcbiAgICAgICAgdGhpcy5maXJlKCdyZXNpemUnLCBkYXRhKVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTmVvLnNldHVwQ2xhc3MoVmlld3BvcnQpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9