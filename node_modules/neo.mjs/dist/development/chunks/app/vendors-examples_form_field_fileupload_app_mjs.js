"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["vendors-examples_form_field_fileupload_app_mjs"],{

/***/ "./examples/form/field/fileupload/MainContainer.mjs":
/*!**********************************************************!*\
  !*** ./examples/form/field/fileupload/MainContainer.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _ConfigurationViewport_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../ConfigurationViewport.mjs */ "./examples/ConfigurationViewport.mjs");
/* harmony import */ var _src_form_field_FileUpload_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../src/form/field/FileUpload.mjs */ "./src/form/field/FileUpload.mjs");
/* harmony import */ var _src_form_field_Number_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../src/form/field/Number.mjs */ "./src/form/field/Number.mjs");
/* harmony import */ var _src_container_Panel_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../src/container/Panel.mjs */ "./src/container/Panel.mjs");





/**
 * @class Neo.examples.form.field.text.MainContainer
 * @extends Neo.examples.ConfigurationViewport
 */
class MainContainer extends _ConfigurationViewport_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        className           : 'Neo.examples.form.field.text.MainContainer',
        autoMount           : true,
        configItemLabelWidth: 160,
        layout              : {ntype: 'hbox', align: 'stretch'}
    }

    createConfigurationComponents() {
        let me = this;

        return [{
            module   : _src_form_field_Number_mjs__WEBPACK_IMPORTED_MODULE_2__["default"],
            labelText: 'width',
            listeners: {change: me.onConfigChange.bind(me, 'width')},
            maxValue : 350,
            minValue : 200,
            stepSize : 5,
            style    : {marginTop: '10px'},
            value    : me.exampleComponent.width
        }];
    }

    createExampleComponent() {
        return Neo.create(_src_container_Panel_mjs__WEBPACK_IMPORTED_MODULE_3__["default"], {
            style : 'padding:1em',
            items : [{
                module            : _src_form_field_FileUpload_mjs__WEBPACK_IMPORTED_MODULE_1__["default"],
                id                : 'my-downloadable-test',
                uploadUrl         : 'http://127.0.0.1:3000/file-upload-test',
                documentStatusUrl : 'http://127.0.0.1:3000/document-status-downloadable?documentId={documentId}',
                documentDeleteUrl : 'http://127.0.0.1:3000/document-delete?documentId={documentId}',
                downloadUrl       : 'http://127.0.0.1:3000/getDocument?documentId={documentId}',
                width             : 350,
                maxSize           : '10mb',
                types             : {
                    png : 1,
                    jpg : 1,
                    xls : 1,
                    pdf : 1
                },
                listeners : {
                    beforeRequest({ headers }) {
                        headers['X-XSRF-TOKEN'] = 'my-xsrf-token'
                    }
                }
            }, {
                module            : _src_form_field_FileUpload_mjs__WEBPACK_IMPORTED_MODULE_1__["default"],
                id                : 'my-not-downloadable-test',
                uploadUrl         : 'http://127.0.0.1:3000/file-upload-test',
                documentStatusUrl : 'http://127.0.0.1:3000/document-status-not-downloadable?documentId={documentId}',
                documentDeleteUrl : 'http://127.0.0.1:3000/document-delete?documentId={documentId}',
                downloadUrl       : 'http://127.0.0.1:3000/getDocument?documentId={documentId}',
                width             : 350,
                maxSize           : '10mb',
                types             : {
                    png : 1,
                    jpg : 1,
                    xls : 1,
                    pdf : 1
                }
            }, {
                module            : _src_form_field_FileUpload_mjs__WEBPACK_IMPORTED_MODULE_1__["default"],
                id                : 'my-upload-fail-test',
                uploadUrl         : 'http://127.0.0.1:3000/file-upload-test-fail',
                documentStatusUrl : 'http://127.0.0.1:3000/document-status?documentId={documentId}',
                documentDeleteUrl : 'http://127.0.0.1:3000/document-delete?documentId={documentId}',
                downloadUrl       : 'http://127.0.0.1:3000/getDocument?documentId={documentId}',
                width             : 350,
                maxSize           : '10mb',
                types             : {
                    png : 1,
                    jpg : 1,
                    xls : 1,
                    pdf : 1
                }
            }, {
                module            : _src_form_field_FileUpload_mjs__WEBPACK_IMPORTED_MODULE_1__["default"],
                id                : 'my-scan-fail-test',
                uploadUrl         : 'http://127.0.0.1:3000/file-upload-test',
                documentStatusUrl : 'http://127.0.0.1:3000/document-status-fail?documentId={documentId}',
                documentDeleteUrl : 'http://127.0.0.1:3000/document-delete?documentId={documentId}',
                downloadUrl       : 'http://127.0.0.1:3000/getDocument?documentId={documentId}',
                width             : 350,
                maxSize           : '10mb',
                types             : {
                    png : 1,
                    jpg : 1,
                    xls : 1,
                    pdf : 1
                }
            }, {
                module            : _src_form_field_FileUpload_mjs__WEBPACK_IMPORTED_MODULE_1__["default"],
                id                : 'my-existing-document-test',
                document          : {
                    id       : 2,
                    fileName : 'test.pdf',
                    size     : 10664885,
                    status   : 'UN_DOWNLOADABLE'
                },
                uploadUrl         : 'http://127.0.0.1:3000/file-upload-test',
                documentStatusUrl : 'http://127.0.0.1:3000/document-status-not-downloadable?documentId={documentId}',
                documentDeleteUrl : 'http://127.0.0.1:3000/document-delete?documentId={documentId}',
                downloadUrl       : 'http://127.0.0.1:3000/getDocument?documentId={documentId}',
                width             : 350,
                maxSize           : '10mb',
                types             : {
                    png : 1,
                    jpg : 1,
                    xls : 1,
                    pdf : 1
                }
            }, {
                module            : _src_form_field_FileUpload_mjs__WEBPACK_IMPORTED_MODULE_1__["default"],
                id                : 'my-non-existing-document-test',
                document          : {
                    id       : 2,
                    fileName : 'test.pdf',
                    size     : 10664885,
                    status   : 'DELETED'
                },
                uploadUrl         : 'http://127.0.0.1:3000/file-upload-test',
                documentStatusUrl : 'http://127.0.0.1:3000/document-status-non-existent?documentId={documentId}',
                documentDeleteUrl : 'http://127.0.0.1:3000/document-delete?documentId={documentId}',
                downloadUrl       : 'http://127.0.0.1:3000/getDocument?documentId={documentId}',
                width             : 350,
                maxSize           : '10mb',
                types             : {
                    png : 1,
                    jpg : 1,
                    xls : 1,
                    pdf : 1
                }
            }, {
                module            : _src_form_field_FileUpload_mjs__WEBPACK_IMPORTED_MODULE_1__["default"],
                id                : 'my-failing-document-status-test',
                uploadUrl         : 'http://127.0.0.1:3000/file-upload-test',
                documentStatusUrl : 'http://127.0.0.1:3000/document-status-fails?documentId={documentId}',
                documentDeleteUrl : 'http://127.0.0.1:3000/document-delete?documentId={documentId}',
                downloadUrl       : 'http://127.0.0.1:3000/getDocument?documentId={documentId}',
                width             : 350,
                maxSize           : '10mb',
                types             : {
                    png : 1,
                    jpg : 1,
                    xls : 1,
                    pdf : 1
                }
            }]
        });
    }
}

Neo.applyClassConfig(MainContainer);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MainContainer);


/***/ }),

/***/ "./examples/form/field/fileupload/app.mjs":
/*!************************************************!*\
  !*** ./examples/form/field/fileupload/app.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   onStart: () => (/* binding */ onStart)
/* harmony export */ });
/* harmony import */ var _MainContainer_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MainContainer.mjs */ "./examples/form/field/fileupload/MainContainer.mjs");


const onStart = () => Neo.app({
    mainView: _MainContainer_mjs__WEBPACK_IMPORTED_MODULE_0__["default"],
    name    : 'Neo.examples.form.field.fileupload'
});


/***/ }),

/***/ "./src/form/field/Base.mjs":
/*!*********************************!*\
  !*** ./src/form/field/Base.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _component_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../component/Base.mjs */ "./src/component/Base.mjs");
/* harmony import */ var _manager_Component_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../manager/Component.mjs */ "./src/manager/Component.mjs");



/**
 * Abstract base class for form fields
 * @class Neo.form.field.Base
 * @extends Neo.component.Base
 */
class Base extends _component_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.form.field.Base'
         * @protected
         */
        className: 'Neo.form.field.Base',
        /**
         * @member {String} ntype='basefield'
         * @protected
         */
        ntype: 'basefield',
        /**
         * Form groups can get set on any parent component level.
         * An alternative way for using dots in field names.
         * @member {String|null} formGroup_=null
         */
        formGroup_: null,
        /**
         * @member {String|null} name_=null
         */
        name_: null,
        /**
         * Neo itself does not need field names to get mapped to the DOM (input nodes),
         * except for CheckBoxes & Radios to work. It can be useful for testing tools
         * & accessibility though, so the default got set to true.
         * Feel free to change it to false to keep the DOM minimal.
         * @member {Boolean} renderName_=true
         */
        renderName_: true,
        /**
         * In case renderName is set to true, you can optionally render the combination
         * of all formGroup(s) & the field name into the DOM => input node
         * @member {Boolean} renderPath=true
         */
        renderPath: true,
        /**
         * @member {*} value_=null
         */
        value_: null
    }

    /**
     * An internal cache for formGroups of all parent levels
     * @member {String|null} formGroupString=null
     */
    formGroupString = null
    /**
     * An internal cache for formGroup(s) and the field name
     * @member {String|null} path=null
     */
    path = null

    /**
     * Triggered after the name config got changed
     * @param {String|null} value
     * @param {String|null} oldValue
     */
    afterSetName(value, oldValue) {
        let me = this;

        me.renderName && me.changeInputElKey('name', me.renderPath ? me.getPath() : value)
    }

    /**
     * Triggered after the value config got changed
     * @param {*} value
     * @param {*} oldValue
     */
    afterSetValue(value, oldValue) {
        if (oldValue !== undefined) {
            this.fireChangeEvent(value, oldValue)
        }
    }

    /**
     * Triggered when accessing the formGroup config
     * @param {String|null} value
     * @returns {String|null} parents
     * @protected
     */
    beforeGetFormGroup(value) {
        let me    = this,
            group = [],
            returnValue;

        if (me.formGroupString) {
            return me.formGroupString;
        }

        value && group.push(value);

        _manager_Component_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].getParents(me).forEach(parent => {
            parent.formGroup && group.unshift(parent.formGroup)
        });

        returnValue = group.join('.');

        me.formGroupString = returnValue;

        return returnValue
    }

    /**
     * Changes the value of a inputEl vdom object attribute or removes it in case it has no value
     * @param {String} key
     * @param {Array|Number|Object|String|null} value
     * @param {Boolean} silent=false
     */
    changeInputElKey(key, value, silent=false) {
        let me = this;

        if (value || Neo.isBoolean(value) || value === 0) {
            me.getInputEl()[key] = value;
        } else {
            delete me.getInputEl()[key];
        }

        !silent && me.update()
    }

    /**
     * Override this method as needed
     * @param {*} value
     * @param {*} oldValue
     */
    fireChangeEvent(value, oldValue) {
        let me            = this,
            FormContainer = Neo.form?.Container;

        me.fire('change', {
            component: me,
            oldValue,
            value
        });

        if (!me.suspendEvents) {
            _manager_Component_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].getParents(me).forEach(parent => {
                if (FormContainer && parent instanceof FormContainer) {
                    parent.fire('fieldChange', {
                        component: me,
                        oldValue,
                        value
                    })
                }
            })
        }
    }

    /**
     * Override this method as needed
     * @returns {Object|null}
     */
    getInputEl() {
        return this.vdom
    }

    /**
     * Returns the combination of the field formGroup(s) & name
     * @returns {String|null}
     */
    getPath() {
        let me = this,
            path;

        if (!me.path) {
            path = me.formGroup ? me.formGroup.split('.') : [];

            me.name && path.push(me.name);

            if (path.length < 1) {
                return null
            }

            me.path = path.join('.');
        }

        if (!me.path) {
            me.path = 'none'
        }

        return me.path === 'none' ? null: me.path
    }

    /**
     * @returns {*}
     */
    getValue() {
        return this.value;
    }

    /**
     * @returns {Boolean}
     */
    isValid() {
        return true;
    }

    /**
     * @param {Object} data
     * @param {Object[]} data.oldPath
     * @protected
     */
    onFocusLeave(data) {
        super.onFocusLeave?.(data);

        let me            = this,
            FormContainer = Neo.form?.Container;

        if (!me.suspendEvents) {
            _manager_Component_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].getParents(me).forEach(parent => {
                if (FormContainer && parent instanceof FormContainer) {
                    parent.fire('fieldFocusLeave', {
                        ...data,
                        component: me
                    })
                }
            })
        }
    }

    /**
     * Resets the field to a new value or null
     * @param {*} value=null
     */
    reset(value=null) {
        this.value = value;
    }

    /**
     * Checks for client-side field errors
     * @param {Boolean} silent=true
     * @returns {Boolean} Returns true in case there are no client-side errors
     */
    validate(silent=true) {
        return true;
    }
}

/**
 * The change event fires after the value config gets changed
 * @event change
 * @param {*} value
 * @param {*} oldValue
 * @returns {Object}
 */

Neo.applyClassConfig(Base);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Base);


/***/ }),

/***/ "./src/form/field/FileUpload.mjs":
/*!***************************************!*\
  !*** ./src/form/field/FileUpload.mjs ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _form_field_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../form/field/Base.mjs */ "./src/form/field/Base.mjs");
/* harmony import */ var _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/Array.mjs */ "./src/util/Array.mjs");



const
    sizeRE         = /^(\d+)(kb|mb|gb)?$/i,
    sizeMultiplier = {
        unit : 1,
        kb   : 1000,
        mb   : 1000000,
        gb   : 1000000000
    };

/**
 * An accessible file uploading widget which automatically commences an upload as soon as
 * a file is selected using the UI.
 *
 * The URL to which the file must be uploaded is specified in the {@link config#uploadUrl} property.
 * This service must return a JSON status response in the following form for successful uploads:
 *
 * ```json
 * {
 *     "success" : true,
 *     "documentId" : 1
 * }
 * ```
 *
 * And the following form for unsuccessful uploads:
 *
 * ```json
 * {
 *     "success" : false,
 *     "message" : "Why the upload was rejected"
 * }
 * ```
 *
 * The name of the `documentId` property is configured in {@link #member-documentIdParameter}.
 * It defaults to `'documentId'`.
 *
 * The `documentId` is used when requesting the document malware scan status, and when requesting
 * that the document be deleted, or downloaded.
 *
 * If the upload is successful, then the {@link #member-documentStatusUrl} is polled until the
 * malware scan. The document id returned from the upload is passed in the parameter named
 * by the {@link #member-documentIdParameter}. It defaults to `'documentId'`.
 *
 * This service must return a JSON status response in the following if the scan is still progressing:
 *
 * ```json
 * {
 *     "status" : "scanning"
 * }
 * ```
 *
 * And the following form is malware was detected:
 *
 * ```json
 * {
 *     "status" : "scan-failed"
 * }
 * ```
 *
 * After a successful scan, a document may or may not be downloadable.
 *
 * For a downloadable document, the response must be:
 *
 * ```json
 * {
 *     "status" : "downloadable"
 * }
 * ```
 *
 * For a non-downloadable document, the response must be:
 *
 * ```json
 * {
 *     "status" : "not-downloadable"
 * }
 * ```
 * @class Neo.form.field.FileUpload
 * @extends Neo.form.field.Base
 */
class FileUpload extends _form_field_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.form.field.FileUpload'
         * @protected
         */
        className: 'Neo.form.field.FileUpload',
        /**
         * @member {String} ntype='file-upload-field'
         * @protected
         */
        ntype: 'file-upload-field',
        /**
         * @member {String[]} baseCls=['neo-file-upload-field']
         * @protected
         */
        baseCls: ['neo-file-upload-field'],
        /**
         * @member {Object} _vdom
         */
        _vdom: {
            cn : [
                {
                    tag : 'i',
                    cls : 'neo-file-upload-state-icon'
                },
                {
                    cls : 'neo-file-upload-body',
                    cn  : [{
                        cls : 'neo-file-upload-filename'
                    }, {
                        cls : 'neo-file-upload-state'
                    }]
                },
                {
                    cls : 'neo-file-upload-action-button',
                    tag : 'button'
                },
                {
                    cls  : 'neo-file-upload-input',
                    tag  : 'input',
                    type : 'file'
                },
                {
                    cls : 'neo-file-upload-error-message'
                }
            ]
        },

        cls : [],

        /**
         * An Object containing a default set of headers to be passed to the server on every HTTP request.
         * @member {Object} headers
         */
        headers_ : {},

        /**
         * An Object which allows the status text returned from the {@link #property-documentStatusUrl} to be
         * mapped to the corresponding next widget state.
         * @member {Object} documentStatusMap
         */
        documentStatusMap : {
            SCANNING         : 'scanning',

            // The server doing its own secondary upload to the final storage location may return this.
            // We enter the same state as scanning. A spinner shows for the duration of this state
            UPLOADING        : 'scanning',

            MALWARE_DETECTED : 'scan-failed',
            UN_DOWNLOADABLE  : 'not-downloadable',
            DOWNLOADABLE     : 'downloadable',
            DELETED          : 'deleted'
        },

        document_ : null,

        /**
         * If this widget should reference an existing document, configure the widget with a documentId
         * so that it can initialize in the correct "uploaded" state.
         *
         * If this is *not* configured, then this property will be set after a successful upload to
         * the id returned from the {@link #property-uploadUrl}.
         * @member {String|Number} documentId
         */
        documentId : null,

        /**
         * The URL of the file upload service to which the selected file is sent.
         *
         * This service must return a JSON response of the form:
         *
         * ```json
         * {
         *     "success"    : true,
         *     "message"    : "Only needed if the success property is false",
         *     "documentId" : 1
         * }
         * ```
         *
         * The document id is needed so that this widget can follow up and request the results of the
         * scan operation to see if the file was accepted, and whether it is to be subsequently downloadable.
         *
         * The document status request URL must be configured in {@link #member-documentStatusUrl}
         * @member {String} uploadUrl
         */
        uploadUrl : null,

        /**
         * The name of the JSON property in which the document id is returned in the upload response
         * JSON packet and the token string which is substituted for the document id when requesting
         * a malware scan and a document deletion.
         *
         * Defaults fro `documentId`
         *
         * @member {String} downloadUrl
         */
        documentIdParameter : 'documentId',

        /**
         * The URL from which the file may be downloaded after it has finished its scan.
         *
         * This must contain a substitution token named the same as the {@link #property-documentIdParameter}
         * which is used when creating a URL
         * 
         * for example:
         * 
         * ```json
         * {
         *     downloadUrl : '/getDocument/${documentId}'
         * }
         * ```
         *
         * The document id returned from the {@link #member-uploadUrl upload} is passed in the parameter named
         * by the {@link #member-documentIdParameter}. It defaults to `'documentId'`.
         *
         * @member {String} downloadUrl
         */
        downloadUrl_ : null,

        /**
         * The URL of the file status reporting service.
         *
         * This must contain a substitution token named the same as the {@link #property-documentIdParameter}
         * which is used when creating a URL
         * 
         * for example:
         * 
         * ```json
         * {
         *     documentStatusUrl : '/getDocumentStatus/${documentId}'
         * }
         * ```
         *
         * This widget will use this service after a successful upload to determine its next
         * state.
         *
         * This service must return a JSON response of the form:
         *
         * ```json
         * {
         *     "status" : "scanning" or "scan-failed" or "downloadable or "not-downloadable"
         * }
         * ```
         *
         * @member {String} documentStatusUrl
         */
        documentStatusUrl_ : null,

        /**
         * The polling interval *in milliseconds* to wait between asking the server how the document scan
         * is proceeding.
         *
         * Defaults to 2000ms
         *
         * @member {String} documentDeleteUrl
         */
        statusScanInterval : 2000,

        /**
         * The URL of the file deletion service.
         *
         * This must contain a substitution token named the same as the {@link #property-documentIdParameter}
         * which is used when creating a URL
         * 
         * for example:
         * 
         * ```json
         * {
         *     documentDeleteUrl : '/deleteDocument/${documentId}'
         * }
         * ```
         *
         * This widget will use this service after a successful upload to determine its next
         * state.
         *
         * If this service yields an HTTP 200 status, the deletion is taken to have been successful.
         *
         * @member {String} documentDeleteUrl
         */
        documentDeleteUrl_ : null,

        /**
         * The HTTP method to use when requesting a document deletion using the {@link #member-documentDeleteUrl}.
         * 
         * Defaults to `DELETE`.
         * @member {String} documentDeleteMethod
         */
        documentDeleteMethod : 'DELETE',

        /**
         * @member {String} state_=null
         */
        state_: 'ready',

        /**
         * @member {Object} types=null
         */
        types_ : null,

        /**
         * @member {String|Number} maxSize
         */
        maxSize_: null,

        /**
         * The error text to show below the widget
         * @member {String} error
         */
        error_ : null,

        // UI strings which can be overridden for other languages
        documentText         : 'Document',
        pleaseUseTheseTypes  : 'Please use these file types',
        fileSizeMoreThan     : 'File size exceeds',
        documentDeleteError  : 'Document delete service error',
        isNoLongerAvailable  : 'is no longer available',
        documentStatusError  : 'Document status service error',
        uploadFailed         : 'Upload failed',
        scanning             : 'Scanning',
        malwareFoundInFile   : 'Malware found in file',
        pleaseCheck          : 'Please check the file and try again',
        successfullyUploaded : 'Successfully uploaded',
        fileWasDeleted       : 'File was deleted'
    }

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);

        const me = this;

        me.addDomListeners([
            { input : me.onInputValueChange, scope: me},
            { click : me.onActionButtonClick, delegate : '.neo-file-upload-action-button', scope : me}
        ]);
    }

    /**
     * @returns {Object}
     */
    getInputEl() {
        return this.vdom.cn[3];
    }

    async clear() {
        const me = this;

        me.vdom.cn[3] = {
            cls   : 'neo-file-upload-input',
            tag   : 'input',
            type  : 'file',
            value : ''
        };
        me.state = 'ready';
        me.error = '';

        // We have to wait for the DOM to have changed, and the input field to be visible
        await new Promise(resolve => setTimeout(resolve, 100));
        me.focus(me.getInputEl().id);
    }

    /**
     * @param {Object} data
     * @protected
     */
    onInputValueChange({ files }) {
        const
            me        = this,
            { types } = me;

        if (files.length) {
            const
                file     = files.item(0),
                pointPos = file.name.lastIndexOf('.'),
                type     = pointPos > -1 ? file.name.slice(pointPos + 1) : '';

            if (me.types && !types[type]) {
                me.error = `${me.pleaseUseTheseTypes}: .${Object.keys(types).join(' .')}`;
            }
            else if (file.size > me.maxSize) {
                me.error = `${me.fileSizeMoreThan} ${String(me._maxSize).toUpperCase()}`;
            }
            // If it passes the type and maxSize check, upload it
            else {
                me.fileSize = me.formatSize(file.size);
                me.error = '';
                me.upload(file);
            }
        }
        // If cleared, we go back to ready state
        else {
            me.state = 'ready';
        }
    }

    async upload(file) {
        const
            me         = this,
            xhr        = me.xhr = new XMLHttpRequest(),
            { upload } = xhr,
            fileData   = new FormData(),
            headers    = { ...me.headers };

        // Show the action button
        me.state = 'starting';

        // We have to wait for the DOM to have changed, and the action button to be visible
        await new Promise(resolve => setTimeout(resolve, 100));
        me.focus(me.vdom.cn[2].id);

        me.vdom.cn[1].cn[0].innerHTML = file.name;
        me.update();
        me.state = 'uploading';

        fileData.append("file", file);

        // React to upload state changes
        upload.addEventListener('progress', me.onUploadProgress.bind(me));
        upload.addEventListener('error',    me.onUploadError.bind(me));
        upload.addEventListener('abort',    me.onUploadAbort.bind(me));
        xhr.addEventListener('loadend',     me.onUploadDone.bind(me));

        xhr.open("POST", me.uploadUrl, true);

        /**
         * This event fires before every HTTP request is sent to the server via any of the configured URLs.
         * 
         * @event beforeRequest
         * @param {Object} event The event
         * @param {Object} event.headers An object containing the configured {@link #property-headers}
         * for this widget, into which new headers may be injected.
         * @returns {Object}
         */
        me.fire('beforeRequest', {
            headers
        });
        for (const header in headers) {
            xhr.setRequestHeader(header, headers[header]);
        }

        xhr.send(fileData);
    }

    onUploadProgress({ loaded, total }) {
        const
            progress = this.progress = loaded / total,
            { vdom } = this;

        (vdom.style || (vdom.style = {}))['--upload-progress'] = `${progress}turn`;

        vdom.cn[1].cn[1].innerHTML = `Uploading... (${Math.round(progress * 100)}%)`;

        this.uploadSize = loaded;
        this.update();
    }

    onUploadAbort(e) {
        this.xhr = null;
        this.clear();
    }

    onUploadError(e) {
        this.xhr = null;
        this.state = 'upload-failed';
        this.error = e.type;
    }

    onUploadDone({ loaded, target : xhr }) {
        const me = this;

        me.xhr = null;

        if (loaded !== 0) {
            const response = JSON.parse(xhr.response);

            if (response.success) {
                me.documentId = response[me.documentIdParameter];

                // The status check phase is optional.
                // If no URL specified, the file is taken to be downloadable.
                if (me.documentStatusUrl) {
                    me.state = 'processing';

                    // Start polling the server to see when the scan has a result;
                    me.checkDocumentStatus();
                }
                else {
                    me.state = 'downloadable';
                }
            }
            else {
                me.error = response.message;
                me.state = 'upload-failed';
            }
        }
    }

    onActionButtonClick() {
        const
            me        = this,
            { state } = me;

        // When they click the action button, depending on which state we are in, we go to
        // different states.
        switch (state) {
            // During upload, its an abort
            case 'uploading':
                me.abortUpload();
                break;

            // While processing we just have to wait until it's succeeded or failed..
            case 'processing':
                break;

            // If the upload or the scan failed, the document will not have been
            // saved, so we just go back to ready state
            case 'upload-failed':
            case 'scan-failed':
                me.clear();
                me.state = 'ready';
                break;

            // For stored documents, we need to tell the server the document
            // is not required.
            case 'processing':
            case 'downloadable':
            case 'not-downloadable':
                me.deleteDocument();
                break;
            case 'deleted':
                me.clear();
                me.state = 'ready';
                break;
        }
    }

    abortUpload() {
        this.xhr?.abort();
    }

    async deleteDocument() {
        const
            me          = this,
            { headers } = me;

        me.fire('beforeRequest', {
            headers
        });

        // We ask the server to delete using our this.documentId
        const statusResponse = await fetch(me.documentDeleteUrl, {
            method : me.documentDeleteMethod,
            headers
        });

        // Success
        if (String(statusResponse.status).slice(0, 1) === '2') {
            me.clear();
            me.state = 'ready';
        }
        else {
            me.error = `${me.documentDeleteError}: ${statusResponse.statusText}`;
        }
    }

    async checkDocumentStatus() {
        const
            me          = this,
            { headers } = me;

        if (me.state === 'processing') {
            me.fire('beforeRequest', {
                headers
            });

            const statusResponse = await fetch(me.documentStatusUrl, {
                headers
            });

            // Success
            if (String(statusResponse.status).slice(0, 1) === '2') {
                const 
                    serverJson   = await statusResponse.json(),
                    serverStatus = serverJson.status,
                    // Map the server's states codes to our own status codes
                    status       = me.documentStatusMap[serverStatus] || serverStatus;

                switch (status) {
                    case 'scanning':
                        setTimeout(() => me.checkDocumentStatus(), me.statusScanInterval);
                        break;
                    case 'deleted':
                        me.error = `${me.documentText} ${me.documentId} ${isNoLongerAvailable}`;
                        me.state = 'ready';
                        break;
                    default:
                        me.state = status;
                }
            }
            else {
                me.error = `${me.documentStatusError}: ${statusResponse.statusText || `Server error ${statusResponse.status}`}`;
                me.state = 'deleted';
            }
        }
    }

    afterSetDocument(document) {
        if (document) {
            const
                me = this;

            me.preExistingDocument = true;
            me.documentId = document.id;
            me.fileSize = me.formatSize(document.size);
            me.vdom.cn[1].cn[0].innerHTML = document.fileName;
            me.state = me.documentStatusMap[document.status];
        }
    }

    /**
     * Triggered after the state config got changed
     * @param {String} value
     * @param {String} oldValue
     * @protected
     */
    afterSetState(value, oldValue) {
        const
            me      = this,
            {
                vdom
            } = me,
            anchor  = vdom.cn[1].cn[0],
            status  = vdom.cn[1].cn[1];

        delete vdom.inert;

        switch (value) {
            case 'ready':
                anchor.tag = 'div';
                anchor.href = '';
                break;
            case 'upload-failed':
                status.innerHTML = `${me.uploadFailed}... (${Math.round(me.progress * 100)}%)`;
                break;
            case 'processing':
                status.innerHTML = `${me.scanning}... (${me.formatSize(me.uploadSize)})`;
                vdom.inert = true;
                break;
            case 'scan-failed':
                status.innerHTML = `${me.malwareFoundInFile}. \u2022 ${me.fileSize}`;
                me.error = me.pleaseCheck;
                break;
            case 'downloadable':
                anchor.tag = 'a';
                anchor.href = me.createUrl(me.downloadUrl, {
                    [me.documentIdParameter] : me.documentId
                });
                status.innerHTML = me.fileSize;
                break;
            case 'not-downloadable':
                status.innerHTML = me.preExistingDocument ?
                me.fileSize : `${me.successfullyUploaded} \u2022 ${me.fileSize}`;
                break;
            case 'deleted':
                status.innerHTML = me.fileWasDeleted;
        }

        me.validate();
        me.update();

        // Processing above may mutate cls
        const { cls } = me;

        _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].remove(cls, 'neo-file-upload-state-' + oldValue);
        _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].add(cls, 'neo-file-upload-state-' + value);
        me.cls = cls;
    }

    /**
     * Creates a URL substituting the passed parameter names in at the places where the name
     * occurs within `{}` in the pattern.
     * @param {String} urlPattern 
     * @param {Object} params 
     */
    createUrl(urlPattern, params) {
        for (const paramName in params) {
            urlPattern = urlPattern.replace(`{${paramName}}`, params[paramName]);
        }
        return urlPattern;
    }

    beforeGetHeaders(headers) {
        return { ...(headers || {}) }
    }

    beforeGetDocumentStatusUrl(documentStatusUrl) {
        const me = this;

        return typeof documentStatusUrl === 'function'? documentStatusUrl.call(me, me) : me.createUrl(documentStatusUrl, {
            [me.documentIdParameter] : me.documentId
        });
    }

    beforeGetDocumentDeleteUrl(documentDeleteUrl) {
        const me = this;

        return typeof documentDeleteUrl === 'function'? documentDeleteUrl.call(me, me) : me.createUrl(documentDeleteUrl, {
            [me.documentIdParameter] : me.documentId
        });
    }

    beforeGetDownloadUrl(downloadUrl) {
        const me = this;

        return typeof downloadUrl === 'function'? downloadUrl.call(me, me) : me.createUrl(downloadUrl, {
            [me.documentIdParameter] : me.documentId
        });
    }

    beforeGetMaxSize(maxSize) {
        // Not configured means no limit
        if (maxSize == null) {
            return Number.MAX_SAFE_INTEGER;
        }

        // Split eg "100mb" into the numeric and units parts
        const sizeParts = sizeRE.exec(maxSize);

        if (sizeParts) {
            // Convert mb to 1000000 etc
            const multiplier = sizeMultiplier[(sizeParts[2]||'unit').toLowerCase()];

            return parseInt(sizeParts[1]) * multiplier;
        }
    }

    afterSetError(text) {
        if (text) {
            this.vdom.cn[4].cn = [{
                vtype : 'text',
                html  : text
            }];
        }
        else {
            this.vdom.cn[4].cn = [];
        }

        this.validate();
        this.update();
    }

    formatSize(bytes, separator = '', postFix = '') {
        if (bytes) {
            const
                sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'],
                i     = Math.min(parseInt(Math.floor(Math.log(bytes) / Math.log(1024)).toString(), 10), sizes.length - 1);

            return `${(bytes / (1024 ** i)).toFixed(i ? 1 : 0)}${separator}${sizes[i]}${postFix}`;
        }
        return 'n/a';
    }

    /**
     * @returns {Boolean}
     */
    validate() {
        const
            { cls } = this,
            isValid = this.isValid();

        _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].toggle(cls, 'neo-invalid', !isValid);
        this.cls = cls;

        return isValid;
    }

    isValid() {
        const me = this;

        return !me.error &&  !(me.state === 'ready' && me.required) ||
               (    (me.state === 'downloadable') ||
                    (me.state === 'not-downloadable')
               );
    }
}

Neo.applyClassConfig(FileUpload);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (FileUpload);


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmtzL2FwcC92ZW5kb3JzLWV4YW1wbGVzX2Zvcm1fZmllbGRfZmlsZXVwbG9hZF9hcHBfbWpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXVFO0FBQ087QUFDSjtBQUNEOztBQUV6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixrRUFBcUI7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLHVCQUF1QixrRUFBVztBQUNsQztBQUNBLHdCQUF3Qiw0Q0FBNEM7QUFDcEU7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGtCQUFrQjtBQUMxQztBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBLDBCQUEwQixnRUFBSztBQUMvQjtBQUNBO0FBQ0Esb0NBQW9DLHNFQUFlO0FBQ25EO0FBQ0E7QUFDQSxvR0FBb0csV0FBVztBQUMvRyx1RkFBdUYsV0FBVztBQUNsRyxtRkFBbUYsV0FBVztBQUM5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLG9DQUFvQyxTQUFTO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixvQ0FBb0Msc0VBQWU7QUFDbkQ7QUFDQTtBQUNBLHdHQUF3RyxXQUFXO0FBQ25ILHVGQUF1RixXQUFXO0FBQ2xHLG1GQUFtRixXQUFXO0FBQzlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2Isb0NBQW9DLHNFQUFlO0FBQ25EO0FBQ0E7QUFDQSx1RkFBdUYsV0FBVztBQUNsRyx1RkFBdUYsV0FBVztBQUNsRyxtRkFBbUYsV0FBVztBQUM5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLG9DQUFvQyxzRUFBZTtBQUNuRDtBQUNBO0FBQ0EsNEZBQTRGLFdBQVc7QUFDdkcsdUZBQXVGLFdBQVc7QUFDbEcsbUZBQW1GLFdBQVc7QUFDOUY7QUFD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QUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMseUJBQXlCLFNBQVMsWUFBWTtBQUMvRTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsZ0JBQWdCLE1BQU07O0FBRXRCLFFBQVEsdURBQVE7QUFDaEIsUUFBUSx1REFBUTtBQUNoQjtBQUNBOztBQUVBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEIsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsRUFBRSxXQUFXO0FBQzNEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlCQUFpQixpQkFBaUI7QUFDbEM7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxzQkFBc0IseUNBQXlDLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxRQUFRO0FBQ2hHO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxjQUFjLE1BQU07QUFDcEI7O0FBRUEsUUFBUSx1REFBUTtBQUNoQjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLGlFQUFlLFVBQVUsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL25lby5tanMvLi9leGFtcGxlcy9mb3JtL2ZpZWxkL2ZpbGV1cGxvYWQvTWFpbkNvbnRhaW5lci5tanMiLCJ3ZWJwYWNrOi8vbmVvLm1qcy8uL2V4YW1wbGVzL2Zvcm0vZmllbGQvZmlsZXVwbG9hZC9hcHAubWpzIiwid2VicGFjazovL25lby5tanMvLi9zcmMvZm9ybS9maWVsZC9CYXNlLm1qcyIsIndlYnBhY2s6Ly9uZW8ubWpzLy4vc3JjL2Zvcm0vZmllbGQvRmlsZVVwbG9hZC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENvbmZpZ3VyYXRpb25WaWV3cG9ydCBmcm9tICcuLi8uLi8uLi9Db25maWd1cmF0aW9uVmlld3BvcnQubWpzJztcbmltcG9ydCBGaWxlVXBsb2FkRmllbGQgICAgICAgZnJvbSAnLi4vLi4vLi4vLi4vc3JjL2Zvcm0vZmllbGQvRmlsZVVwbG9hZC5tanMnO1xuaW1wb3J0IE51bWJlckZpZWxkICAgICAgICAgICBmcm9tICcuLi8uLi8uLi8uLi9zcmMvZm9ybS9maWVsZC9OdW1iZXIubWpzJztcbmltcG9ydCBQYW5lbCAgICAgICAgICAgICAgICAgIGZyb20gJy4uLy4uLy4uLy4uL3NyYy9jb250YWluZXIvUGFuZWwubWpzJztcblxuLyoqXG4gKiBAY2xhc3MgTmVvLmV4YW1wbGVzLmZvcm0uZmllbGQudGV4dC5NYWluQ29udGFpbmVyXG4gKiBAZXh0ZW5kcyBOZW8uZXhhbXBsZXMuQ29uZmlndXJhdGlvblZpZXdwb3J0XG4gKi9cbmNsYXNzIE1haW5Db250YWluZXIgZXh0ZW5kcyBDb25maWd1cmF0aW9uVmlld3BvcnQge1xuICAgIHN0YXRpYyBjb25maWcgPSB7XG4gICAgICAgIGNsYXNzTmFtZSAgICAgICAgICAgOiAnTmVvLmV4YW1wbGVzLmZvcm0uZmllbGQudGV4dC5NYWluQ29udGFpbmVyJyxcbiAgICAgICAgYXV0b01vdW50ICAgICAgICAgICA6IHRydWUsXG4gICAgICAgIGNvbmZpZ0l0ZW1MYWJlbFdpZHRoOiAxNjAsXG4gICAgICAgIGxheW91dCAgICAgICAgICAgICAgOiB7bnR5cGU6ICdoYm94JywgYWxpZ246ICdzdHJldGNoJ31cbiAgICB9XG5cbiAgICBjcmVhdGVDb25maWd1cmF0aW9uQ29tcG9uZW50cygpIHtcbiAgICAgICAgbGV0IG1lID0gdGhpcztcblxuICAgICAgICByZXR1cm4gW3tcbiAgICAgICAgICAgIG1vZHVsZSAgIDogTnVtYmVyRmllbGQsXG4gICAgICAgICAgICBsYWJlbFRleHQ6ICd3aWR0aCcsXG4gICAgICAgICAgICBsaXN0ZW5lcnM6IHtjaGFuZ2U6IG1lLm9uQ29uZmlnQ2hhbmdlLmJpbmQobWUsICd3aWR0aCcpfSxcbiAgICAgICAgICAgIG1heFZhbHVlIDogMzUwLFxuICAgICAgICAgICAgbWluVmFsdWUgOiAyMDAsXG4gICAgICAgICAgICBzdGVwU2l6ZSA6IDUsXG4gICAgICAgICAgICBzdHlsZSAgICA6IHttYXJnaW5Ub3A6ICcxMHB4J30sXG4gICAgICAgICAgICB2YWx1ZSAgICA6IG1lLmV4YW1wbGVDb21wb25lbnQud2lkdGhcbiAgICAgICAgfV07XG4gICAgfVxuXG4gICAgY3JlYXRlRXhhbXBsZUNvbXBvbmVudCgpIHtcbiAgICAgICAgcmV0dXJuIE5lby5jcmVhdGUoUGFuZWwsIHtcbiAgICAgICAgICAgIHN0eWxlIDogJ3BhZGRpbmc6MWVtJyxcbiAgICAgICAgICAgIGl0ZW1zIDogW3tcbiAgICAgICAgICAgICAgICBtb2R1bGUgICAgICAgICAgICA6IEZpbGVVcGxvYWRGaWVsZCxcbiAgICAgICAgICAgICAgICBpZCAgICAgICAgICAgICAgICA6ICdteS1kb3dubG9hZGFibGUtdGVzdCcsXG4gICAgICAgICAgICAgICAgdXBsb2FkVXJsICAgICAgICAgOiAnaHR0cDovLzEyNy4wLjAuMTozMDAwL2ZpbGUtdXBsb2FkLXRlc3QnLFxuICAgICAgICAgICAgICAgIGRvY3VtZW50U3RhdHVzVXJsIDogJ2h0dHA6Ly8xMjcuMC4wLjE6MzAwMC9kb2N1bWVudC1zdGF0dXMtZG93bmxvYWRhYmxlP2RvY3VtZW50SWQ9e2RvY3VtZW50SWR9JyxcbiAgICAgICAgICAgICAgICBkb2N1bWVudERlbGV0ZVVybCA6ICdodHRwOi8vMTI3LjAuMC4xOjMwMDAvZG9jdW1lbnQtZGVsZXRlP2RvY3VtZW50SWQ9e2RvY3VtZW50SWR9JyxcbiAgICAgICAgICAgICAgICBkb3dubG9hZFVybCAgICAgICA6ICdodHRwOi8vMTI3LjAuMC4xOjMwMDAvZ2V0RG9jdW1lbnQ/ZG9jdW1lbnRJZD17ZG9jdW1lbnRJZH0nLFxuICAgICAgICAgICAgICAgIHdpZHRoICAgICAgICAgICAgIDogMzUwLFxuICAgICAgICAgICAgICAgIG1heFNpemUgICAgICAgICAgIDogJzEwbWInLFxuICAgICAgICAgICAgICAgIHR5cGVzICAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgICAgICBwbmcgOiAxLFxuICAgICAgICAgICAgICAgICAgICBqcGcgOiAxLFxuICAgICAgICAgICAgICAgICAgICB4bHMgOiAxLFxuICAgICAgICAgICAgICAgICAgICBwZGYgOiAxXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnMgOiB7XG4gICAgICAgICAgICAgICAgICAgIGJlZm9yZVJlcXVlc3QoeyBoZWFkZXJzIH0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnNbJ1gtWFNSRi1UT0tFTiddID0gJ215LXhzcmYtdG9rZW4nXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgbW9kdWxlICAgICAgICAgICAgOiBGaWxlVXBsb2FkRmllbGQsXG4gICAgICAgICAgICAgICAgaWQgICAgICAgICAgICAgICAgOiAnbXktbm90LWRvd25sb2FkYWJsZS10ZXN0JyxcbiAgICAgICAgICAgICAgICB1cGxvYWRVcmwgICAgICAgICA6ICdodHRwOi8vMTI3LjAuMC4xOjMwMDAvZmlsZS11cGxvYWQtdGVzdCcsXG4gICAgICAgICAgICAgICAgZG9jdW1lbnRTdGF0dXNVcmwgOiAnaHR0cDovLzEyNy4wLjAuMTozMDAwL2RvY3VtZW50LXN0YXR1cy1ub3QtZG93bmxvYWRhYmxlP2RvY3VtZW50SWQ9e2RvY3VtZW50SWR9JyxcbiAgICAgICAgICAgICAgICBkb2N1bWVudERlbGV0ZVVybCA6ICdodHRwOi8vMTI3LjAuMC4xOjMwMDAvZG9jdW1lbnQtZGVsZXRlP2RvY3VtZW50SWQ9e2RvY3VtZW50SWR9JyxcbiAgICAgICAgICAgICAgICBkb3dubG9hZFVybCAgICAgICA6ICdodHRwOi8vMTI3LjAuMC4xOjMwMDAvZ2V0RG9jdW1lbnQ/ZG9jdW1lbnRJZD17ZG9jdW1lbnRJZH0nLFxuICAgICAgICAgICAgICAgIHdpZHRoICAgICAgICAgICAgIDogMzUwLFxuICAgICAgICAgICAgICAgIG1heFNpemUgICAgICAgICAgIDogJzEwbWInLFxuICAgICAgICAgICAgICAgIHR5cGVzICAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgICAgICBwbmcgOiAxLFxuICAgICAgICAgICAgICAgICAgICBqcGcgOiAxLFxuICAgICAgICAgICAgICAgICAgICB4bHMgOiAxLFxuICAgICAgICAgICAgICAgICAgICBwZGYgOiAxXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIG1vZHVsZSAgICAgICAgICAgIDogRmlsZVVwbG9hZEZpZWxkLFxuICAgICAgICAgICAgICAgIGlkICAgICAgICAgICAgICAgIDogJ215LXVwbG9hZC1mYWlsLXRlc3QnLFxuICAgICAgICAgICAgICAgIHVwbG9hZFVybCAgICAgICAgIDogJ2h0dHA6Ly8xMjcuMC4wLjE6MzAwMC9maWxlLXVwbG9hZC10ZXN0LWZhaWwnLFxuICAgICAgICAgICAgICAgIGRvY3VtZW50U3RhdHVzVXJsIDogJ2h0dHA6Ly8xMjcuMC4wLjE6MzAwMC9kb2N1bWVudC1zdGF0dXM/ZG9jdW1lbnRJZD17ZG9jdW1lbnRJZH0nLFxuICAgICAgICAgICAgICAgIGRvY3VtZW50RGVsZXRlVXJsIDogJ2h0dHA6Ly8xMjcuMC4wLjE6MzAwMC9kb2N1bWVudC1kZWxldGU/ZG9jdW1lbnRJZD17ZG9jdW1lbnRJZH0nLFxuICAgICAgICAgICAgICAgIGRvd25sb2FkVXJsICAgICAgIDogJ2h0dHA6Ly8xMjcuMC4wLjE6MzAwMC9nZXREb2N1bWVudD9kb2N1bWVudElkPXtkb2N1bWVudElkfScsXG4gICAgICAgICAgICAgICAgd2lkdGggICAgICAgICAgICAgOiAzNTAsXG4gICAgICAgICAgICAgICAgbWF4U2l6ZSAgICAgICAgICAgOiAnMTBtYicsXG4gICAgICAgICAgICAgICAgdHlwZXMgICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAgIHBuZyA6IDEsXG4gICAgICAgICAgICAgICAgICAgIGpwZyA6IDEsXG4gICAgICAgICAgICAgICAgICAgIHhscyA6IDEsXG4gICAgICAgICAgICAgICAgICAgIHBkZiA6IDFcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgbW9kdWxlICAgICAgICAgICAgOiBGaWxlVXBsb2FkRmllbGQsXG4gICAgICAgICAgICAgICAgaWQgICAgICAgICAgICAgICAgOiAnbXktc2Nhbi1mYWlsLXRlc3QnLFxuICAgICAgICAgICAgICAgIHVwbG9hZFVybCAgICAgICAgIDogJ2h0dHA6Ly8xMjcuMC4wLjE6MzAwMC9maWxlLXVwbG9hZC10ZXN0JyxcbiAgICAgICAgICAgICAgICBkb2N1bWVudFN0YXR1c1VybCA6ICdodHRwOi8vMTI3LjAuMC4xOjMwMDAvZG9jdW1lbnQtc3RhdHVzLWZhaWw/ZG9jdW1lbnRJZD17ZG9jdW1lbnRJZH0nLFxuICAgICAgICAgICAgICAgIGRvY3VtZW50RGVsZXRlVXJsIDogJ2h0dHA6Ly8xMjcuMC4wLjE6MzAwMC9kb2N1bWVudC1kZWxldGU/ZG9jdW1lbnRJZD17ZG9jdW1lbnRJZH0nLFxuICAgICAgICAgICAgICAgIGRvd25sb2FkVXJsICAgICAgIDogJ2h0dHA6Ly8xMjcuMC4wLjE6MzAwMC9nZXREb2N1bWVudD9kb2N1bWVudElkPXtkb2N1bWVudElkfScsXG4gICAgICAgICAgICAgICAgd2lkdGggICAgICAgICAgICAgOiAzNTAsXG4gICAgICAgICAgICAgICAgbWF4U2l6ZSAgICAgICAgICAgOiAnMTBtYicsXG4gICAgICAgICAgICAgICAgdHlwZXMgICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAgIHBuZyA6IDEsXG4gICAgICAgICAgICAgICAgICAgIGpwZyA6IDEsXG4gICAgICAgICAgICAgICAgICAgIHhscyA6IDEsXG4gICAgICAgICAgICAgICAgICAgIHBkZiA6IDFcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgbW9kdWxlICAgICAgICAgICAgOiBGaWxlVXBsb2FkRmllbGQsXG4gICAgICAgICAgICAgICAgaWQgICAgICAgICAgICAgICAgOiAnbXktZXhpc3RpbmctZG9jdW1lbnQtdGVzdCcsXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAgIGlkICAgICAgIDogMixcbiAgICAgICAgICAgICAgICAgICAgZmlsZU5hbWUgOiAndGVzdC5wZGYnLFxuICAgICAgICAgICAgICAgICAgICBzaXplICAgICA6IDEwNjY0ODg1LFxuICAgICAgICAgICAgICAgICAgICBzdGF0dXMgICA6ICdVTl9ET1dOTE9BREFCTEUnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB1cGxvYWRVcmwgICAgICAgICA6ICdodHRwOi8vMTI3LjAuMC4xOjMwMDAvZmlsZS11cGxvYWQtdGVzdCcsXG4gICAgICAgICAgICAgICAgZG9jdW1lbnRTdGF0dXNVcmwgOiAnaHR0cDovLzEyNy4wLjAuMTozMDAwL2RvY3VtZW50LXN0YXR1cy1ub3QtZG93bmxvYWRhYmxlP2RvY3VtZW50SWQ9e2RvY3VtZW50SWR9JyxcbiAgICAgICAgICAgICAgICBkb2N1bWVudERlbGV0ZVVybCA6ICdodHRwOi8vMTI3LjAuMC4xOjMwMDAvZG9jdW1lbnQtZGVsZXRlP2RvY3VtZW50SWQ9e2RvY3VtZW50SWR9JyxcbiAgICAgICAgICAgICAgICBkb3dubG9hZFVybCAgICAgICA6ICdodHRwOi8vMTI3LjAuMC4xOjMwMDAvZ2V0RG9jdW1lbnQ/ZG9jdW1lbnRJZD17ZG9jdW1lbnRJZH0nLFxuICAgICAgICAgICAgICAgIHdpZHRoICAgICAgICAgICAgIDogMzUwLFxuICAgICAgICAgICAgICAgIG1heFNpemUgICAgICAgICAgIDogJzEwbWInLFxuICAgICAgICAgICAgICAgIHR5cGVzICAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgICAgICBwbmcgOiAxLFxuICAgICAgICAgICAgICAgICAgICBqcGcgOiAxLFxuICAgICAgICAgICAgICAgICAgICB4bHMgOiAxLFxuICAgICAgICAgICAgICAgICAgICBwZGYgOiAxXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIG1vZHVsZSAgICAgICAgICAgIDogRmlsZVVwbG9hZEZpZWxkLFxuICAgICAgICAgICAgICAgIGlkICAgICAgICAgICAgICAgIDogJ215LW5vbi1leGlzdGluZy1kb2N1bWVudC10ZXN0JyxcbiAgICAgICAgICAgICAgICBkb2N1bWVudCAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgICAgICAgaWQgICAgICAgOiAyLFxuICAgICAgICAgICAgICAgICAgICBmaWxlTmFtZSA6ICd0ZXN0LnBkZicsXG4gICAgICAgICAgICAgICAgICAgIHNpemUgICAgIDogMTA2NjQ4ODUsXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cyAgIDogJ0RFTEVURUQnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB1cGxvYWRVcmwgICAgICAgICA6ICdodHRwOi8vMTI3LjAuMC4xOjMwMDAvZmlsZS11cGxvYWQtdGVzdCcsXG4gICAgICAgICAgICAgICAgZG9jdW1lbnRTdGF0dXNVcmwgOiAnaHR0cDovLzEyNy4wLjAuMTozMDAwL2RvY3VtZW50LXN0YXR1cy1ub24tZXhpc3RlbnQ/ZG9jdW1lbnRJZD17ZG9jdW1lbnRJZH0nLFxuICAgICAgICAgICAgICAgIGRvY3VtZW50RGVsZXRlVXJsIDogJ2h0dHA6Ly8xMjcuMC4wLjE6MzAwMC9kb2N1bWVudC1kZWxldGU/ZG9jdW1lbnRJZD17ZG9jdW1lbnRJZH0nLFxuICAgICAgICAgICAgICAgIGRvd25sb2FkVXJsICAgICAgIDogJ2h0dHA6Ly8xMjcuMC4wLjE6MzAwMC9nZXREb2N1bWVudD9kb2N1bWVudElkPXtkb2N1bWVudElkfScsXG4gICAgICAgICAgICAgICAgd2lkdGggICAgICAgICAgICAgOiAzNTAsXG4gICAgICAgICAgICAgICAgbWF4U2l6ZSAgICAgICAgICAgOiAnMTBtYicsXG4gICAgICAgICAgICAgICAgdHlwZXMgICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAgIHBuZyA6IDEsXG4gICAgICAgICAgICAgICAgICAgIGpwZyA6IDEsXG4gICAgICAgICAgICAgICAgICAgIHhscyA6IDEsXG4gICAgICAgICAgICAgICAgICAgIHBkZiA6IDFcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgbW9kdWxlICAgICAgICAgICAgOiBGaWxlVXBsb2FkRmllbGQsXG4gICAgICAgICAgICAgICAgaWQgICAgICAgICAgICAgICAgOiAnbXktZmFpbGluZy1kb2N1bWVudC1zdGF0dXMtdGVzdCcsXG4gICAgICAgICAgICAgICAgdXBsb2FkVXJsICAgICAgICAgOiAnaHR0cDovLzEyNy4wLjAuMTozMDAwL2ZpbGUtdXBsb2FkLXRlc3QnLFxuICAgICAgICAgICAgICAgIGRvY3VtZW50U3RhdHVzVXJsIDogJ2h0dHA6Ly8xMjcuMC4wLjE6MzAwMC9kb2N1bWVudC1zdGF0dXMtZmFpbHM/ZG9jdW1lbnRJZD17ZG9jdW1lbnRJZH0nLFxuICAgICAgICAgICAgICAgIGRvY3VtZW50RGVsZXRlVXJsIDogJ2h0dHA6Ly8xMjcuMC4wLjE6MzAwMC9kb2N1bWVudC1kZWxldGU/ZG9jdW1lbnRJZD17ZG9jdW1lbnRJZH0nLFxuICAgICAgICAgICAgICAgIGRvd25sb2FkVXJsICAgICAgIDogJ2h0dHA6Ly8xMjcuMC4wLjE6MzAwMC9nZXREb2N1bWVudD9kb2N1bWVudElkPXtkb2N1bWVudElkfScsXG4gICAgICAgICAgICAgICAgd2lkdGggICAgICAgICAgICAgOiAzNTAsXG4gICAgICAgICAgICAgICAgbWF4U2l6ZSAgICAgICAgICAgOiAnMTBtYicsXG4gICAgICAgICAgICAgICAgdHlwZXMgICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAgIHBuZyA6IDEsXG4gICAgICAgICAgICAgICAgICAgIGpwZyA6IDEsXG4gICAgICAgICAgICAgICAgICAgIHhscyA6IDEsXG4gICAgICAgICAgICAgICAgICAgIHBkZiA6IDFcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XVxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbk5lby5hcHBseUNsYXNzQ29uZmlnKE1haW5Db250YWluZXIpO1xuXG5leHBvcnQgZGVmYXVsdCBNYWluQ29udGFpbmVyO1xuIiwiaW1wb3J0IE1haW5Db250YWluZXIgZnJvbSAnLi9NYWluQ29udGFpbmVyLm1qcyc7XG5cbmV4cG9ydCBjb25zdCBvblN0YXJ0ID0gKCkgPT4gTmVvLmFwcCh7XG4gICAgbWFpblZpZXc6IE1haW5Db250YWluZXIsXG4gICAgbmFtZSAgICA6ICdOZW8uZXhhbXBsZXMuZm9ybS5maWVsZC5maWxldXBsb2FkJ1xufSk7XG4iLCJpbXBvcnQgQ29tcG9uZW50ICAgICAgICBmcm9tICcuLi8uLi9jb21wb25lbnQvQmFzZS5tanMnO1xuaW1wb3J0IENvbXBvbmVudE1hbmFnZXIgZnJvbSAnLi4vLi4vbWFuYWdlci9Db21wb25lbnQubWpzJztcblxuLyoqXG4gKiBBYnN0cmFjdCBiYXNlIGNsYXNzIGZvciBmb3JtIGZpZWxkc1xuICogQGNsYXNzIE5lby5mb3JtLmZpZWxkLkJhc2VcbiAqIEBleHRlbmRzIE5lby5jb21wb25lbnQuQmFzZVxuICovXG5jbGFzcyBCYXNlIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBzdGF0aWMgY29uZmlnID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBjbGFzc05hbWU9J05lby5mb3JtLmZpZWxkLkJhc2UnXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIGNsYXNzTmFtZTogJ05lby5mb3JtLmZpZWxkLkJhc2UnLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBudHlwZT0nYmFzZWZpZWxkJ1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBudHlwZTogJ2Jhc2VmaWVsZCcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGb3JtIGdyb3VwcyBjYW4gZ2V0IHNldCBvbiBhbnkgcGFyZW50IGNvbXBvbmVudCBsZXZlbC5cbiAgICAgICAgICogQW4gYWx0ZXJuYXRpdmUgd2F5IGZvciB1c2luZyBkb3RzIGluIGZpZWxkIG5hbWVzLlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd8bnVsbH0gZm9ybUdyb3VwXz1udWxsXG4gICAgICAgICAqL1xuICAgICAgICBmb3JtR3JvdXBfOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfG51bGx9IG5hbWVfPW51bGxcbiAgICAgICAgICovXG4gICAgICAgIG5hbWVfOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgICogTmVvIGl0c2VsZiBkb2VzIG5vdCBuZWVkIGZpZWxkIG5hbWVzIHRvIGdldCBtYXBwZWQgdG8gdGhlIERPTSAoaW5wdXQgbm9kZXMpLFxuICAgICAgICAgKiBleGNlcHQgZm9yIENoZWNrQm94ZXMgJiBSYWRpb3MgdG8gd29yay4gSXQgY2FuIGJlIHVzZWZ1bCBmb3IgdGVzdGluZyB0b29sc1xuICAgICAgICAgKiAmIGFjY2Vzc2liaWxpdHkgdGhvdWdoLCBzbyB0aGUgZGVmYXVsdCBnb3Qgc2V0IHRvIHRydWUuXG4gICAgICAgICAqIEZlZWwgZnJlZSB0byBjaGFuZ2UgaXQgdG8gZmFsc2UgdG8ga2VlcCB0aGUgRE9NIG1pbmltYWwuXG4gICAgICAgICAqIEBtZW1iZXIge0Jvb2xlYW59IHJlbmRlck5hbWVfPXRydWVcbiAgICAgICAgICovXG4gICAgICAgIHJlbmRlck5hbWVfOiB0cnVlLFxuICAgICAgICAvKipcbiAgICAgICAgICogSW4gY2FzZSByZW5kZXJOYW1lIGlzIHNldCB0byB0cnVlLCB5b3UgY2FuIG9wdGlvbmFsbHkgcmVuZGVyIHRoZSBjb21iaW5hdGlvblxuICAgICAgICAgKiBvZiBhbGwgZm9ybUdyb3VwKHMpICYgdGhlIGZpZWxkIG5hbWUgaW50byB0aGUgRE9NID0+IGlucHV0IG5vZGVcbiAgICAgICAgICogQG1lbWJlciB7Qm9vbGVhbn0gcmVuZGVyUGF0aD10cnVlXG4gICAgICAgICAqL1xuICAgICAgICByZW5kZXJQYXRoOiB0cnVlLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7Kn0gdmFsdWVfPW51bGxcbiAgICAgICAgICovXG4gICAgICAgIHZhbHVlXzogbnVsbFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFuIGludGVybmFsIGNhY2hlIGZvciBmb3JtR3JvdXBzIG9mIGFsbCBwYXJlbnQgbGV2ZWxzXG4gICAgICogQG1lbWJlciB7U3RyaW5nfG51bGx9IGZvcm1Hcm91cFN0cmluZz1udWxsXG4gICAgICovXG4gICAgZm9ybUdyb3VwU3RyaW5nID0gbnVsbFxuICAgIC8qKlxuICAgICAqIEFuIGludGVybmFsIGNhY2hlIGZvciBmb3JtR3JvdXAocykgYW5kIHRoZSBmaWVsZCBuYW1lXG4gICAgICogQG1lbWJlciB7U3RyaW5nfG51bGx9IHBhdGg9bnVsbFxuICAgICAqL1xuICAgIHBhdGggPSBudWxsXG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYWZ0ZXIgdGhlIG5hbWUgY29uZmlnIGdvdCBjaGFuZ2VkXG4gICAgICogQHBhcmFtIHtTdHJpbmd8bnVsbH0gdmFsdWVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xudWxsfSBvbGRWYWx1ZVxuICAgICAqL1xuICAgIGFmdGVyU2V0TmFtZSh2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgbGV0IG1lID0gdGhpcztcblxuICAgICAgICBtZS5yZW5kZXJOYW1lICYmIG1lLmNoYW5nZUlucHV0RWxLZXkoJ25hbWUnLCBtZS5yZW5kZXJQYXRoID8gbWUuZ2V0UGF0aCgpIDogdmFsdWUpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGFmdGVyIHRoZSB2YWx1ZSBjb25maWcgZ290IGNoYW5nZWRcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAgICogQHBhcmFtIHsqfSBvbGRWYWx1ZVxuICAgICAqL1xuICAgIGFmdGVyU2V0VmFsdWUodmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIGlmIChvbGRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmZpcmVDaGFuZ2VFdmVudCh2YWx1ZSwgb2xkVmFsdWUpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgd2hlbiBhY2Nlc3NpbmcgdGhlIGZvcm1Hcm91cCBjb25maWdcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xudWxsfSB2YWx1ZVxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd8bnVsbH0gcGFyZW50c1xuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBiZWZvcmVHZXRGb3JtR3JvdXAodmFsdWUpIHtcbiAgICAgICAgbGV0IG1lICAgID0gdGhpcyxcbiAgICAgICAgICAgIGdyb3VwID0gW10sXG4gICAgICAgICAgICByZXR1cm5WYWx1ZTtcblxuICAgICAgICBpZiAobWUuZm9ybUdyb3VwU3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gbWUuZm9ybUdyb3VwU3RyaW5nO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFsdWUgJiYgZ3JvdXAucHVzaCh2YWx1ZSk7XG5cbiAgICAgICAgQ29tcG9uZW50TWFuYWdlci5nZXRQYXJlbnRzKG1lKS5mb3JFYWNoKHBhcmVudCA9PiB7XG4gICAgICAgICAgICBwYXJlbnQuZm9ybUdyb3VwICYmIGdyb3VwLnVuc2hpZnQocGFyZW50LmZvcm1Hcm91cClcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuVmFsdWUgPSBncm91cC5qb2luKCcuJyk7XG5cbiAgICAgICAgbWUuZm9ybUdyb3VwU3RyaW5nID0gcmV0dXJuVmFsdWU7XG5cbiAgICAgICAgcmV0dXJuIHJldHVyblZhbHVlXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hhbmdlcyB0aGUgdmFsdWUgb2YgYSBpbnB1dEVsIHZkb20gb2JqZWN0IGF0dHJpYnV0ZSBvciByZW1vdmVzIGl0IGluIGNhc2UgaXQgaGFzIG5vIHZhbHVlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICAgICAqIEBwYXJhbSB7QXJyYXl8TnVtYmVyfE9iamVjdHxTdHJpbmd8bnVsbH0gdmFsdWVcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHNpbGVudD1mYWxzZVxuICAgICAqL1xuICAgIGNoYW5nZUlucHV0RWxLZXkoa2V5LCB2YWx1ZSwgc2lsZW50PWZhbHNlKSB7XG4gICAgICAgIGxldCBtZSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHZhbHVlIHx8IE5lby5pc0Jvb2xlYW4odmFsdWUpIHx8IHZhbHVlID09PSAwKSB7XG4gICAgICAgICAgICBtZS5nZXRJbnB1dEVsKClba2V5XSA9IHZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVsZXRlIG1lLmdldElucHV0RWwoKVtrZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgIXNpbGVudCAmJiBtZS51cGRhdGUoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlIHRoaXMgbWV0aG9kIGFzIG5lZWRlZFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICAgKiBAcGFyYW0geyp9IG9sZFZhbHVlXG4gICAgICovXG4gICAgZmlyZUNoYW5nZUV2ZW50KHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICBsZXQgbWUgICAgICAgICAgICA9IHRoaXMsXG4gICAgICAgICAgICBGb3JtQ29udGFpbmVyID0gTmVvLmZvcm0/LkNvbnRhaW5lcjtcblxuICAgICAgICBtZS5maXJlKCdjaGFuZ2UnLCB7XG4gICAgICAgICAgICBjb21wb25lbnQ6IG1lLFxuICAgICAgICAgICAgb2xkVmFsdWUsXG4gICAgICAgICAgICB2YWx1ZVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIW1lLnN1c3BlbmRFdmVudHMpIHtcbiAgICAgICAgICAgIENvbXBvbmVudE1hbmFnZXIuZ2V0UGFyZW50cyhtZSkuZm9yRWFjaChwYXJlbnQgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChGb3JtQ29udGFpbmVyICYmIHBhcmVudCBpbnN0YW5jZW9mIEZvcm1Db250YWluZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50LmZpcmUoJ2ZpZWxkQ2hhbmdlJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50OiBtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGUgdGhpcyBtZXRob2QgYXMgbmVlZGVkXG4gICAgICogQHJldHVybnMge09iamVjdHxudWxsfVxuICAgICAqL1xuICAgIGdldElucHV0RWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZkb21cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjb21iaW5hdGlvbiBvZiB0aGUgZmllbGQgZm9ybUdyb3VwKHMpICYgbmFtZVxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd8bnVsbH1cbiAgICAgKi9cbiAgICBnZXRQYXRoKCkge1xuICAgICAgICBsZXQgbWUgPSB0aGlzLFxuICAgICAgICAgICAgcGF0aDtcblxuICAgICAgICBpZiAoIW1lLnBhdGgpIHtcbiAgICAgICAgICAgIHBhdGggPSBtZS5mb3JtR3JvdXAgPyBtZS5mb3JtR3JvdXAuc3BsaXQoJy4nKSA6IFtdO1xuXG4gICAgICAgICAgICBtZS5uYW1lICYmIHBhdGgucHVzaChtZS5uYW1lKTtcblxuICAgICAgICAgICAgaWYgKHBhdGgubGVuZ3RoIDwgMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1lLnBhdGggPSBwYXRoLmpvaW4oJy4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghbWUucGF0aCkge1xuICAgICAgICAgICAgbWUucGF0aCA9ICdub25lJ1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1lLnBhdGggPT09ICdub25lJyA/IG51bGw6IG1lLnBhdGhcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKi9cbiAgICBnZXRWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICovXG4gICAgaXNWYWxpZCgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKiBAcGFyYW0ge09iamVjdFtdfSBkYXRhLm9sZFBhdGhcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgb25Gb2N1c0xlYXZlKGRhdGEpIHtcbiAgICAgICAgc3VwZXIub25Gb2N1c0xlYXZlPy4oZGF0YSk7XG5cbiAgICAgICAgbGV0IG1lICAgICAgICAgICAgPSB0aGlzLFxuICAgICAgICAgICAgRm9ybUNvbnRhaW5lciA9IE5lby5mb3JtPy5Db250YWluZXI7XG5cbiAgICAgICAgaWYgKCFtZS5zdXNwZW5kRXZlbnRzKSB7XG4gICAgICAgICAgICBDb21wb25lbnRNYW5hZ2VyLmdldFBhcmVudHMobWUpLmZvckVhY2gocGFyZW50ID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoRm9ybUNvbnRhaW5lciAmJiBwYXJlbnQgaW5zdGFuY2VvZiBGb3JtQ29udGFpbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudC5maXJlKCdmaWVsZEZvY3VzTGVhdmUnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5kYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50OiBtZVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXNldHMgdGhlIGZpZWxkIHRvIGEgbmV3IHZhbHVlIG9yIG51bGxcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlPW51bGxcbiAgICAgKi9cbiAgICByZXNldCh2YWx1ZT1udWxsKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgZm9yIGNsaWVudC1zaWRlIGZpZWxkIGVycm9yc1xuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gc2lsZW50PXRydWVcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gUmV0dXJucyB0cnVlIGluIGNhc2UgdGhlcmUgYXJlIG5vIGNsaWVudC1zaWRlIGVycm9yc1xuICAgICAqL1xuICAgIHZhbGlkYXRlKHNpbGVudD10cnVlKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cblxuLyoqXG4gKiBUaGUgY2hhbmdlIGV2ZW50IGZpcmVzIGFmdGVyIHRoZSB2YWx1ZSBjb25maWcgZ2V0cyBjaGFuZ2VkXG4gKiBAZXZlbnQgY2hhbmdlXG4gKiBAcGFyYW0geyp9IHZhbHVlXG4gKiBAcGFyYW0geyp9IG9sZFZhbHVlXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICovXG5cbk5lby5hcHBseUNsYXNzQ29uZmlnKEJhc2UpO1xuXG5leHBvcnQgZGVmYXVsdCBCYXNlO1xuIiwiaW1wb3J0IEJhc2UgZnJvbSAnLi4vLi4vZm9ybS9maWVsZC9CYXNlLm1qcyc7XG5pbXBvcnQgTmVvQXJyYXkgZnJvbSAnLi4vLi4vdXRpbC9BcnJheS5tanMnO1xuXG5jb25zdFxuICAgIHNpemVSRSAgICAgICAgID0gL14oXFxkKykoa2J8bWJ8Z2IpPyQvaSxcbiAgICBzaXplTXVsdGlwbGllciA9IHtcbiAgICAgICAgdW5pdCA6IDEsXG4gICAgICAgIGtiICAgOiAxMDAwLFxuICAgICAgICBtYiAgIDogMTAwMDAwMCxcbiAgICAgICAgZ2IgICA6IDEwMDAwMDAwMDBcbiAgICB9O1xuXG4vKipcbiAqIEFuIGFjY2Vzc2libGUgZmlsZSB1cGxvYWRpbmcgd2lkZ2V0IHdoaWNoIGF1dG9tYXRpY2FsbHkgY29tbWVuY2VzIGFuIHVwbG9hZCBhcyBzb29uIGFzXG4gKiBhIGZpbGUgaXMgc2VsZWN0ZWQgdXNpbmcgdGhlIFVJLlxuICpcbiAqIFRoZSBVUkwgdG8gd2hpY2ggdGhlIGZpbGUgbXVzdCBiZSB1cGxvYWRlZCBpcyBzcGVjaWZpZWQgaW4gdGhlIHtAbGluayBjb25maWcjdXBsb2FkVXJsfSBwcm9wZXJ0eS5cbiAqIFRoaXMgc2VydmljZSBtdXN0IHJldHVybiBhIEpTT04gc3RhdHVzIHJlc3BvbnNlIGluIHRoZSBmb2xsb3dpbmcgZm9ybSBmb3Igc3VjY2Vzc2Z1bCB1cGxvYWRzOlxuICpcbiAqIGBgYGpzb25cbiAqIHtcbiAqICAgICBcInN1Y2Nlc3NcIiA6IHRydWUsXG4gKiAgICAgXCJkb2N1bWVudElkXCIgOiAxXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBBbmQgdGhlIGZvbGxvd2luZyBmb3JtIGZvciB1bnN1Y2Nlc3NmdWwgdXBsb2FkczpcbiAqXG4gKiBgYGBqc29uXG4gKiB7XG4gKiAgICAgXCJzdWNjZXNzXCIgOiBmYWxzZSxcbiAqICAgICBcIm1lc3NhZ2VcIiA6IFwiV2h5IHRoZSB1cGxvYWQgd2FzIHJlamVjdGVkXCJcbiAqIH1cbiAqIGBgYFxuICpcbiAqIFRoZSBuYW1lIG9mIHRoZSBgZG9jdW1lbnRJZGAgcHJvcGVydHkgaXMgY29uZmlndXJlZCBpbiB7QGxpbmsgI21lbWJlci1kb2N1bWVudElkUGFyYW1ldGVyfS5cbiAqIEl0IGRlZmF1bHRzIHRvIGAnZG9jdW1lbnRJZCdgLlxuICpcbiAqIFRoZSBgZG9jdW1lbnRJZGAgaXMgdXNlZCB3aGVuIHJlcXVlc3RpbmcgdGhlIGRvY3VtZW50IG1hbHdhcmUgc2NhbiBzdGF0dXMsIGFuZCB3aGVuIHJlcXVlc3RpbmdcbiAqIHRoYXQgdGhlIGRvY3VtZW50IGJlIGRlbGV0ZWQsIG9yIGRvd25sb2FkZWQuXG4gKlxuICogSWYgdGhlIHVwbG9hZCBpcyBzdWNjZXNzZnVsLCB0aGVuIHRoZSB7QGxpbmsgI21lbWJlci1kb2N1bWVudFN0YXR1c1VybH0gaXMgcG9sbGVkIHVudGlsIHRoZVxuICogbWFsd2FyZSBzY2FuLiBUaGUgZG9jdW1lbnQgaWQgcmV0dXJuZWQgZnJvbSB0aGUgdXBsb2FkIGlzIHBhc3NlZCBpbiB0aGUgcGFyYW1ldGVyIG5hbWVkXG4gKiBieSB0aGUge0BsaW5rICNtZW1iZXItZG9jdW1lbnRJZFBhcmFtZXRlcn0uIEl0IGRlZmF1bHRzIHRvIGAnZG9jdW1lbnRJZCdgLlxuICpcbiAqIFRoaXMgc2VydmljZSBtdXN0IHJldHVybiBhIEpTT04gc3RhdHVzIHJlc3BvbnNlIGluIHRoZSBmb2xsb3dpbmcgaWYgdGhlIHNjYW4gaXMgc3RpbGwgcHJvZ3Jlc3Npbmc6XG4gKlxuICogYGBganNvblxuICoge1xuICogICAgIFwic3RhdHVzXCIgOiBcInNjYW5uaW5nXCJcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEFuZCB0aGUgZm9sbG93aW5nIGZvcm0gaXMgbWFsd2FyZSB3YXMgZGV0ZWN0ZWQ6XG4gKlxuICogYGBganNvblxuICoge1xuICogICAgIFwic3RhdHVzXCIgOiBcInNjYW4tZmFpbGVkXCJcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEFmdGVyIGEgc3VjY2Vzc2Z1bCBzY2FuLCBhIGRvY3VtZW50IG1heSBvciBtYXkgbm90IGJlIGRvd25sb2FkYWJsZS5cbiAqXG4gKiBGb3IgYSBkb3dubG9hZGFibGUgZG9jdW1lbnQsIHRoZSByZXNwb25zZSBtdXN0IGJlOlxuICpcbiAqIGBgYGpzb25cbiAqIHtcbiAqICAgICBcInN0YXR1c1wiIDogXCJkb3dubG9hZGFibGVcIlxuICogfVxuICogYGBgXG4gKlxuICogRm9yIGEgbm9uLWRvd25sb2FkYWJsZSBkb2N1bWVudCwgdGhlIHJlc3BvbnNlIG11c3QgYmU6XG4gKlxuICogYGBganNvblxuICoge1xuICogICAgIFwic3RhdHVzXCIgOiBcIm5vdC1kb3dubG9hZGFibGVcIlxuICogfVxuICogYGBgXG4gKiBAY2xhc3MgTmVvLmZvcm0uZmllbGQuRmlsZVVwbG9hZFxuICogQGV4dGVuZHMgTmVvLmZvcm0uZmllbGQuQmFzZVxuICovXG5jbGFzcyBGaWxlVXBsb2FkIGV4dGVuZHMgQmFzZSB7XG4gICAgc3RhdGljIGNvbmZpZyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gY2xhc3NOYW1lPSdOZW8uZm9ybS5maWVsZC5GaWxlVXBsb2FkJ1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBjbGFzc05hbWU6ICdOZW8uZm9ybS5maWVsZC5GaWxlVXBsb2FkJyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gbnR5cGU9J2ZpbGUtdXBsb2FkLWZpZWxkJ1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBudHlwZTogJ2ZpbGUtdXBsb2FkLWZpZWxkJyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ1tdfSBiYXNlQ2xzPVsnbmVvLWZpbGUtdXBsb2FkLWZpZWxkJ11cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgYmFzZUNsczogWyduZW8tZmlsZS11cGxvYWQtZmllbGQnXSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge09iamVjdH0gX3Zkb21cbiAgICAgICAgICovXG4gICAgICAgIF92ZG9tOiB7XG4gICAgICAgICAgICBjbiA6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRhZyA6ICdpJyxcbiAgICAgICAgICAgICAgICAgICAgY2xzIDogJ25lby1maWxlLXVwbG9hZC1zdGF0ZS1pY29uJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjbHMgOiAnbmVvLWZpbGUtdXBsb2FkLWJvZHknLFxuICAgICAgICAgICAgICAgICAgICBjbiAgOiBbe1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xzIDogJ25lby1maWxlLXVwbG9hZC1maWxlbmFtZSdcbiAgICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xzIDogJ25lby1maWxlLXVwbG9hZC1zdGF0ZSdcbiAgICAgICAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgY2xzIDogJ25lby1maWxlLXVwbG9hZC1hY3Rpb24tYnV0dG9uJyxcbiAgICAgICAgICAgICAgICAgICAgdGFnIDogJ2J1dHRvbidcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgY2xzICA6ICduZW8tZmlsZS11cGxvYWQtaW5wdXQnLFxuICAgICAgICAgICAgICAgICAgICB0YWcgIDogJ2lucHV0JyxcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA6ICdmaWxlJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjbHMgOiAnbmVvLWZpbGUtdXBsb2FkLWVycm9yLW1lc3NhZ2UnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9LFxuXG4gICAgICAgIGNscyA6IFtdLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbiBPYmplY3QgY29udGFpbmluZyBhIGRlZmF1bHQgc2V0IG9mIGhlYWRlcnMgdG8gYmUgcGFzc2VkIHRvIHRoZSBzZXJ2ZXIgb24gZXZlcnkgSFRUUCByZXF1ZXN0LlxuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3R9IGhlYWRlcnNcbiAgICAgICAgICovXG4gICAgICAgIGhlYWRlcnNfIDoge30sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIE9iamVjdCB3aGljaCBhbGxvd3MgdGhlIHN0YXR1cyB0ZXh0IHJldHVybmVkIGZyb20gdGhlIHtAbGluayAjcHJvcGVydHktZG9jdW1lbnRTdGF0dXNVcmx9IHRvIGJlXG4gICAgICAgICAqIG1hcHBlZCB0byB0aGUgY29ycmVzcG9uZGluZyBuZXh0IHdpZGdldCBzdGF0ZS5cbiAgICAgICAgICogQG1lbWJlciB7T2JqZWN0fSBkb2N1bWVudFN0YXR1c01hcFxuICAgICAgICAgKi9cbiAgICAgICAgZG9jdW1lbnRTdGF0dXNNYXAgOiB7XG4gICAgICAgICAgICBTQ0FOTklORyAgICAgICAgIDogJ3NjYW5uaW5nJyxcblxuICAgICAgICAgICAgLy8gVGhlIHNlcnZlciBkb2luZyBpdHMgb3duIHNlY29uZGFyeSB1cGxvYWQgdG8gdGhlIGZpbmFsIHN0b3JhZ2UgbG9jYXRpb24gbWF5IHJldHVybiB0aGlzLlxuICAgICAgICAgICAgLy8gV2UgZW50ZXIgdGhlIHNhbWUgc3RhdGUgYXMgc2Nhbm5pbmcuIEEgc3Bpbm5lciBzaG93cyBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoaXMgc3RhdGVcbiAgICAgICAgICAgIFVQTE9BRElORyAgICAgICAgOiAnc2Nhbm5pbmcnLFxuXG4gICAgICAgICAgICBNQUxXQVJFX0RFVEVDVEVEIDogJ3NjYW4tZmFpbGVkJyxcbiAgICAgICAgICAgIFVOX0RPV05MT0FEQUJMRSAgOiAnbm90LWRvd25sb2FkYWJsZScsXG4gICAgICAgICAgICBET1dOTE9BREFCTEUgICAgIDogJ2Rvd25sb2FkYWJsZScsXG4gICAgICAgICAgICBERUxFVEVEICAgICAgICAgIDogJ2RlbGV0ZWQnXG4gICAgICAgIH0sXG5cbiAgICAgICAgZG9jdW1lbnRfIDogbnVsbCxcblxuICAgICAgICAvKipcbiAgICAgICAgICogSWYgdGhpcyB3aWRnZXQgc2hvdWxkIHJlZmVyZW5jZSBhbiBleGlzdGluZyBkb2N1bWVudCwgY29uZmlndXJlIHRoZSB3aWRnZXQgd2l0aCBhIGRvY3VtZW50SWRcbiAgICAgICAgICogc28gdGhhdCBpdCBjYW4gaW5pdGlhbGl6ZSBpbiB0aGUgY29ycmVjdCBcInVwbG9hZGVkXCIgc3RhdGUuXG4gICAgICAgICAqXG4gICAgICAgICAqIElmIHRoaXMgaXMgKm5vdCogY29uZmlndXJlZCwgdGhlbiB0aGlzIHByb3BlcnR5IHdpbGwgYmUgc2V0IGFmdGVyIGEgc3VjY2Vzc2Z1bCB1cGxvYWQgdG9cbiAgICAgICAgICogdGhlIGlkIHJldHVybmVkIGZyb20gdGhlIHtAbGluayAjcHJvcGVydHktdXBsb2FkVXJsfS5cbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfE51bWJlcn0gZG9jdW1lbnRJZFxuICAgICAgICAgKi9cbiAgICAgICAgZG9jdW1lbnRJZCA6IG51bGwsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBVUkwgb2YgdGhlIGZpbGUgdXBsb2FkIHNlcnZpY2UgdG8gd2hpY2ggdGhlIHNlbGVjdGVkIGZpbGUgaXMgc2VudC5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhpcyBzZXJ2aWNlIG11c3QgcmV0dXJuIGEgSlNPTiByZXNwb25zZSBvZiB0aGUgZm9ybTpcbiAgICAgICAgICpcbiAgICAgICAgICogYGBganNvblxuICAgICAgICAgKiB7XG4gICAgICAgICAqICAgICBcInN1Y2Nlc3NcIiAgICA6IHRydWUsXG4gICAgICAgICAqICAgICBcIm1lc3NhZ2VcIiAgICA6IFwiT25seSBuZWVkZWQgaWYgdGhlIHN1Y2Nlc3MgcHJvcGVydHkgaXMgZmFsc2VcIixcbiAgICAgICAgICogICAgIFwiZG9jdW1lbnRJZFwiIDogMVxuICAgICAgICAgKiB9XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGUgZG9jdW1lbnQgaWQgaXMgbmVlZGVkIHNvIHRoYXQgdGhpcyB3aWRnZXQgY2FuIGZvbGxvdyB1cCBhbmQgcmVxdWVzdCB0aGUgcmVzdWx0cyBvZiB0aGVcbiAgICAgICAgICogc2NhbiBvcGVyYXRpb24gdG8gc2VlIGlmIHRoZSBmaWxlIHdhcyBhY2NlcHRlZCwgYW5kIHdoZXRoZXIgaXQgaXMgdG8gYmUgc3Vic2VxdWVudGx5IGRvd25sb2FkYWJsZS5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhlIGRvY3VtZW50IHN0YXR1cyByZXF1ZXN0IFVSTCBtdXN0IGJlIGNvbmZpZ3VyZWQgaW4ge0BsaW5rICNtZW1iZXItZG9jdW1lbnRTdGF0dXNVcmx9XG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gdXBsb2FkVXJsXG4gICAgICAgICAqL1xuICAgICAgICB1cGxvYWRVcmwgOiBudWxsLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbmFtZSBvZiB0aGUgSlNPTiBwcm9wZXJ0eSBpbiB3aGljaCB0aGUgZG9jdW1lbnQgaWQgaXMgcmV0dXJuZWQgaW4gdGhlIHVwbG9hZCByZXNwb25zZVxuICAgICAgICAgKiBKU09OIHBhY2tldCBhbmQgdGhlIHRva2VuIHN0cmluZyB3aGljaCBpcyBzdWJzdGl0dXRlZCBmb3IgdGhlIGRvY3VtZW50IGlkIHdoZW4gcmVxdWVzdGluZ1xuICAgICAgICAgKiBhIG1hbHdhcmUgc2NhbiBhbmQgYSBkb2N1bWVudCBkZWxldGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogRGVmYXVsdHMgZnJvIGBkb2N1bWVudElkYFxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IGRvd25sb2FkVXJsXG4gICAgICAgICAqL1xuICAgICAgICBkb2N1bWVudElkUGFyYW1ldGVyIDogJ2RvY3VtZW50SWQnLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgVVJMIGZyb20gd2hpY2ggdGhlIGZpbGUgbWF5IGJlIGRvd25sb2FkZWQgYWZ0ZXIgaXQgaGFzIGZpbmlzaGVkIGl0cyBzY2FuLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGlzIG11c3QgY29udGFpbiBhIHN1YnN0aXR1dGlvbiB0b2tlbiBuYW1lZCB0aGUgc2FtZSBhcyB0aGUge0BsaW5rICNwcm9wZXJ0eS1kb2N1bWVudElkUGFyYW1ldGVyfVxuICAgICAgICAgKiB3aGljaCBpcyB1c2VkIHdoZW4gY3JlYXRpbmcgYSBVUkxcbiAgICAgICAgICogXG4gICAgICAgICAqIGZvciBleGFtcGxlOlxuICAgICAgICAgKiBcbiAgICAgICAgICogYGBganNvblxuICAgICAgICAgKiB7XG4gICAgICAgICAqICAgICBkb3dubG9hZFVybCA6ICcvZ2V0RG9jdW1lbnQvJHtkb2N1bWVudElkfSdcbiAgICAgICAgICogfVxuICAgICAgICAgKiBgYGBcbiAgICAgICAgICpcbiAgICAgICAgICogVGhlIGRvY3VtZW50IGlkIHJldHVybmVkIGZyb20gdGhlIHtAbGluayAjbWVtYmVyLXVwbG9hZFVybCB1cGxvYWR9IGlzIHBhc3NlZCBpbiB0aGUgcGFyYW1ldGVyIG5hbWVkXG4gICAgICAgICAqIGJ5IHRoZSB7QGxpbmsgI21lbWJlci1kb2N1bWVudElkUGFyYW1ldGVyfS4gSXQgZGVmYXVsdHMgdG8gYCdkb2N1bWVudElkJ2AuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gZG93bmxvYWRVcmxcbiAgICAgICAgICovXG4gICAgICAgIGRvd25sb2FkVXJsXyA6IG51bGwsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBVUkwgb2YgdGhlIGZpbGUgc3RhdHVzIHJlcG9ydGluZyBzZXJ2aWNlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGlzIG11c3QgY29udGFpbiBhIHN1YnN0aXR1dGlvbiB0b2tlbiBuYW1lZCB0aGUgc2FtZSBhcyB0aGUge0BsaW5rICNwcm9wZXJ0eS1kb2N1bWVudElkUGFyYW1ldGVyfVxuICAgICAgICAgKiB3aGljaCBpcyB1c2VkIHdoZW4gY3JlYXRpbmcgYSBVUkxcbiAgICAgICAgICogXG4gICAgICAgICAqIGZvciBleGFtcGxlOlxuICAgICAgICAgKiBcbiAgICAgICAgICogYGBganNvblxuICAgICAgICAgKiB7XG4gICAgICAgICAqICAgICBkb2N1bWVudFN0YXR1c1VybCA6ICcvZ2V0RG9jdW1lbnRTdGF0dXMvJHtkb2N1bWVudElkfSdcbiAgICAgICAgICogfVxuICAgICAgICAgKiBgYGBcbiAgICAgICAgICpcbiAgICAgICAgICogVGhpcyB3aWRnZXQgd2lsbCB1c2UgdGhpcyBzZXJ2aWNlIGFmdGVyIGEgc3VjY2Vzc2Z1bCB1cGxvYWQgdG8gZGV0ZXJtaW5lIGl0cyBuZXh0XG4gICAgICAgICAqIHN0YXRlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGlzIHNlcnZpY2UgbXVzdCByZXR1cm4gYSBKU09OIHJlc3BvbnNlIG9mIHRoZSBmb3JtOlxuICAgICAgICAgKlxuICAgICAgICAgKiBgYGBqc29uXG4gICAgICAgICAqIHtcbiAgICAgICAgICogICAgIFwic3RhdHVzXCIgOiBcInNjYW5uaW5nXCIgb3IgXCJzY2FuLWZhaWxlZFwiIG9yIFwiZG93bmxvYWRhYmxlIG9yIFwibm90LWRvd25sb2FkYWJsZVwiXG4gICAgICAgICAqIH1cbiAgICAgICAgICogYGBgXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gZG9jdW1lbnRTdGF0dXNVcmxcbiAgICAgICAgICovXG4gICAgICAgIGRvY3VtZW50U3RhdHVzVXJsXyA6IG51bGwsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBwb2xsaW5nIGludGVydmFsICppbiBtaWxsaXNlY29uZHMqIHRvIHdhaXQgYmV0d2VlbiBhc2tpbmcgdGhlIHNlcnZlciBob3cgdGhlIGRvY3VtZW50IHNjYW5cbiAgICAgICAgICogaXMgcHJvY2VlZGluZy5cbiAgICAgICAgICpcbiAgICAgICAgICogRGVmYXVsdHMgdG8gMjAwMG1zXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gZG9jdW1lbnREZWxldGVVcmxcbiAgICAgICAgICovXG4gICAgICAgIHN0YXR1c1NjYW5JbnRlcnZhbCA6IDIwMDAsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBVUkwgb2YgdGhlIGZpbGUgZGVsZXRpb24gc2VydmljZS5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhpcyBtdXN0IGNvbnRhaW4gYSBzdWJzdGl0dXRpb24gdG9rZW4gbmFtZWQgdGhlIHNhbWUgYXMgdGhlIHtAbGluayAjcHJvcGVydHktZG9jdW1lbnRJZFBhcmFtZXRlcn1cbiAgICAgICAgICogd2hpY2ggaXMgdXNlZCB3aGVuIGNyZWF0aW5nIGEgVVJMXG4gICAgICAgICAqIFxuICAgICAgICAgKiBmb3IgZXhhbXBsZTpcbiAgICAgICAgICogXG4gICAgICAgICAqIGBgYGpzb25cbiAgICAgICAgICoge1xuICAgICAgICAgKiAgICAgZG9jdW1lbnREZWxldGVVcmwgOiAnL2RlbGV0ZURvY3VtZW50LyR7ZG9jdW1lbnRJZH0nXG4gICAgICAgICAqIH1cbiAgICAgICAgICogYGBgXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoaXMgd2lkZ2V0IHdpbGwgdXNlIHRoaXMgc2VydmljZSBhZnRlciBhIHN1Y2Nlc3NmdWwgdXBsb2FkIHRvIGRldGVybWluZSBpdHMgbmV4dFxuICAgICAgICAgKiBzdGF0ZS5cbiAgICAgICAgICpcbiAgICAgICAgICogSWYgdGhpcyBzZXJ2aWNlIHlpZWxkcyBhbiBIVFRQIDIwMCBzdGF0dXMsIHRoZSBkZWxldGlvbiBpcyB0YWtlbiB0byBoYXZlIGJlZW4gc3VjY2Vzc2Z1bC5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBkb2N1bWVudERlbGV0ZVVybFxuICAgICAgICAgKi9cbiAgICAgICAgZG9jdW1lbnREZWxldGVVcmxfIDogbnVsbCxcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIEhUVFAgbWV0aG9kIHRvIHVzZSB3aGVuIHJlcXVlc3RpbmcgYSBkb2N1bWVudCBkZWxldGlvbiB1c2luZyB0aGUge0BsaW5rICNtZW1iZXItZG9jdW1lbnREZWxldGVVcmx9LlxuICAgICAgICAgKiBcbiAgICAgICAgICogRGVmYXVsdHMgdG8gYERFTEVURWAuXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gZG9jdW1lbnREZWxldGVNZXRob2RcbiAgICAgICAgICovXG4gICAgICAgIGRvY3VtZW50RGVsZXRlTWV0aG9kIDogJ0RFTEVURScsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gc3RhdGVfPW51bGxcbiAgICAgICAgICovXG4gICAgICAgIHN0YXRlXzogJ3JlYWR5JyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7T2JqZWN0fSB0eXBlcz1udWxsXG4gICAgICAgICAqL1xuICAgICAgICB0eXBlc18gOiBudWxsLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd8TnVtYmVyfSBtYXhTaXplXG4gICAgICAgICAqL1xuICAgICAgICBtYXhTaXplXzogbnVsbCxcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGVycm9yIHRleHQgdG8gc2hvdyBiZWxvdyB0aGUgd2lkZ2V0XG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gZXJyb3JcbiAgICAgICAgICovXG4gICAgICAgIGVycm9yXyA6IG51bGwsXG5cbiAgICAgICAgLy8gVUkgc3RyaW5ncyB3aGljaCBjYW4gYmUgb3ZlcnJpZGRlbiBmb3Igb3RoZXIgbGFuZ3VhZ2VzXG4gICAgICAgIGRvY3VtZW50VGV4dCAgICAgICAgIDogJ0RvY3VtZW50JyxcbiAgICAgICAgcGxlYXNlVXNlVGhlc2VUeXBlcyAgOiAnUGxlYXNlIHVzZSB0aGVzZSBmaWxlIHR5cGVzJyxcbiAgICAgICAgZmlsZVNpemVNb3JlVGhhbiAgICAgOiAnRmlsZSBzaXplIGV4Y2VlZHMnLFxuICAgICAgICBkb2N1bWVudERlbGV0ZUVycm9yICA6ICdEb2N1bWVudCBkZWxldGUgc2VydmljZSBlcnJvcicsXG4gICAgICAgIGlzTm9Mb25nZXJBdmFpbGFibGUgIDogJ2lzIG5vIGxvbmdlciBhdmFpbGFibGUnLFxuICAgICAgICBkb2N1bWVudFN0YXR1c0Vycm9yICA6ICdEb2N1bWVudCBzdGF0dXMgc2VydmljZSBlcnJvcicsXG4gICAgICAgIHVwbG9hZEZhaWxlZCAgICAgICAgIDogJ1VwbG9hZCBmYWlsZWQnLFxuICAgICAgICBzY2FubmluZyAgICAgICAgICAgICA6ICdTY2FubmluZycsXG4gICAgICAgIG1hbHdhcmVGb3VuZEluRmlsZSAgIDogJ01hbHdhcmUgZm91bmQgaW4gZmlsZScsXG4gICAgICAgIHBsZWFzZUNoZWNrICAgICAgICAgIDogJ1BsZWFzZSBjaGVjayB0aGUgZmlsZSBhbmQgdHJ5IGFnYWluJyxcbiAgICAgICAgc3VjY2Vzc2Z1bGx5VXBsb2FkZWQgOiAnU3VjY2Vzc2Z1bGx5IHVwbG9hZGVkJyxcbiAgICAgICAgZmlsZVdhc0RlbGV0ZWQgICAgICAgOiAnRmlsZSB3YXMgZGVsZXRlZCdcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXG4gICAgICovXG4gICAgY29uc3RydWN0KGNvbmZpZykge1xuICAgICAgICBzdXBlci5jb25zdHJ1Y3QoY29uZmlnKTtcblxuICAgICAgICBjb25zdCBtZSA9IHRoaXM7XG5cbiAgICAgICAgbWUuYWRkRG9tTGlzdGVuZXJzKFtcbiAgICAgICAgICAgIHsgaW5wdXQgOiBtZS5vbklucHV0VmFsdWVDaGFuZ2UsIHNjb3BlOiBtZX0sXG4gICAgICAgICAgICB7IGNsaWNrIDogbWUub25BY3Rpb25CdXR0b25DbGljaywgZGVsZWdhdGUgOiAnLm5lby1maWxlLXVwbG9hZC1hY3Rpb24tYnV0dG9uJywgc2NvcGUgOiBtZX1cbiAgICAgICAgXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAgKi9cbiAgICBnZXRJbnB1dEVsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52ZG9tLmNuWzNdO1xuICAgIH1cblxuICAgIGFzeW5jIGNsZWFyKCkge1xuICAgICAgICBjb25zdCBtZSA9IHRoaXM7XG5cbiAgICAgICAgbWUudmRvbS5jblszXSA9IHtcbiAgICAgICAgICAgIGNscyAgIDogJ25lby1maWxlLXVwbG9hZC1pbnB1dCcsXG4gICAgICAgICAgICB0YWcgICA6ICdpbnB1dCcsXG4gICAgICAgICAgICB0eXBlICA6ICdmaWxlJyxcbiAgICAgICAgICAgIHZhbHVlIDogJydcbiAgICAgICAgfTtcbiAgICAgICAgbWUuc3RhdGUgPSAncmVhZHknO1xuICAgICAgICBtZS5lcnJvciA9ICcnO1xuXG4gICAgICAgIC8vIFdlIGhhdmUgdG8gd2FpdCBmb3IgdGhlIERPTSB0byBoYXZlIGNoYW5nZWQsIGFuZCB0aGUgaW5wdXQgZmllbGQgdG8gYmUgdmlzaWJsZVxuICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTAwKSk7XG4gICAgICAgIG1lLmZvY3VzKG1lLmdldElucHV0RWwoKS5pZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgb25JbnB1dFZhbHVlQ2hhbmdlKHsgZmlsZXMgfSkge1xuICAgICAgICBjb25zdFxuICAgICAgICAgICAgbWUgICAgICAgID0gdGhpcyxcbiAgICAgICAgICAgIHsgdHlwZXMgfSA9IG1lO1xuXG4gICAgICAgIGlmIChmaWxlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0XG4gICAgICAgICAgICAgICAgZmlsZSAgICAgPSBmaWxlcy5pdGVtKDApLFxuICAgICAgICAgICAgICAgIHBvaW50UG9zID0gZmlsZS5uYW1lLmxhc3RJbmRleE9mKCcuJyksXG4gICAgICAgICAgICAgICAgdHlwZSAgICAgPSBwb2ludFBvcyA+IC0xID8gZmlsZS5uYW1lLnNsaWNlKHBvaW50UG9zICsgMSkgOiAnJztcblxuICAgICAgICAgICAgaWYgKG1lLnR5cGVzICYmICF0eXBlc1t0eXBlXSkge1xuICAgICAgICAgICAgICAgIG1lLmVycm9yID0gYCR7bWUucGxlYXNlVXNlVGhlc2VUeXBlc306IC4ke09iamVjdC5rZXlzKHR5cGVzKS5qb2luKCcgLicpfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChmaWxlLnNpemUgPiBtZS5tYXhTaXplKSB7XG4gICAgICAgICAgICAgICAgbWUuZXJyb3IgPSBgJHttZS5maWxlU2l6ZU1vcmVUaGFufSAke1N0cmluZyhtZS5fbWF4U2l6ZSkudG9VcHBlckNhc2UoKX1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWYgaXQgcGFzc2VzIHRoZSB0eXBlIGFuZCBtYXhTaXplIGNoZWNrLCB1cGxvYWQgaXRcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG1lLmZpbGVTaXplID0gbWUuZm9ybWF0U2l6ZShmaWxlLnNpemUpO1xuICAgICAgICAgICAgICAgIG1lLmVycm9yID0gJyc7XG4gICAgICAgICAgICAgICAgbWUudXBsb2FkKGZpbGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIElmIGNsZWFyZWQsIHdlIGdvIGJhY2sgdG8gcmVhZHkgc3RhdGVcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBtZS5zdGF0ZSA9ICdyZWFkeSc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyB1cGxvYWQoZmlsZSkge1xuICAgICAgICBjb25zdFxuICAgICAgICAgICAgbWUgICAgICAgICA9IHRoaXMsXG4gICAgICAgICAgICB4aHIgICAgICAgID0gbWUueGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCksXG4gICAgICAgICAgICB7IHVwbG9hZCB9ID0geGhyLFxuICAgICAgICAgICAgZmlsZURhdGEgICA9IG5ldyBGb3JtRGF0YSgpLFxuICAgICAgICAgICAgaGVhZGVycyAgICA9IHsgLi4ubWUuaGVhZGVycyB9O1xuXG4gICAgICAgIC8vIFNob3cgdGhlIGFjdGlvbiBidXR0b25cbiAgICAgICAgbWUuc3RhdGUgPSAnc3RhcnRpbmcnO1xuXG4gICAgICAgIC8vIFdlIGhhdmUgdG8gd2FpdCBmb3IgdGhlIERPTSB0byBoYXZlIGNoYW5nZWQsIGFuZCB0aGUgYWN0aW9uIGJ1dHRvbiB0byBiZSB2aXNpYmxlXG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMDApKTtcbiAgICAgICAgbWUuZm9jdXMobWUudmRvbS5jblsyXS5pZCk7XG5cbiAgICAgICAgbWUudmRvbS5jblsxXS5jblswXS5pbm5lckhUTUwgPSBmaWxlLm5hbWU7XG4gICAgICAgIG1lLnVwZGF0ZSgpO1xuICAgICAgICBtZS5zdGF0ZSA9ICd1cGxvYWRpbmcnO1xuXG4gICAgICAgIGZpbGVEYXRhLmFwcGVuZChcImZpbGVcIiwgZmlsZSk7XG5cbiAgICAgICAgLy8gUmVhY3QgdG8gdXBsb2FkIHN0YXRlIGNoYW5nZXNcbiAgICAgICAgdXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgbWUub25VcGxvYWRQcm9ncmVzcy5iaW5kKG1lKSk7XG4gICAgICAgIHVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsICAgIG1lLm9uVXBsb2FkRXJyb3IuYmluZChtZSkpO1xuICAgICAgICB1cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCAgICBtZS5vblVwbG9hZEFib3J0LmJpbmQobWUpKTtcbiAgICAgICAgeGhyLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWRlbmQnLCAgICAgbWUub25VcGxvYWREb25lLmJpbmQobWUpKTtcblxuICAgICAgICB4aHIub3BlbihcIlBPU1RcIiwgbWUudXBsb2FkVXJsLCB0cnVlKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhpcyBldmVudCBmaXJlcyBiZWZvcmUgZXZlcnkgSFRUUCByZXF1ZXN0IGlzIHNlbnQgdG8gdGhlIHNlcnZlciB2aWEgYW55IG9mIHRoZSBjb25maWd1cmVkIFVSTHMuXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAZXZlbnQgYmVmb3JlUmVxdWVzdFxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQgVGhlIGV2ZW50XG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudC5oZWFkZXJzIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBjb25maWd1cmVkIHtAbGluayAjcHJvcGVydHktaGVhZGVyc31cbiAgICAgICAgICogZm9yIHRoaXMgd2lkZ2V0LCBpbnRvIHdoaWNoIG5ldyBoZWFkZXJzIG1heSBiZSBpbmplY3RlZC5cbiAgICAgICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAgICAgICovXG4gICAgICAgIG1lLmZpcmUoJ2JlZm9yZVJlcXVlc3QnLCB7XG4gICAgICAgICAgICBoZWFkZXJzXG4gICAgICAgIH0pO1xuICAgICAgICBmb3IgKGNvbnN0IGhlYWRlciBpbiBoZWFkZXJzKSB7XG4gICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihoZWFkZXIsIGhlYWRlcnNbaGVhZGVyXSk7XG4gICAgICAgIH1cblxuICAgICAgICB4aHIuc2VuZChmaWxlRGF0YSk7XG4gICAgfVxuXG4gICAgb25VcGxvYWRQcm9ncmVzcyh7IGxvYWRlZCwgdG90YWwgfSkge1xuICAgICAgICBjb25zdFxuICAgICAgICAgICAgcHJvZ3Jlc3MgPSB0aGlzLnByb2dyZXNzID0gbG9hZGVkIC8gdG90YWwsXG4gICAgICAgICAgICB7IHZkb20gfSA9IHRoaXM7XG5cbiAgICAgICAgKHZkb20uc3R5bGUgfHwgKHZkb20uc3R5bGUgPSB7fSkpWyctLXVwbG9hZC1wcm9ncmVzcyddID0gYCR7cHJvZ3Jlc3N9dHVybmA7XG5cbiAgICAgICAgdmRvbS5jblsxXS5jblsxXS5pbm5lckhUTUwgPSBgVXBsb2FkaW5nLi4uICgke01hdGgucm91bmQocHJvZ3Jlc3MgKiAxMDApfSUpYDtcblxuICAgICAgICB0aGlzLnVwbG9hZFNpemUgPSBsb2FkZWQ7XG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfVxuXG4gICAgb25VcGxvYWRBYm9ydChlKSB7XG4gICAgICAgIHRoaXMueGhyID0gbnVsbDtcbiAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgIH1cblxuICAgIG9uVXBsb2FkRXJyb3IoZSkge1xuICAgICAgICB0aGlzLnhociA9IG51bGw7XG4gICAgICAgIHRoaXMuc3RhdGUgPSAndXBsb2FkLWZhaWxlZCc7XG4gICAgICAgIHRoaXMuZXJyb3IgPSBlLnR5cGU7XG4gICAgfVxuXG4gICAgb25VcGxvYWREb25lKHsgbG9hZGVkLCB0YXJnZXQgOiB4aHIgfSkge1xuICAgICAgICBjb25zdCBtZSA9IHRoaXM7XG5cbiAgICAgICAgbWUueGhyID0gbnVsbDtcblxuICAgICAgICBpZiAobG9hZGVkICE9PSAwKSB7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlKTtcblxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICBtZS5kb2N1bWVudElkID0gcmVzcG9uc2VbbWUuZG9jdW1lbnRJZFBhcmFtZXRlcl07XG5cbiAgICAgICAgICAgICAgICAvLyBUaGUgc3RhdHVzIGNoZWNrIHBoYXNlIGlzIG9wdGlvbmFsLlxuICAgICAgICAgICAgICAgIC8vIElmIG5vIFVSTCBzcGVjaWZpZWQsIHRoZSBmaWxlIGlzIHRha2VuIHRvIGJlIGRvd25sb2FkYWJsZS5cbiAgICAgICAgICAgICAgICBpZiAobWUuZG9jdW1lbnRTdGF0dXNVcmwpIHtcbiAgICAgICAgICAgICAgICAgICAgbWUuc3RhdGUgPSAncHJvY2Vzc2luZyc7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gU3RhcnQgcG9sbGluZyB0aGUgc2VydmVyIHRvIHNlZSB3aGVuIHRoZSBzY2FuIGhhcyBhIHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgbWUuY2hlY2tEb2N1bWVudFN0YXR1cygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbWUuc3RhdGUgPSAnZG93bmxvYWRhYmxlJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBtZS5lcnJvciA9IHJlc3BvbnNlLm1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgbWUuc3RhdGUgPSAndXBsb2FkLWZhaWxlZCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkFjdGlvbkJ1dHRvbkNsaWNrKCkge1xuICAgICAgICBjb25zdFxuICAgICAgICAgICAgbWUgICAgICAgID0gdGhpcyxcbiAgICAgICAgICAgIHsgc3RhdGUgfSA9IG1lO1xuXG4gICAgICAgIC8vIFdoZW4gdGhleSBjbGljayB0aGUgYWN0aW9uIGJ1dHRvbiwgZGVwZW5kaW5nIG9uIHdoaWNoIHN0YXRlIHdlIGFyZSBpbiwgd2UgZ28gdG9cbiAgICAgICAgLy8gZGlmZmVyZW50IHN0YXRlcy5cbiAgICAgICAgc3dpdGNoIChzdGF0ZSkge1xuICAgICAgICAgICAgLy8gRHVyaW5nIHVwbG9hZCwgaXRzIGFuIGFib3J0XG4gICAgICAgICAgICBjYXNlICd1cGxvYWRpbmcnOlxuICAgICAgICAgICAgICAgIG1lLmFib3J0VXBsb2FkKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIC8vIFdoaWxlIHByb2Nlc3Npbmcgd2UganVzdCBoYXZlIHRvIHdhaXQgdW50aWwgaXQncyBzdWNjZWVkZWQgb3IgZmFpbGVkLi5cbiAgICAgICAgICAgIGNhc2UgJ3Byb2Nlc3NpbmcnOlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAvLyBJZiB0aGUgdXBsb2FkIG9yIHRoZSBzY2FuIGZhaWxlZCwgdGhlIGRvY3VtZW50IHdpbGwgbm90IGhhdmUgYmVlblxuICAgICAgICAgICAgLy8gc2F2ZWQsIHNvIHdlIGp1c3QgZ28gYmFjayB0byByZWFkeSBzdGF0ZVxuICAgICAgICAgICAgY2FzZSAndXBsb2FkLWZhaWxlZCc6XG4gICAgICAgICAgICBjYXNlICdzY2FuLWZhaWxlZCc6XG4gICAgICAgICAgICAgICAgbWUuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICBtZS5zdGF0ZSA9ICdyZWFkeSc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIC8vIEZvciBzdG9yZWQgZG9jdW1lbnRzLCB3ZSBuZWVkIHRvIHRlbGwgdGhlIHNlcnZlciB0aGUgZG9jdW1lbnRcbiAgICAgICAgICAgIC8vIGlzIG5vdCByZXF1aXJlZC5cbiAgICAgICAgICAgIGNhc2UgJ3Byb2Nlc3NpbmcnOlxuICAgICAgICAgICAgY2FzZSAnZG93bmxvYWRhYmxlJzpcbiAgICAgICAgICAgIGNhc2UgJ25vdC1kb3dubG9hZGFibGUnOlxuICAgICAgICAgICAgICAgIG1lLmRlbGV0ZURvY3VtZW50KCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkZWxldGVkJzpcbiAgICAgICAgICAgICAgICBtZS5jbGVhcigpO1xuICAgICAgICAgICAgICAgIG1lLnN0YXRlID0gJ3JlYWR5JztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFib3J0VXBsb2FkKCkge1xuICAgICAgICB0aGlzLnhocj8uYWJvcnQoKTtcbiAgICB9XG5cbiAgICBhc3luYyBkZWxldGVEb2N1bWVudCgpIHtcbiAgICAgICAgY29uc3RcbiAgICAgICAgICAgIG1lICAgICAgICAgID0gdGhpcyxcbiAgICAgICAgICAgIHsgaGVhZGVycyB9ID0gbWU7XG5cbiAgICAgICAgbWUuZmlyZSgnYmVmb3JlUmVxdWVzdCcsIHtcbiAgICAgICAgICAgIGhlYWRlcnNcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gV2UgYXNrIHRoZSBzZXJ2ZXIgdG8gZGVsZXRlIHVzaW5nIG91ciB0aGlzLmRvY3VtZW50SWRcbiAgICAgICAgY29uc3Qgc3RhdHVzUmVzcG9uc2UgPSBhd2FpdCBmZXRjaChtZS5kb2N1bWVudERlbGV0ZVVybCwge1xuICAgICAgICAgICAgbWV0aG9kIDogbWUuZG9jdW1lbnREZWxldGVNZXRob2QsXG4gICAgICAgICAgICBoZWFkZXJzXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFN1Y2Nlc3NcbiAgICAgICAgaWYgKFN0cmluZyhzdGF0dXNSZXNwb25zZS5zdGF0dXMpLnNsaWNlKDAsIDEpID09PSAnMicpIHtcbiAgICAgICAgICAgIG1lLmNsZWFyKCk7XG4gICAgICAgICAgICBtZS5zdGF0ZSA9ICdyZWFkeSc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBtZS5lcnJvciA9IGAke21lLmRvY3VtZW50RGVsZXRlRXJyb3J9OiAke3N0YXR1c1Jlc3BvbnNlLnN0YXR1c1RleHR9YDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGNoZWNrRG9jdW1lbnRTdGF0dXMoKSB7XG4gICAgICAgIGNvbnN0XG4gICAgICAgICAgICBtZSAgICAgICAgICA9IHRoaXMsXG4gICAgICAgICAgICB7IGhlYWRlcnMgfSA9IG1lO1xuXG4gICAgICAgIGlmIChtZS5zdGF0ZSA9PT0gJ3Byb2Nlc3NpbmcnKSB7XG4gICAgICAgICAgICBtZS5maXJlKCdiZWZvcmVSZXF1ZXN0Jywge1xuICAgICAgICAgICAgICAgIGhlYWRlcnNcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb25zdCBzdGF0dXNSZXNwb25zZSA9IGF3YWl0IGZldGNoKG1lLmRvY3VtZW50U3RhdHVzVXJsLCB7XG4gICAgICAgICAgICAgICAgaGVhZGVyc1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFN1Y2Nlc3NcbiAgICAgICAgICAgIGlmIChTdHJpbmcoc3RhdHVzUmVzcG9uc2Uuc3RhdHVzKS5zbGljZSgwLCAxKSA9PT0gJzInKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgXG4gICAgICAgICAgICAgICAgICAgIHNlcnZlckpzb24gICA9IGF3YWl0IHN0YXR1c1Jlc3BvbnNlLmpzb24oKSxcbiAgICAgICAgICAgICAgICAgICAgc2VydmVyU3RhdHVzID0gc2VydmVySnNvbi5zdGF0dXMsXG4gICAgICAgICAgICAgICAgICAgIC8vIE1hcCB0aGUgc2VydmVyJ3Mgc3RhdGVzIGNvZGVzIHRvIG91ciBvd24gc3RhdHVzIGNvZGVzXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cyAgICAgICA9IG1lLmRvY3VtZW50U3RhdHVzTWFwW3NlcnZlclN0YXR1c10gfHwgc2VydmVyU3RhdHVzO1xuXG4gICAgICAgICAgICAgICAgc3dpdGNoIChzdGF0dXMpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnc2Nhbm5pbmcnOlxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiBtZS5jaGVja0RvY3VtZW50U3RhdHVzKCksIG1lLnN0YXR1c1NjYW5JbnRlcnZhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZGVsZXRlZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBtZS5lcnJvciA9IGAke21lLmRvY3VtZW50VGV4dH0gJHttZS5kb2N1bWVudElkfSAke2lzTm9Mb25nZXJBdmFpbGFibGV9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lLnN0YXRlID0gJ3JlYWR5JztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgbWUuc3RhdGUgPSBzdGF0dXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbWUuZXJyb3IgPSBgJHttZS5kb2N1bWVudFN0YXR1c0Vycm9yfTogJHtzdGF0dXNSZXNwb25zZS5zdGF0dXNUZXh0IHx8IGBTZXJ2ZXIgZXJyb3IgJHtzdGF0dXNSZXNwb25zZS5zdGF0dXN9YH1gO1xuICAgICAgICAgICAgICAgIG1lLnN0YXRlID0gJ2RlbGV0ZWQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWZ0ZXJTZXREb2N1bWVudChkb2N1bWVudCkge1xuICAgICAgICBpZiAoZG9jdW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0XG4gICAgICAgICAgICAgICAgbWUgPSB0aGlzO1xuXG4gICAgICAgICAgICBtZS5wcmVFeGlzdGluZ0RvY3VtZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgIG1lLmRvY3VtZW50SWQgPSBkb2N1bWVudC5pZDtcbiAgICAgICAgICAgIG1lLmZpbGVTaXplID0gbWUuZm9ybWF0U2l6ZShkb2N1bWVudC5zaXplKTtcbiAgICAgICAgICAgIG1lLnZkb20uY25bMV0uY25bMF0uaW5uZXJIVE1MID0gZG9jdW1lbnQuZmlsZU5hbWU7XG4gICAgICAgICAgICBtZS5zdGF0ZSA9IG1lLmRvY3VtZW50U3RhdHVzTWFwW2RvY3VtZW50LnN0YXR1c107XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYWZ0ZXIgdGhlIHN0YXRlIGNvbmZpZyBnb3QgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvbGRWYWx1ZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBhZnRlclNldFN0YXRlKHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICBjb25zdFxuICAgICAgICAgICAgbWUgICAgICA9IHRoaXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmRvbVxuICAgICAgICAgICAgfSA9IG1lLFxuICAgICAgICAgICAgYW5jaG9yICA9IHZkb20uY25bMV0uY25bMF0sXG4gICAgICAgICAgICBzdGF0dXMgID0gdmRvbS5jblsxXS5jblsxXTtcblxuICAgICAgICBkZWxldGUgdmRvbS5pbmVydDtcblxuICAgICAgICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgICAgICAgICBjYXNlICdyZWFkeSc6XG4gICAgICAgICAgICAgICAgYW5jaG9yLnRhZyA9ICdkaXYnO1xuICAgICAgICAgICAgICAgIGFuY2hvci5ocmVmID0gJyc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd1cGxvYWQtZmFpbGVkJzpcbiAgICAgICAgICAgICAgICBzdGF0dXMuaW5uZXJIVE1MID0gYCR7bWUudXBsb2FkRmFpbGVkfS4uLiAoJHtNYXRoLnJvdW5kKG1lLnByb2dyZXNzICogMTAwKX0lKWA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdwcm9jZXNzaW5nJzpcbiAgICAgICAgICAgICAgICBzdGF0dXMuaW5uZXJIVE1MID0gYCR7bWUuc2Nhbm5pbmd9Li4uICgke21lLmZvcm1hdFNpemUobWUudXBsb2FkU2l6ZSl9KWA7XG4gICAgICAgICAgICAgICAgdmRvbS5pbmVydCA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzY2FuLWZhaWxlZCc6XG4gICAgICAgICAgICAgICAgc3RhdHVzLmlubmVySFRNTCA9IGAke21lLm1hbHdhcmVGb3VuZEluRmlsZX0uIFxcdTIwMjIgJHttZS5maWxlU2l6ZX1gO1xuICAgICAgICAgICAgICAgIG1lLmVycm9yID0gbWUucGxlYXNlQ2hlY2s7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkb3dubG9hZGFibGUnOlxuICAgICAgICAgICAgICAgIGFuY2hvci50YWcgPSAnYSc7XG4gICAgICAgICAgICAgICAgYW5jaG9yLmhyZWYgPSBtZS5jcmVhdGVVcmwobWUuZG93bmxvYWRVcmwsIHtcbiAgICAgICAgICAgICAgICAgICAgW21lLmRvY3VtZW50SWRQYXJhbWV0ZXJdIDogbWUuZG9jdW1lbnRJZFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHN0YXR1cy5pbm5lckhUTUwgPSBtZS5maWxlU2l6ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ25vdC1kb3dubG9hZGFibGUnOlxuICAgICAgICAgICAgICAgIHN0YXR1cy5pbm5lckhUTUwgPSBtZS5wcmVFeGlzdGluZ0RvY3VtZW50ID9cbiAgICAgICAgICAgICAgICBtZS5maWxlU2l6ZSA6IGAke21lLnN1Y2Nlc3NmdWxseVVwbG9hZGVkfSBcXHUyMDIyICR7bWUuZmlsZVNpemV9YDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2RlbGV0ZWQnOlxuICAgICAgICAgICAgICAgIHN0YXR1cy5pbm5lckhUTUwgPSBtZS5maWxlV2FzRGVsZXRlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIG1lLnZhbGlkYXRlKCk7XG4gICAgICAgIG1lLnVwZGF0ZSgpO1xuXG4gICAgICAgIC8vIFByb2Nlc3NpbmcgYWJvdmUgbWF5IG11dGF0ZSBjbHNcbiAgICAgICAgY29uc3QgeyBjbHMgfSA9IG1lO1xuXG4gICAgICAgIE5lb0FycmF5LnJlbW92ZShjbHMsICduZW8tZmlsZS11cGxvYWQtc3RhdGUtJyArIG9sZFZhbHVlKTtcbiAgICAgICAgTmVvQXJyYXkuYWRkKGNscywgJ25lby1maWxlLXVwbG9hZC1zdGF0ZS0nICsgdmFsdWUpO1xuICAgICAgICBtZS5jbHMgPSBjbHM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIFVSTCBzdWJzdGl0dXRpbmcgdGhlIHBhc3NlZCBwYXJhbWV0ZXIgbmFtZXMgaW4gYXQgdGhlIHBsYWNlcyB3aGVyZSB0aGUgbmFtZVxuICAgICAqIG9jY3VycyB3aXRoaW4gYHt9YCBpbiB0aGUgcGF0dGVybi5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsUGF0dGVybiBcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIFxuICAgICAqL1xuICAgIGNyZWF0ZVVybCh1cmxQYXR0ZXJuLCBwYXJhbXMpIHtcbiAgICAgICAgZm9yIChjb25zdCBwYXJhbU5hbWUgaW4gcGFyYW1zKSB7XG4gICAgICAgICAgICB1cmxQYXR0ZXJuID0gdXJsUGF0dGVybi5yZXBsYWNlKGB7JHtwYXJhbU5hbWV9fWAsIHBhcmFtc1twYXJhbU5hbWVdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdXJsUGF0dGVybjtcbiAgICB9XG5cbiAgICBiZWZvcmVHZXRIZWFkZXJzKGhlYWRlcnMpIHtcbiAgICAgICAgcmV0dXJuIHsgLi4uKGhlYWRlcnMgfHwge30pIH1cbiAgICB9XG5cbiAgICBiZWZvcmVHZXREb2N1bWVudFN0YXR1c1VybChkb2N1bWVudFN0YXR1c1VybCkge1xuICAgICAgICBjb25zdCBtZSA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIHR5cGVvZiBkb2N1bWVudFN0YXR1c1VybCA9PT0gJ2Z1bmN0aW9uJz8gZG9jdW1lbnRTdGF0dXNVcmwuY2FsbChtZSwgbWUpIDogbWUuY3JlYXRlVXJsKGRvY3VtZW50U3RhdHVzVXJsLCB7XG4gICAgICAgICAgICBbbWUuZG9jdW1lbnRJZFBhcmFtZXRlcl0gOiBtZS5kb2N1bWVudElkXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGJlZm9yZUdldERvY3VtZW50RGVsZXRlVXJsKGRvY3VtZW50RGVsZXRlVXJsKSB7XG4gICAgICAgIGNvbnN0IG1lID0gdGhpcztcblxuICAgICAgICByZXR1cm4gdHlwZW9mIGRvY3VtZW50RGVsZXRlVXJsID09PSAnZnVuY3Rpb24nPyBkb2N1bWVudERlbGV0ZVVybC5jYWxsKG1lLCBtZSkgOiBtZS5jcmVhdGVVcmwoZG9jdW1lbnREZWxldGVVcmwsIHtcbiAgICAgICAgICAgIFttZS5kb2N1bWVudElkUGFyYW1ldGVyXSA6IG1lLmRvY3VtZW50SWRcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYmVmb3JlR2V0RG93bmxvYWRVcmwoZG93bmxvYWRVcmwpIHtcbiAgICAgICAgY29uc3QgbWUgPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiB0eXBlb2YgZG93bmxvYWRVcmwgPT09ICdmdW5jdGlvbic/IGRvd25sb2FkVXJsLmNhbGwobWUsIG1lKSA6IG1lLmNyZWF0ZVVybChkb3dubG9hZFVybCwge1xuICAgICAgICAgICAgW21lLmRvY3VtZW50SWRQYXJhbWV0ZXJdIDogbWUuZG9jdW1lbnRJZFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBiZWZvcmVHZXRNYXhTaXplKG1heFNpemUpIHtcbiAgICAgICAgLy8gTm90IGNvbmZpZ3VyZWQgbWVhbnMgbm8gbGltaXRcbiAgICAgICAgaWYgKG1heFNpemUgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIE51bWJlci5NQVhfU0FGRV9JTlRFR0VSO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3BsaXQgZWcgXCIxMDBtYlwiIGludG8gdGhlIG51bWVyaWMgYW5kIHVuaXRzIHBhcnRzXG4gICAgICAgIGNvbnN0IHNpemVQYXJ0cyA9IHNpemVSRS5leGVjKG1heFNpemUpO1xuXG4gICAgICAgIGlmIChzaXplUGFydHMpIHtcbiAgICAgICAgICAgIC8vIENvbnZlcnQgbWIgdG8gMTAwMDAwMCBldGNcbiAgICAgICAgICAgIGNvbnN0IG11bHRpcGxpZXIgPSBzaXplTXVsdGlwbGllclsoc2l6ZVBhcnRzWzJdfHwndW5pdCcpLnRvTG93ZXJDYXNlKCldO1xuXG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQoc2l6ZVBhcnRzWzFdKSAqIG11bHRpcGxpZXI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhZnRlclNldEVycm9yKHRleHQpIHtcbiAgICAgICAgaWYgKHRleHQpIHtcbiAgICAgICAgICAgIHRoaXMudmRvbS5jbls0XS5jbiA9IFt7XG4gICAgICAgICAgICAgICAgdnR5cGUgOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgaHRtbCAgOiB0ZXh0XG4gICAgICAgICAgICB9XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudmRvbS5jbls0XS5jbiA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy52YWxpZGF0ZSgpO1xuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIH1cblxuICAgIGZvcm1hdFNpemUoYnl0ZXMsIHNlcGFyYXRvciA9ICcnLCBwb3N0Rml4ID0gJycpIHtcbiAgICAgICAgaWYgKGJ5dGVzKSB7XG4gICAgICAgICAgICBjb25zdFxuICAgICAgICAgICAgICAgIHNpemVzID0gWydCeXRlcycsICdLQicsICdNQicsICdHQicsICdUQiddLFxuICAgICAgICAgICAgICAgIGkgICAgID0gTWF0aC5taW4ocGFyc2VJbnQoTWF0aC5mbG9vcihNYXRoLmxvZyhieXRlcykgLyBNYXRoLmxvZygxMDI0KSkudG9TdHJpbmcoKSwgMTApLCBzaXplcy5sZW5ndGggLSAxKTtcblxuICAgICAgICAgICAgcmV0dXJuIGAkeyhieXRlcyAvICgxMDI0ICoqIGkpKS50b0ZpeGVkKGkgPyAxIDogMCl9JHtzZXBhcmF0b3J9JHtzaXplc1tpXX0ke3Bvc3RGaXh9YDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ24vYSc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICovXG4gICAgdmFsaWRhdGUoKSB7XG4gICAgICAgIGNvbnN0XG4gICAgICAgICAgICB7IGNscyB9ID0gdGhpcyxcbiAgICAgICAgICAgIGlzVmFsaWQgPSB0aGlzLmlzVmFsaWQoKTtcblxuICAgICAgICBOZW9BcnJheS50b2dnbGUoY2xzLCAnbmVvLWludmFsaWQnLCAhaXNWYWxpZCk7XG4gICAgICAgIHRoaXMuY2xzID0gY2xzO1xuXG4gICAgICAgIHJldHVybiBpc1ZhbGlkO1xuICAgIH1cblxuICAgIGlzVmFsaWQoKSB7XG4gICAgICAgIGNvbnN0IG1lID0gdGhpcztcblxuICAgICAgICByZXR1cm4gIW1lLmVycm9yICYmICAhKG1lLnN0YXRlID09PSAncmVhZHknICYmIG1lLnJlcXVpcmVkKSB8fFxuICAgICAgICAgICAgICAgKCAgICAobWUuc3RhdGUgPT09ICdkb3dubG9hZGFibGUnKSB8fFxuICAgICAgICAgICAgICAgICAgICAobWUuc3RhdGUgPT09ICdub3QtZG93bmxvYWRhYmxlJylcbiAgICAgICAgICAgICAgICk7XG4gICAgfVxufVxuXG5OZW8uYXBwbHlDbGFzc0NvbmZpZyhGaWxlVXBsb2FkKTtcblxuZXhwb3J0IGRlZmF1bHQgRmlsZVVwbG9hZDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==