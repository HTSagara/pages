"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["vendors-examples_form_field_fileupload_app_mjs"],{

/***/ "./examples/form/field/fileupload/MainContainer.mjs":
/*!**********************************************************!*\
  !*** ./examples/form/field/fileupload/MainContainer.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _ConfigurationViewport_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../ConfigurationViewport.mjs */ "./examples/ConfigurationViewport.mjs");
/* harmony import */ var _src_form_field_FileUpload_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../src/form/field/FileUpload.mjs */ "./src/form/field/FileUpload.mjs");
/* harmony import */ var _src_form_field_Number_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../src/form/field/Number.mjs */ "./src/form/field/Number.mjs");
/* harmony import */ var _src_container_Panel_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../src/container/Panel.mjs */ "./src/container/Panel.mjs");





/**
 * @class Neo.examples.form.field.text.MainContainer
 * @extends Neo.examples.ConfigurationViewport
 */
class MainContainer extends _ConfigurationViewport_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        className           : 'Neo.examples.form.field.text.MainContainer',
        autoMount           : true,
        configItemLabelWidth: 160,
        layout              : {ntype: 'hbox', align: 'stretch'}
    }

    createConfigurationComponents() {
        let me = this;

        return [{
            module   : _src_form_field_Number_mjs__WEBPACK_IMPORTED_MODULE_2__["default"],
            labelText: 'width',
            listeners: {change: me.onConfigChange.bind(me, 'width')},
            maxValue : 350,
            minValue : 200,
            stepSize : 5,
            style    : {marginTop: '10px'},
            value    : me.exampleComponent.width
        }];
    }

    createExampleComponent() {
        return Neo.create(_src_container_Panel_mjs__WEBPACK_IMPORTED_MODULE_3__["default"], {
            style : 'padding:1em',
            items : [{
                module            : _src_form_field_FileUpload_mjs__WEBPACK_IMPORTED_MODULE_1__["default"],
                id                : 'my-downloadable-test',
                uploadUrl         : 'http://127.0.0.1:3000/file-upload-test',
                documentStatusUrl : 'http://127.0.0.1:3000/document-status-downloadable?documentId={documentId}',
                documentDeleteUrl : 'http://127.0.0.1:3000/document-delete?documentId={documentId}',
                downloadUrl       : 'http://127.0.0.1:3000/getDocument?documentId={documentId}',
                width             : 350,
                maxSize           : '10mb',
                types             : {
                    png : 1,
                    jpg : 1,
                    xls : 1,
                    pdf : 1
                },
                listeners : {
                    beforeRequest({ headers }) {
                        headers['X-XSRF-TOKEN'] = 'my-xsrf-token'
                    }
                }
            }, {
                module            : _src_form_field_FileUpload_mjs__WEBPACK_IMPORTED_MODULE_1__["default"],
                id                : 'my-not-downloadable-test',
                uploadUrl         : 'http://127.0.0.1:3000/file-upload-test',
                documentStatusUrl : 'http://127.0.0.1:3000/document-status-not-downloadable?documentId={documentId}',
                documentDeleteUrl : 'http://127.0.0.1:3000/document-delete?documentId={documentId}',
                downloadUrl       : 'http://127.0.0.1:3000/getDocument?documentId={documentId}',
                width             : 350,
                maxSize           : '10mb',
                types             : {
                    png : 1,
                    jpg : 1,
                    xls : 1,
                    pdf : 1
                }
            }, {
                module            : _src_form_field_FileUpload_mjs__WEBPACK_IMPORTED_MODULE_1__["default"],
                id                : 'my-upload-fail-test',
                uploadUrl         : 'http://127.0.0.1:3000/file-upload-test-fail',
                documentStatusUrl : 'http://127.0.0.1:3000/document-status?documentId={documentId}',
                documentDeleteUrl : 'http://127.0.0.1:3000/document-delete?documentId={documentId}',
                downloadUrl       : 'http://127.0.0.1:3000/getDocument?documentId={documentId}',
                width             : 350,
                maxSize           : '10mb',
                types             : {
                    png : 1,
                    jpg : 1,
                    xls : 1,
                    pdf : 1
                }
            }, {
                module            : _src_form_field_FileUpload_mjs__WEBPACK_IMPORTED_MODULE_1__["default"],
                id                : 'my-scan-fail-test',
                uploadUrl         : 'http://127.0.0.1:3000/file-upload-test',
                documentStatusUrl : 'http://127.0.0.1:3000/document-status-fail?documentId={documentId}',
                documentDeleteUrl : 'http://127.0.0.1:3000/document-delete?documentId={documentId}',
                downloadUrl       : 'http://127.0.0.1:3000/getDocument?documentId={documentId}',
                width             : 350,
                maxSize           : '10mb',
                types             : {
                    png : 1,
                    jpg : 1,
                    xls : 1,
                    pdf : 1
                }
            }, {
                module            : _src_form_field_FileUpload_mjs__WEBPACK_IMPORTED_MODULE_1__["default"],
                id                : 'my-existing-document-test',
                document          : {
                    id       : 2,
                    fileName : 'test.pdf',
                    size     : 10664885,
                    status   : 'AVAILABLE'
                },
                uploadUrl         : 'http://127.0.0.1:3000/file-upload-test',
                documentStatusUrl : 'http://127.0.0.1:3000/document-status-not-downloadable?documentId={documentId}',
                documentDeleteUrl : 'http://127.0.0.1:3000/document-delete?documentId={documentId}',
                downloadUrl       : 'http://127.0.0.1:3000/getDocument?documentId={documentId}',
                width             : 350,
                maxSize           : '10mb',
                types             : {
                    png : 1,
                    jpg : 1,
                    xls : 1,
                    pdf : 1
                }
            }, {
                module            : _src_form_field_FileUpload_mjs__WEBPACK_IMPORTED_MODULE_1__["default"],
                id                : 'my-non-existing-document-test',
                document          : {
                    id       : 2,
                    fileName : 'test.pdf',
                    size     : 10664885,
                    status   : 'DELETED'
                },
                uploadUrl         : 'http://127.0.0.1:3000/file-upload-test',
                documentStatusUrl : 'http://127.0.0.1:3000/document-status-non-existent?documentId={documentId}',
                documentDeleteUrl : 'http://127.0.0.1:3000/document-delete?documentId={documentId}',
                downloadUrl       : 'http://127.0.0.1:3000/getDocument?documentId={documentId}',
                width             : 350,
                maxSize           : '10mb',
                types             : {
                    png : 1,
                    jpg : 1,
                    xls : 1,
                    pdf : 1
                }
            }, {
                module            : _src_form_field_FileUpload_mjs__WEBPACK_IMPORTED_MODULE_1__["default"],
                id                : 'my-failing-document-status-test',
                uploadUrl         : 'http://127.0.0.1:3000/file-upload-test',
                documentStatusUrl : 'http://127.0.0.1:3000/document-status-fails?documentId={documentId}',
                documentDeleteUrl : 'http://127.0.0.1:3000/document-delete?documentId={documentId}',
                downloadUrl       : 'http://127.0.0.1:3000/getDocument?documentId={documentId}',
                width             : 350,
                maxSize           : '10mb',
                types             : {
                    png : 1,
                    jpg : 1,
                    xls : 1,
                    pdf : 1
                }
            }]
        });
    }
}

Neo.setupClass(MainContainer);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MainContainer);


/***/ }),

/***/ "./examples/form/field/fileupload/app.mjs":
/*!************************************************!*\
  !*** ./examples/form/field/fileupload/app.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   onStart: () => (/* binding */ onStart)
/* harmony export */ });
/* harmony import */ var _MainContainer_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MainContainer.mjs */ "./examples/form/field/fileupload/MainContainer.mjs");


const onStart = () => Neo.app({
    mainView: _MainContainer_mjs__WEBPACK_IMPORTED_MODULE_0__["default"],
    name    : 'Neo.examples.form.field.fileupload'
});


/***/ }),

/***/ "./src/form/field/FileUpload.mjs":
/*!***************************************!*\
  !*** ./src/form/field/FileUpload.mjs ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _form_field_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../form/field/Base.mjs */ "./src/form/field/Base.mjs");
/* harmony import */ var _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/Array.mjs */ "./src/util/Array.mjs");
/* harmony import */ var _util_String_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/String.mjs */ "./src/util/String.mjs");




const
    sizeRE           = /^(\d+)(kb|mb|gb)?$/i,
    sizeMultiplier   = {
        unit : 1,
        kb   : 1000,
        mb   : 1000000,
        gb   : 1000000000
    },
    httpSuccessCodes = {
        2 : 1,
        4 : 1
    };

/**
 * An accessible file uploading widget which automatically commences an upload as soon as
 * a file is selected using the UI.
 *
 * The URL to which the file must be uploaded is specified in the {@link config#uploadUrl} property.
 * This service must return a JSON status response in the following form for successful uploads:
 *
 * ```json
 * {
 *     "success" : true,
 *     "documentId" : 1
 * }
 * ```
 *
 * And the following form for unsuccessful uploads:
 *
 * ```json
 * {
 *     "success" : false,
 *     "message" : "Why the upload was rejected"
 * }
 * ```
 *
 * The name of the `documentId` property is configured in {@link #member-documentIdParameter}.
 * It defaults to `'documentId'`.
 *
 * The `documentId` is used when requesting the document malware scan status, and when requesting
 * that the document be deleted, or downloaded.
 *
 * If the upload is successful, then the {@link #member-documentStatusUrl} is polled until the
 * malware scan. The document id returned from the upload is passed in the parameter named
 * by the {@link #member-documentIdParameter}. It defaults to `'documentId'`.
 *
 * This service must return a JSON status response in the following if the scan is still progressing:
 *
 * ```json
 * {
 *     "status" : "scanning"
 * }
 * ```
 *
 * And the following form is malware was detected:
 *
 * ```json
 * {
 *     "status" : "scan-failed"
 * }
 * ```
 *
 * After a successful scan, a document may or may not be downloadable.
 *
 * For a downloadable document, the response must be:
 *
 * ```json
 * {
 *     "status" : "downloadable"
 * }
 * ```
 *
 * For a non-downloadable document, the response must be:
 *
 * ```json
 * {
 *     "status" : "not-downloadable"
 * }
 * ```
 * @class Neo.form.field.FileUpload
 * @extends Neo.form.field.Base
 */
class FileUpload extends _form_field_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.form.field.FileUpload'
         * @protected
         */
        className: 'Neo.form.field.FileUpload',
        /**
         * @member {String} ntype='file-upload-field'
         * @protected
         */
        ntype: 'file-upload-field',
        /**
         * @member {String[]} baseCls=['neo-file-upload-field']
         * @protected
         */
        baseCls: ['neo-file-upload-field'],
        /**
         * @member {String[]} cls=['neo-field-empty']
         */
        cls: ['neo-field-empty'],
        /**
         * @member {Object} _vdom
         */
        _vdom:
        {cn: [
            {tag: 'i', cls: 'neo-file-upload-state-icon'},
            {cls: 'neo-file-upload-body', cn: [
                {cls: 'neo-file-upload-filename'},
                {cls: 'neo-file-upload-state'}
            ]},
            {tag: 'button', cls: 'neo-file-upload-action-button'},
            {tag: 'input', cls: 'neo-file-upload-input', type: 'file'},
            {tag: 'label', cls: 'neo-file-upload-label'},
            {cls: 'neo-file-upload-error-message'}
        ]},

        /**
         * An Object containing a default set of headers to be passed to the server on every HTTP request.
         * @member {Object} headers
         */
        headers_: {},

        /**
         * An Object which allows the status text returned from the {@link #property-documentStatusUrl} to be
         * mapped to the corresponding next widget state.
         * @member {Object} documentStatusMap
         */
        documentStatusMap: {
            SCANNING         : 'scanning',

            // The server doing its own secondary upload to the final storage location may return this.
            // We enter the same state as scanning. A spinner shows for the duration of this state
            UPLOADING       : 'scanning',

            MALWARE_DETECTED: 'scan-failed',
            UN_DOWNLOADABLE : 'not-downloadable',
            AVAILABLE       : 'not-downloadable',
            DOWNLOADABLE    : 'downloadable',
            DELETED         : 'deleted',
            ERROR           : 'error'
        },

        /**
         * @member {String|null} document_=null
         */
        document_: null,

        /**
         * If this widget should reference an existing document, configure the widget with a documentId
         * so that it can initialize in the correct "uploaded" state.
         *
         * If this is *not* configured, then this property will be set after a successful upload to
         * the id returned from the {@link #property-uploadUrl}.
         * @member {String|Number} documentId
         */
        documentId: null,

        /**
         * The URL of the file upload service to which the selected file is sent.
         *
         * This service must return a JSON response of the form:
         *
         * ```json
         * {
         *     "success"    : true,
         *     "message"    : "Only needed if the success property is false",
         *     "documentId" : 1
         * }
         * ```
         *
         * The document id is needed so that this widget can follow up and request the results of the
         * scan operation to see if the file was accepted, and whether it is to be subsequently downloadable.
         *
         * The document status request URL must be configured in {@link #member-documentStatusUrl}
         * @member {String|null} uploadUrl=null
         */
        uploadUrl: null,

        /**
         * The name of the JSON property in which the document id is returned in the upload response
         * JSON packet and the token string which is substituted for the document id when requesting
         * a malware scan and a document deletion.
         *
         * Defaults fro `documentId`
         *
         * @member {String} documentIdParameter='documentId'
         */
        documentIdParameter: 'documentId',

        /**
         * The URL from which the file may be downloaded after it has finished its scan.
         *
         * This must contain a substitution token named the same as the {@link #property-documentIdParameter}
         * which is used when creating a URL
         *
         * for example:
         *
         * ```json
         * {
         *     downloadUrl : '/getDocument/${documentId}'
         * }
         * ```
         *
         * The document id returned from the {@link #member-uploadUrl upload} is passed in the parameter named
         * by the {@link #member-documentIdParameter}. It defaults to `'documentId'`.
         *
         * @member {String|null} downloadUrl_=null
         */
        downloadUrl_: null,

        /**
         * The URL of the file status reporting service.
         *
         * This must contain a substitution token named the same as the {@link #property-documentIdParameter}
         * which is used when creating a URL
         *
         * for example:
         *
         * ```json
         * {
         *     documentStatusUrl : '/getDocumentStatus/${documentId}'
         * }
         * ```
         *
         * This widget will use this service after a successful upload to determine its next
         * state.
         *
         * This service must return a JSON response of the form:
         *
         * ```json
         * {
         *     "status" : "scanning" or "scan-failed" or "downloadable or "not-downloadable"
         * }
         * ```
         *
         * @member {String|null} documentStatusUrl_=null
         */
        documentStatusUrl_: null,

        /**
         * The polling interval *in milliseconds* to wait between asking the server how the document scan
         * is proceeding.
         *
         * Defaults to 2000ms
         *
         * @member {Number} statusScanInterval=2000
         */
        statusScanInterval: 2000,

        /**
         * The URL of the file deletion service.
         *
         * This must contain a substitution token named the same as the {@link #property-documentIdParameter}
         * which is used when creating a URL
         *
         * for example:
         *
         * ```json
         * {
         *     documentDeleteUrl : '/deleteDocument/${documentId}'
         * }
         * ```
         *
         * This widget will use this service after a successful upload to determine its next
         * state.
         *
         * If this service yields an HTTP 200 status, the deletion is taken to have been successful.
         *
         * @member {String|null} documentDeleteUrl_=null
         */
        documentDeleteUrl_: null,

        /**
         * The HTTP method to use when requesting a document deletion using the {@link #member-documentDeleteUrl}.
         *
         * Defaults to `DELETE`.
         * @member {String} documentDeleteMethod='DELETE'
         */
        documentDeleteMethod: 'DELETE',

        /**
         * @member {String} state_=ready
         */
        state_: 'ready',

        /**
         * @member {Object} types=null
         */
        types_: null,

        /**
         * @member {String|Number|null} maxSize=null
         */
        maxSize_: null,

        /**
         * The error text to show below the widget
         * @member {String|null} error_=null
         */
        error_ : null,

        // UI strings which can be overridden for other languages
        chooseFile           : 'Choose file',
        documentText         : 'Document',
        invalidFileFormat    : 'invalid file format',
        pleaseUseTheseTypes  : 'Please use these file types {allowedFileTypes}',
        fileSizeMoreThan     : 'File size exceeds {allowedFileSize}',
        uploadError          : 'Please try again',
        documentDeleteError  : 'Document delete service error',
        isNoLongerAvailable  : 'is no longer available',
        documentStatusError  : 'Document status service error',
        uploadFailed         : 'Upload failed',
        scanning             : 'Scanning',
        uploading            : 'Uploading...',
        malwareFoundInFile   : 'Malware found in file',
        pleaseCheck          : 'Please check the file and try again',
        successfullyUploaded : 'Successfully uploaded',
        fileWasDeleted       : 'File was deleted',
        fileIsInAnErrorState : 'File is in an error state'
    }

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);

        const me = this;

        me.addDomListeners([
            { input : me.onInputValueChange, scope: me},
            { click : me.onActionButtonClick, delegate : '.neo-file-upload-action-button', scope : me}
        ]);
    }

    afterSetId(value, oldValue) {
        const inputElId = `${this.id}-input`;

        this.getInputEl().id =  this.vdom.cn[4].for = inputElId;

        // silent vdom update, the super call will trigger the engine
        super.afterSetId?.(value, oldValue);
    }

    onConstructed() {
        super.onConstructed(...arguments);

        this.vdom.cn[4].html = this.chooseFile;
    }

    /**
     * @returns {Object}
     */
    getInputEl() {
        return this.vdom.cn[3];
    }

    async clear() {
        const
            me      = this,
            { cls } = me;

        _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].add(cls, 'neo-field-empty');
        me.cls = cls;

        me.vdom.cn[3] = {
            id    : `${me.id}-input`,
            cls   : 'neo-file-upload-input',
            tag   : 'input',
            type  : 'file',
            value : ''
        };
        me.state = 'ready';
        me.error = '';
        me.file = me.document = null;

        // We have to wait for the DOM to have changed, and the input field to be visible
        await me.timeout(100);
        me.focus(me.getInputEl().id);
    }

    /**
     * @param {Object} data
     * @protected
     */
    onInputValueChange({ files }) {
        const
            me        = this,
            {
                types,
                cls
            } = me,
            body      = me.vdom.cn[1];

        if (files.length) {
            _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].remove(cls, 'neo-field-empty');
            me.cls = cls;

            const
                file     = files.item(0),
                pointPos = file.name.lastIndexOf('.'),
                type     = pointPos > -1 ? file.name.slice(pointPos + 1) : '',
                escapedFileName = _util_String_mjs__WEBPACK_IMPORTED_MODULE_2__["default"].escapeHtml(file.name);

            if (me.types && !types[type]) {
                body.cn[0].innerHTML = escapedFileName;
                body.cn[1].innerHTML = `${me.invalidFileFormat} (.${type}) ${me.formatSize(file.size)}`;
                me.error = me.pleaseUseTheseTypes?.replace('{allowedFileTypes}', Object.keys(types).join(' .'))
            }
            else if (file.size > me.maxSize) {
                body.cn[0].innerHTML = escapedFileName;
                body.cn[1].innerHTML = me.formatSize(file.size);
                me.error = me.fileSizeMoreThan?.replace('{allowedFileSize}', String(me._maxSize).toUpperCase());
            }
            // If it passes the type and maxSize check, upload it
            else {
                me.fileSize = me.formatSize(file.size);
                me.error = '';
                me.upload(file);
            }
        }
        // If cleared, we go back to ready state
        else {
            me.state = 'ready';
        }
    }

    async upload(file) {
        const
            me         = this,
            xhr        = me.xhr = new XMLHttpRequest(),
            { upload } = xhr,
            fileData   = new FormData(),
            headers    = { ...me.headers };

        // Show the action button
        me.file  = file;
        me.state = 'starting';

        // We have to wait for the DOM to have changed, and the action button to be visible
        await me.timeout(100);
        me.focus(me.vdom.cn[2].id);

        me.vdom.cn[1].cn[0].innerHTML = _util_String_mjs__WEBPACK_IMPORTED_MODULE_2__["default"].escapeHtml(file.name);
        me.update();
        me.state = 'uploading';

        // This means no progress as opposed to zero, but still during a currently successful ongoing upload.
        // When it is NaN, the error display does not attempt to show progress.
        me.progress = NaN;

        fileData.append("file", file);

        // React to upload state changes
        upload.addEventListener('progress', me.onUploadProgress.bind(me));
        upload.addEventListener('error',    me.onUploadError.bind(me));
        upload.addEventListener('abort',    me.onUploadAbort.bind(me));
        xhr.addEventListener('loadend',     me.onUploadDone.bind(me));

        xhr.open("POST", me.uploadUrl, true);

        /**
         * This event fires before every HTTP request is sent to the server via any of the configured URLs.
         *
         * @event beforeRequest
         * @param {Object} event The event
         * @param {Object} event.headers An object containing the configured {@link #property-headers}
         * for this widget, into which new headers may be injected.
         * @returns {Object}
         */
        me.fire('beforeRequest', {
            headers
        });
        for (const header in headers) {
            xhr.setRequestHeader(header, headers[header]);
        }

        xhr.send(fileData);
    }

    onUploadProgress({ loaded, total }) {
        const
            progress = this.progress = loaded / total,
            { vdom } = this;

        (vdom.style || (vdom.style = {}))['--upload-progress'] = `${progress}turn`;

        vdom.cn[1].cn[1].innerHTML = `${this.uploading}... (${Math.round(progress * 100)}%)`;

        this.uploadSize = loaded;
        this.update();
    }

    onUploadAbort(e) {
        this.xhr = null;
        this.clear();
    }

    onUploadError(e) {
        this.xhr = null;
        this.state = 'upload-failed';
        this.error = `${this.uploadError}`;
    }

    onUploadDone({ loaded, target : xhr }) {
        const me = this;

        me.xhr = null;

        // Successful network request.
        // Check the resulting JSON packet for details and any error.
        if (httpSuccessCodes[String(xhr.status)[0]]) {
            if (loaded !== 0) {
                const response = JSON.parse(xhr.response);

                if (response.success) {
                    me.documentId = response[me.documentIdParameter];

                    // The status check phase is optional.
                    // If no URL specified, the file is taken to be downloadable.
                    if (me.documentStatusUrl) {
                        me.state = 'processing';

                        // Start polling the server to see when the scan has a result;
                        me.checkDocumentStatus();
                    }
                    else {
                        me.state = 'downloadable';
                    }
                }
                else {
                    me.error = response.message;
                    me.state = 'upload-failed';
                }
            }
        }
        // Failed network requests are handled in onUploadError
        // so no else condition necessary here
    }

    onActionButtonClick() {
        const
            me        = this,
            { state } = me;

        // When they click the action button, depending on which state we are in, we go to
        // different states.
        switch (state) {
            // During upload, its an abort
            case 'uploading':
                me.abortUpload();
                break;

            // While processing we just have to wait until it's succeeded or failed..
            case 'processing':
                break;

            // If the upload or the scan failed, the document will not have been
            // saved, so we just go back to ready state
            case 'upload-failed':
            case 'scan-failed':
            case 'error':
                me.clear();
                me.state = 'ready';
                break;

            // For stored documents, we need to tell the server the document
            // is not required.
            case 'processing':
            case 'downloadable':
            case 'not-downloadable':
                me.deleteDocument();
                break;
            case 'deleted':
                me.clear();
                me.state = 'ready';
                break;
            case 'ready':
                me.clear();
                break;
        }
    }

    abortUpload() {
        this.xhr?.abort();
    }

    async deleteDocument() {
        const
            me          = this,
            { headers } = me;

        me.fire('beforeRequest', {
            headers
        });

        // We ask the server to delete using our this.documentId
        const statusResponse = await fetch(me.documentDeleteUrl, {
            method : me.documentDeleteMethod,
            headers
        });

        // Success
        if (httpSuccessCodes[String(statusResponse.status)[0]]) {
            me.clear();
            me.state = 'ready';
        }
        else {
            me.error = `${me.documentDeleteError}: ${statusResponse.statusText}`;
        }
    }

    async checkDocumentStatus() {
        const
            me          = this,
            { headers } = me;

        if (me.state === 'processing') {
            me.fire('beforeRequest', {
                headers
            });

            const statusResponse = await fetch(me.documentStatusUrl, {
                headers
            });

            // Success
            if (httpSuccessCodes[String(statusResponse.status)[0]]) {
                const
                    serverJson   = await statusResponse.json(),
                    serverStatus = serverJson.status,
                    // Map the server's states codes to our own status codes
                    status       = me.documentStatusMap[serverStatus] || serverStatus;

                switch (status) {
                    case 'scanning':
                        me.timeout(me.statusScanInterval).then(() => {me.checkDocumentStatus()});
                        break;
                    case 'deleted':
                        me.error = `${me.documentText} ${me.documentId} ${isNoLongerAvailable}`;
                        me.state = 'ready';
                        break;
                    case 'error':
                        me.error = `${me.documentStatusError}: ${statusResponse.statusText || `Server error ${statusResponse.status}`}`;
                        me.state = 'deleted';
                        break;
                    default:
                        me.state = status;
                }
            }
            else {
                me.error = `${me.documentStatusError}: ${statusResponse.statusText || `Server error ${statusResponse.status}`}`;
                me.state = 'deleted';
            }
        }
    }

    afterSetDocument(document) {
        if (document) {
            const
                me      = this,
                { cls } = me;

            _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].remove(cls, 'neo-field-empty');
            me.cls = cls;

            me.documentId = document.id;
            me.fileSize = me.formatSize(document.size);
            me.vdom.cn[1].cn[0].innerHTML = _util_String_mjs__WEBPACK_IMPORTED_MODULE_2__["default"].escapeHtml(document.fileName);
            me.state = me.documentStatusMap[document.status];
        }
    }

    /**
     * Triggered after the state config got changed
     * @param {String} value
     * @param {String} oldValue
     * @protected
     */
    afterSetState(value, oldValue) {
        const
            me      = this,
            {
                vdom
            } = me,
            anchor  = vdom.cn[1].cn[0],
            status  = vdom.cn[1].cn[1];

        delete vdom.inert;

        let isChangeEventNeeded;

        switch (value) {
            case 'ready':
                anchor.tag = 'div';
                anchor.href = '';
                isChangeEventNeeded = true;
                break;
            case 'upload-failed':
                status.innerHTML = `${me.uploadFailed}${isNaN(me.progress) ? '' : `... (${Math.round(me.progress * 100)}%)`}`;
                isChangeEventNeeded = true;
                break;
            case 'processing':
                status.innerHTML = `${me.scanning}... (${me.formatSize(me.uploadSize)})`;
                vdom.inert = true;
                break;
            case 'scan-failed':
                status.innerHTML = `${me.malwareFoundInFile}. \u2022 ${me.fileSize}`;
                me.error = me.pleaseCheck;
                isChangeEventNeeded = true;
                break;
            case 'downloadable':
                anchor.tag = 'a';
                anchor.href = me.createUrl(me.downloadUrl, {
                    [me.documentIdParameter] : me.documentId
                });
                status.innerHTML = me.fileSize;
                isChangeEventNeeded = true;
                break;
            case 'not-downloadable':
                status.innerHTML = me.document ? me.fileSize : `${me.successfullyUploaded} \u2022 ${me.fileSize}`;
                isChangeEventNeeded = true;
                break;
            case 'deleted':
                status.innerHTML = me.fileWasDeleted;
                isChangeEventNeeded = true;
                break;
            case 'error':
                status.innerHTML = me.fileIsInAnErrorState;
                me.error = me.pleaseCheck;
                isChangeEventNeeded = true;
            }

        if (isChangeEventNeeded && oldValue !== undefined) {
            me.fireChangeEvent(me.file)
        }
        me.validate();
        me.update();

        // Processing above may mutate cls
        const { cls } = me;

        _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].remove(cls, 'neo-file-upload-state-' + oldValue);
        _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].add(cls, 'neo-file-upload-state-' + value);
        _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"][me.file || me.document ? 'remove' : 'add', 'neo-field-empty'];
        me.cls = cls;
    }

    /**
     * Creates a URL substituting the passed parameter names in at the places where the name
     * occurs within `{}` in the pattern.
     * @param {String} urlPattern
     * @param {Object} params
     */
    createUrl(urlPattern, params) {
        for (const paramName in params) {
            urlPattern = urlPattern.replace(`{${paramName}}`, params[paramName]);
        }
        return urlPattern;
    }

    beforeGetHeaders(headers) {
        return { ...(headers || {}) }
    }

    beforeGetDocumentStatusUrl(documentStatusUrl) {
        const me = this;

        return typeof documentStatusUrl === 'function'? documentStatusUrl.call(me, me) : me.createUrl(documentStatusUrl, {
            [me.documentIdParameter] : me.documentId
        });
    }

    beforeGetDocumentDeleteUrl(documentDeleteUrl) {
        const me = this;

        return typeof documentDeleteUrl === 'function'? documentDeleteUrl.call(me, me) : me.createUrl(documentDeleteUrl, {
            [me.documentIdParameter] : me.documentId
        });
    }

    beforeGetDownloadUrl(downloadUrl) {
        const me = this;

        return typeof downloadUrl === 'function'? downloadUrl.call(me, me) : me.createUrl(downloadUrl, {
            [me.documentIdParameter] : me.documentId
        });
    }

    beforeGetMaxSize(maxSize) {
        // Not configured means no limit
        if (maxSize == null) {
            return Number.MAX_SAFE_INTEGER;
        }

        // Split eg "100mb" into the numeric and units parts
        const sizeParts = sizeRE.exec(maxSize);

        if (sizeParts) {
            // Convert mb to 1000000 etc
            const multiplier = sizeMultiplier[(sizeParts[2]||'unit').toLowerCase()];

            return parseInt(sizeParts[1]) * multiplier;
        }
    }

    afterSetError(text) {
        if (text) {
            this.vdom.cn[5].cn = [{
                vtype : 'text',
                html  : text
            }];
        }
        else {
            this.vdom.cn[5].cn = [];
        }

        this.validate();
        this.update();
    }

    formatSize(bytes, separator = '', postFix = '') {
        if (bytes) {
            const
                sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'],
                i     = Math.min(parseInt(Math.floor(Math.log(bytes) / Math.log(1000)).toString(), 10), sizes.length - 1);

            return `${(bytes / (1000 ** i)).toFixed(i ? 1 : 0)}${separator}${sizes[i]}${postFix}`;
        }
        return 'n/a';
    }

    /**
     * @returns {Boolean}
     */
    validate() {
        const
            { cls } = this,
            isValid = this.isValid();

        _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].toggle(cls, 'neo-invalid', !isValid);
        this.cls = cls;

        return isValid;
    }

    isValid() {
        const me = this;

        return !me.error &&  !(me.state === 'ready' && me.required) ||
               (    (me.state === 'downloadable') ||
                    (me.state === 'not-downloadable')
               );
    }
}

Neo.setupClass(FileUpload);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (FileUpload);


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmtzL2FwcC92ZW5kb3JzLWV4YW1wbGVzX2Zvcm1fZmllbGRfZmlsZXVwbG9hZF9hcHBfbWpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXVFO0FBQ087QUFDSjtBQUNEOztBQUV6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixrRUFBcUI7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLHVCQUF1QixrRUFBVztBQUNsQztBQUNBLHdCQUF3Qiw0Q0FBNEM7QUFDcEU7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGtCQUFrQjtBQUMxQztBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBLDBCQUEwQixnRUFBSztBQUMvQjtBQUNBO0FBQ0Esb0NBQW9DLHNFQUFlO0FBQ25EO0FBQ0E7QUFDQSxvR0FBb0csV0FBVztBQUMvRyx1RkFBdUYsV0FBVztBQUNsRyxtRkFBbUYsV0FBVztBQUM5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLG9DQUFvQyxTQUFTO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixvQ0FBb0Msc0VBQWU7QUFDbkQ7QUFDQTtBQUNBLHdHQUF3RyxXQUFXO0FBQ25ILHVGQUF1RixXQUFXO0FBQ2xHLG1GQUFtRixXQUFXO0FBQzlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2Isb0NBQW9DLHNFQUFlO0FBQ25EO0FBQ0E7QUFDQSx1RkFBdUYsV0FBVztBQUNsRyx1RkFBdUYsV0FBVztBQUNsRyxtRkFBbUYsV0FBVztBQUM5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLG9DQUFvQyxzRUFBZTtBQUNuRDtBQUNBO0FBQ0EsNEZBQTRGLFdBQVc7QUFDdkcsdUZBQXVGLFdBQVc7QUFDbEcsbUZBQW1GLFdBQVc7QUFDOUY7QUFD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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxnQkFBZ0IsTUFBTTs7QUFFdEIsUUFBUSx1REFBUTtBQUNoQixRQUFRLHVEQUFRO0FBQ2hCLFFBQVEsdURBQVE7QUFDaEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0EsOENBQThDLEVBQUUsV0FBVztBQUMzRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUIsaUJBQWlCO0FBQ2xDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsc0JBQXNCLHlDQUF5QyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsUUFBUTtBQUNoRztBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsY0FBYyxNQUFNO0FBQ3BCOztBQUVBLFFBQVEsdURBQVE7QUFDaEI7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxpRUFBZSxVQUFVLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZW8ubWpzLy4vZXhhbXBsZXMvZm9ybS9maWVsZC9maWxldXBsb2FkL01haW5Db250YWluZXIubWpzIiwid2VicGFjazovL25lby5tanMvLi9leGFtcGxlcy9mb3JtL2ZpZWxkL2ZpbGV1cGxvYWQvYXBwLm1qcyIsIndlYnBhY2s6Ly9uZW8ubWpzLy4vc3JjL2Zvcm0vZmllbGQvRmlsZVVwbG9hZC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENvbmZpZ3VyYXRpb25WaWV3cG9ydCBmcm9tICcuLi8uLi8uLi9Db25maWd1cmF0aW9uVmlld3BvcnQubWpzJztcbmltcG9ydCBGaWxlVXBsb2FkRmllbGQgICAgICAgZnJvbSAnLi4vLi4vLi4vLi4vc3JjL2Zvcm0vZmllbGQvRmlsZVVwbG9hZC5tanMnO1xuaW1wb3J0IE51bWJlckZpZWxkICAgICAgICAgICBmcm9tICcuLi8uLi8uLi8uLi9zcmMvZm9ybS9maWVsZC9OdW1iZXIubWpzJztcbmltcG9ydCBQYW5lbCAgICAgICAgICAgICAgICAgIGZyb20gJy4uLy4uLy4uLy4uL3NyYy9jb250YWluZXIvUGFuZWwubWpzJztcblxuLyoqXG4gKiBAY2xhc3MgTmVvLmV4YW1wbGVzLmZvcm0uZmllbGQudGV4dC5NYWluQ29udGFpbmVyXG4gKiBAZXh0ZW5kcyBOZW8uZXhhbXBsZXMuQ29uZmlndXJhdGlvblZpZXdwb3J0XG4gKi9cbmNsYXNzIE1haW5Db250YWluZXIgZXh0ZW5kcyBDb25maWd1cmF0aW9uVmlld3BvcnQge1xuICAgIHN0YXRpYyBjb25maWcgPSB7XG4gICAgICAgIGNsYXNzTmFtZSAgICAgICAgICAgOiAnTmVvLmV4YW1wbGVzLmZvcm0uZmllbGQudGV4dC5NYWluQ29udGFpbmVyJyxcbiAgICAgICAgYXV0b01vdW50ICAgICAgICAgICA6IHRydWUsXG4gICAgICAgIGNvbmZpZ0l0ZW1MYWJlbFdpZHRoOiAxNjAsXG4gICAgICAgIGxheW91dCAgICAgICAgICAgICAgOiB7bnR5cGU6ICdoYm94JywgYWxpZ246ICdzdHJldGNoJ31cbiAgICB9XG5cbiAgICBjcmVhdGVDb25maWd1cmF0aW9uQ29tcG9uZW50cygpIHtcbiAgICAgICAgbGV0IG1lID0gdGhpcztcblxuICAgICAgICByZXR1cm4gW3tcbiAgICAgICAgICAgIG1vZHVsZSAgIDogTnVtYmVyRmllbGQsXG4gICAgICAgICAgICBsYWJlbFRleHQ6ICd3aWR0aCcsXG4gICAgICAgICAgICBsaXN0ZW5lcnM6IHtjaGFuZ2U6IG1lLm9uQ29uZmlnQ2hhbmdlLmJpbmQobWUsICd3aWR0aCcpfSxcbiAgICAgICAgICAgIG1heFZhbHVlIDogMzUwLFxuICAgICAgICAgICAgbWluVmFsdWUgOiAyMDAsXG4gICAgICAgICAgICBzdGVwU2l6ZSA6IDUsXG4gICAgICAgICAgICBzdHlsZSAgICA6IHttYXJnaW5Ub3A6ICcxMHB4J30sXG4gICAgICAgICAgICB2YWx1ZSAgICA6IG1lLmV4YW1wbGVDb21wb25lbnQud2lkdGhcbiAgICAgICAgfV07XG4gICAgfVxuXG4gICAgY3JlYXRlRXhhbXBsZUNvbXBvbmVudCgpIHtcbiAgICAgICAgcmV0dXJuIE5lby5jcmVhdGUoUGFuZWwsIHtcbiAgICAgICAgICAgIHN0eWxlIDogJ3BhZGRpbmc6MWVtJyxcbiAgICAgICAgICAgIGl0ZW1zIDogW3tcbiAgICAgICAgICAgICAgICBtb2R1bGUgICAgICAgICAgICA6IEZpbGVVcGxvYWRGaWVsZCxcbiAgICAgICAgICAgICAgICBpZCAgICAgICAgICAgICAgICA6ICdteS1kb3dubG9hZGFibGUtdGVzdCcsXG4gICAgICAgICAgICAgICAgdXBsb2FkVXJsICAgICAgICAgOiAnaHR0cDovLzEyNy4wLjAuMTozMDAwL2ZpbGUtdXBsb2FkLXRlc3QnLFxuICAgICAgICAgICAgICAgIGRvY3VtZW50U3RhdHVzVXJsIDogJ2h0dHA6Ly8xMjcuMC4wLjE6MzAwMC9kb2N1bWVudC1zdGF0dXMtZG93bmxvYWRhYmxlP2RvY3VtZW50SWQ9e2RvY3VtZW50SWR9JyxcbiAgICAgICAgICAgICAgICBkb2N1bWVudERlbGV0ZVVybCA6ICdodHRwOi8vMTI3LjAuMC4xOjMwMDAvZG9jdW1lbnQtZGVsZXRlP2RvY3VtZW50SWQ9e2RvY3VtZW50SWR9JyxcbiAgICAgICAgICAgICAgICBkb3dubG9hZFVybCAgICAgICA6ICdodHRwOi8vMTI3LjAuMC4xOjMwMDAvZ2V0RG9jdW1lbnQ/ZG9jdW1lbnRJZD17ZG9jdW1lbnRJZH0nLFxuICAgICAgICAgICAgICAgIHdpZHRoICAgICAgICAgICAgIDogMzUwLFxuICAgICAgICAgICAgICAgIG1heFNpemUgICAgICAgICAgIDogJzEwbWInLFxuICAgICAgICAgICAgICAgIHR5cGVzICAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgICAgICBwbmcgOiAxLFxuICAgICAgICAgICAgICAgICAgICBqcGcgOiAxLFxuICAgICAgICAgICAgICAgICAgICB4bHMgOiAxLFxuICAgICAgICAgICAgICAgICAgICBwZGYgOiAxXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnMgOiB7XG4gICAgICAgICAgICAgICAgICAgIGJlZm9yZVJlcXVlc3QoeyBoZWFkZXJzIH0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnNbJ1gtWFNSRi1UT0tFTiddID0gJ215LXhzcmYtdG9rZW4nXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgbW9kdWxlICAgICAgICAgICAgOiBGaWxlVXBsb2FkRmllbGQsXG4gICAgICAgICAgICAgICAgaWQgICAgICAgICAgICAgICAgOiAnbXktbm90LWRvd25sb2FkYWJsZS10ZXN0JyxcbiAgICAgICAgICAgICAgICB1cGxvYWRVcmwgICAgICAgICA6ICdodHRwOi8vMTI3LjAuMC4xOjMwMDAvZmlsZS11cGxvYWQtdGVzdCcsXG4gICAgICAgICAgICAgICAgZG9jdW1lbnRTdGF0dXNVcmwgOiAnaHR0cDovLzEyNy4wLjAuMTozMDAwL2RvY3VtZW50LXN0YXR1cy1ub3QtZG93bmxvYWRhYmxlP2RvY3VtZW50SWQ9e2RvY3VtZW50SWR9JyxcbiAgICAgICAgICAgICAgICBkb2N1bWVudERlbGV0ZVVybCA6ICdodHRwOi8vMTI3LjAuMC4xOjMwMDAvZG9jdW1lbnQtZGVsZXRlP2RvY3VtZW50SWQ9e2RvY3VtZW50SWR9JyxcbiAgICAgICAgICAgICAgICBkb3dubG9hZFVybCAgICAgICA6ICdodHRwOi8vMTI3LjAuMC4xOjMwMDAvZ2V0RG9jdW1lbnQ/ZG9jdW1lbnRJZD17ZG9jdW1lbnRJZH0nLFxuICAgICAgICAgICAgICAgIHdpZHRoICAgICAgICAgICAgIDogMzUwLFxuICAgICAgICAgICAgICAgIG1heFNpemUgICAgICAgICAgIDogJzEwbWInLFxuICAgICAgICAgICAgICAgIHR5cGVzICAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgICAgICBwbmcgOiAxLFxuICAgICAgICAgICAgICAgICAgICBqcGcgOiAxLFxuICAgICAgICAgICAgICAgICAgICB4bHMgOiAxLFxuICAgICAgICAgICAgICAgICAgICBwZGYgOiAxXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIG1vZHVsZSAgICAgICAgICAgIDogRmlsZVVwbG9hZEZpZWxkLFxuICAgICAgICAgICAgICAgIGlkICAgICAgICAgICAgICAgIDogJ215LXVwbG9hZC1mYWlsLXRlc3QnLFxuICAgICAgICAgICAgICAgIHVwbG9hZFVybCAgICAgICAgIDogJ2h0dHA6Ly8xMjcuMC4wLjE6MzAwMC9maWxlLXVwbG9hZC10ZXN0LWZhaWwnLFxuICAgICAgICAgICAgICAgIGRvY3VtZW50U3RhdHVzVXJsIDogJ2h0dHA6Ly8xMjcuMC4wLjE6MzAwMC9kb2N1bWVudC1zdGF0dXM/ZG9jdW1lbnRJZD17ZG9jdW1lbnRJZH0nLFxuICAgICAgICAgICAgICAgIGRvY3VtZW50RGVsZXRlVXJsIDogJ2h0dHA6Ly8xMjcuMC4wLjE6MzAwMC9kb2N1bWVudC1kZWxldGU/ZG9jdW1lbnRJZD17ZG9jdW1lbnRJZH0nLFxuICAgICAgICAgICAgICAgIGRvd25sb2FkVXJsICAgICAgIDogJ2h0dHA6Ly8xMjcuMC4wLjE6MzAwMC9nZXREb2N1bWVudD9kb2N1bWVudElkPXtkb2N1bWVudElkfScsXG4gICAgICAgICAgICAgICAgd2lkdGggICAgICAgICAgICAgOiAzNTAsXG4gICAgICAgICAgICAgICAgbWF4U2l6ZSAgICAgICAgICAgOiAnMTBtYicsXG4gICAgICAgICAgICAgICAgdHlwZXMgICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAgIHBuZyA6IDEsXG4gICAgICAgICAgICAgICAgICAgIGpwZyA6IDEsXG4gICAgICAgICAgICAgICAgICAgIHhscyA6IDEsXG4gICAgICAgICAgICAgICAgICAgIHBkZiA6IDFcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgbW9kdWxlICAgICAgICAgICAgOiBGaWxlVXBsb2FkRmllbGQsXG4gICAgICAgICAgICAgICAgaWQgICAgICAgICAgICAgICAgOiAnbXktc2Nhbi1mYWlsLXRlc3QnLFxuICAgICAgICAgICAgICAgIHVwbG9hZFVybCAgICAgICAgIDogJ2h0dHA6Ly8xMjcuMC4wLjE6MzAwMC9maWxlLXVwbG9hZC10ZXN0JyxcbiAgICAgICAgICAgICAgICBkb2N1bWVudFN0YXR1c1VybCA6ICdodHRwOi8vMTI3LjAuMC4xOjMwMDAvZG9jdW1lbnQtc3RhdHVzLWZhaWw/ZG9jdW1lbnRJZD17ZG9jdW1lbnRJZH0nLFxuICAgICAgICAgICAgICAgIGRvY3VtZW50RGVsZXRlVXJsIDogJ2h0dHA6Ly8xMjcuMC4wLjE6MzAwMC9kb2N1bWVudC1kZWxldGU/ZG9jdW1lbnRJZD17ZG9jdW1lbnRJZH0nLFxuICAgICAgICAgICAgICAgIGRvd25sb2FkVXJsICAgICAgIDogJ2h0dHA6Ly8xMjcuMC4wLjE6MzAwMC9nZXREb2N1bWVudD9kb2N1bWVudElkPXtkb2N1bWVudElkfScsXG4gICAgICAgICAgICAgICAgd2lkdGggICAgICAgICAgICAgOiAzNTAsXG4gICAgICAgICAgICAgICAgbWF4U2l6ZSAgICAgICAgICAgOiAnMTBtYicsXG4gICAgICAgICAgICAgICAgdHlwZXMgICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAgIHBuZyA6IDEsXG4gICAgICAgICAgICAgICAgICAgIGpwZyA6IDEsXG4gICAgICAgICAgICAgICAgICAgIHhscyA6IDEsXG4gICAgICAgICAgICAgICAgICAgIHBkZiA6IDFcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgbW9kdWxlICAgICAgICAgICAgOiBGaWxlVXBsb2FkRmllbGQsXG4gICAgICAgICAgICAgICAgaWQgICAgICAgICAgICAgICAgOiAnbXktZXhpc3RpbmctZG9jdW1lbnQtdGVzdCcsXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAgIGlkICAgICAgIDogMixcbiAgICAgICAgICAgICAgICAgICAgZmlsZU5hbWUgOiAndGVzdC5wZGYnLFxuICAgICAgICAgICAgICAgICAgICBzaXplICAgICA6IDEwNjY0ODg1LFxuICAgICAgICAgICAgICAgICAgICBzdGF0dXMgICA6ICdBVkFJTEFCTEUnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB1cGxvYWRVcmwgICAgICAgICA6ICdodHRwOi8vMTI3LjAuMC4xOjMwMDAvZmlsZS11cGxvYWQtdGVzdCcsXG4gICAgICAgICAgICAgICAgZG9jdW1lbnRTdGF0dXNVcmwgOiAnaHR0cDovLzEyNy4wLjAuMTozMDAwL2RvY3VtZW50LXN0YXR1cy1ub3QtZG93bmxvYWRhYmxlP2RvY3VtZW50SWQ9e2RvY3VtZW50SWR9JyxcbiAgICAgICAgICAgICAgICBkb2N1bWVudERlbGV0ZVVybCA6ICdodHRwOi8vMTI3LjAuMC4xOjMwMDAvZG9jdW1lbnQtZGVsZXRlP2RvY3VtZW50SWQ9e2RvY3VtZW50SWR9JyxcbiAgICAgICAgICAgICAgICBkb3dubG9hZFVybCAgICAgICA6ICdodHRwOi8vMTI3LjAuMC4xOjMwMDAvZ2V0RG9jdW1lbnQ/ZG9jdW1lbnRJZD17ZG9jdW1lbnRJZH0nLFxuICAgICAgICAgICAgICAgIHdpZHRoICAgICAgICAgICAgIDogMzUwLFxuICAgICAgICAgICAgICAgIG1heFNpemUgICAgICAgICAgIDogJzEwbWInLFxuICAgICAgICAgICAgICAgIHR5cGVzICAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgICAgICBwbmcgOiAxLFxuICAgICAgICAgICAgICAgICAgICBqcGcgOiAxLFxuICAgICAgICAgICAgICAgICAgICB4bHMgOiAxLFxuICAgICAgICAgICAgICAgICAgICBwZGYgOiAxXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIG1vZHVsZSAgICAgICAgICAgIDogRmlsZVVwbG9hZEZpZWxkLFxuICAgICAgICAgICAgICAgIGlkICAgICAgICAgICAgICAgIDogJ215LW5vbi1leGlzdGluZy1kb2N1bWVudC10ZXN0JyxcbiAgICAgICAgICAgICAgICBkb2N1bWVudCAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgICAgICAgaWQgICAgICAgOiAyLFxuICAgICAgICAgICAgICAgICAgICBmaWxlTmFtZSA6ICd0ZXN0LnBkZicsXG4gICAgICAgICAgICAgICAgICAgIHNpemUgICAgIDogMTA2NjQ4ODUsXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cyAgIDogJ0RFTEVURUQnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB1cGxvYWRVcmwgICAgICAgICA6ICdodHRwOi8vMTI3LjAuMC4xOjMwMDAvZmlsZS11cGxvYWQtdGVzdCcsXG4gICAgICAgICAgICAgICAgZG9jdW1lbnRTdGF0dXNVcmwgOiAnaHR0cDovLzEyNy4wLjAuMTozMDAwL2RvY3VtZW50LXN0YXR1cy1ub24tZXhpc3RlbnQ/ZG9jdW1lbnRJZD17ZG9jdW1lbnRJZH0nLFxuICAgICAgICAgICAgICAgIGRvY3VtZW50RGVsZXRlVXJsIDogJ2h0dHA6Ly8xMjcuMC4wLjE6MzAwMC9kb2N1bWVudC1kZWxldGU/ZG9jdW1lbnRJZD17ZG9jdW1lbnRJZH0nLFxuICAgICAgICAgICAgICAgIGRvd25sb2FkVXJsICAgICAgIDogJ2h0dHA6Ly8xMjcuMC4wLjE6MzAwMC9nZXREb2N1bWVudD9kb2N1bWVudElkPXtkb2N1bWVudElkfScsXG4gICAgICAgICAgICAgICAgd2lkdGggICAgICAgICAgICAgOiAzNTAsXG4gICAgICAgICAgICAgICAgbWF4U2l6ZSAgICAgICAgICAgOiAnMTBtYicsXG4gICAgICAgICAgICAgICAgdHlwZXMgICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAgIHBuZyA6IDEsXG4gICAgICAgICAgICAgICAgICAgIGpwZyA6IDEsXG4gICAgICAgICAgICAgICAgICAgIHhscyA6IDEsXG4gICAgICAgICAgICAgICAgICAgIHBkZiA6IDFcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgbW9kdWxlICAgICAgICAgICAgOiBGaWxlVXBsb2FkRmllbGQsXG4gICAgICAgICAgICAgICAgaWQgICAgICAgICAgICAgICAgOiAnbXktZmFpbGluZy1kb2N1bWVudC1zdGF0dXMtdGVzdCcsXG4gICAgICAgICAgICAgICAgdXBsb2FkVXJsICAgICAgICAgOiAnaHR0cDovLzEyNy4wLjAuMTozMDAwL2ZpbGUtdXBsb2FkLXRlc3QnLFxuICAgICAgICAgICAgICAgIGRvY3VtZW50U3RhdHVzVXJsIDogJ2h0dHA6Ly8xMjcuMC4wLjE6MzAwMC9kb2N1bWVudC1zdGF0dXMtZmFpbHM/ZG9jdW1lbnRJZD17ZG9jdW1lbnRJZH0nLFxuICAgICAgICAgICAgICAgIGRvY3VtZW50RGVsZXRlVXJsIDogJ2h0dHA6Ly8xMjcuMC4wLjE6MzAwMC9kb2N1bWVudC1kZWxldGU/ZG9jdW1lbnRJZD17ZG9jdW1lbnRJZH0nLFxuICAgICAgICAgICAgICAgIGRvd25sb2FkVXJsICAgICAgIDogJ2h0dHA6Ly8xMjcuMC4wLjE6MzAwMC9nZXREb2N1bWVudD9kb2N1bWVudElkPXtkb2N1bWVudElkfScsXG4gICAgICAgICAgICAgICAgd2lkdGggICAgICAgICAgICAgOiAzNTAsXG4gICAgICAgICAgICAgICAgbWF4U2l6ZSAgICAgICAgICAgOiAnMTBtYicsXG4gICAgICAgICAgICAgICAgdHlwZXMgICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAgIHBuZyA6IDEsXG4gICAgICAgICAgICAgICAgICAgIGpwZyA6IDEsXG4gICAgICAgICAgICAgICAgICAgIHhscyA6IDEsXG4gICAgICAgICAgICAgICAgICAgIHBkZiA6IDFcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XVxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbk5lby5zZXR1cENsYXNzKE1haW5Db250YWluZXIpO1xuXG5leHBvcnQgZGVmYXVsdCBNYWluQ29udGFpbmVyO1xuIiwiaW1wb3J0IE1haW5Db250YWluZXIgZnJvbSAnLi9NYWluQ29udGFpbmVyLm1qcyc7XG5cbmV4cG9ydCBjb25zdCBvblN0YXJ0ID0gKCkgPT4gTmVvLmFwcCh7XG4gICAgbWFpblZpZXc6IE1haW5Db250YWluZXIsXG4gICAgbmFtZSAgICA6ICdOZW8uZXhhbXBsZXMuZm9ybS5maWVsZC5maWxldXBsb2FkJ1xufSk7XG4iLCJpbXBvcnQgQmFzZSAgICAgICAgIGZyb20gJy4uLy4uL2Zvcm0vZmllbGQvQmFzZS5tanMnO1xuaW1wb3J0IE5lb0FycmF5ICAgICBmcm9tICcuLi8uLi91dGlsL0FycmF5Lm1qcyc7XG5pbXBvcnQgU3RyaW5nVXRpbCAgIGZyb20gJy4uLy4uL3V0aWwvU3RyaW5nLm1qcyc7XG5cbmNvbnN0XG4gICAgc2l6ZVJFICAgICAgICAgICA9IC9eKFxcZCspKGtifG1ifGdiKT8kL2ksXG4gICAgc2l6ZU11bHRpcGxpZXIgICA9IHtcbiAgICAgICAgdW5pdCA6IDEsXG4gICAgICAgIGtiICAgOiAxMDAwLFxuICAgICAgICBtYiAgIDogMTAwMDAwMCxcbiAgICAgICAgZ2IgICA6IDEwMDAwMDAwMDBcbiAgICB9LFxuICAgIGh0dHBTdWNjZXNzQ29kZXMgPSB7XG4gICAgICAgIDIgOiAxLFxuICAgICAgICA0IDogMVxuICAgIH07XG5cbi8qKlxuICogQW4gYWNjZXNzaWJsZSBmaWxlIHVwbG9hZGluZyB3aWRnZXQgd2hpY2ggYXV0b21hdGljYWxseSBjb21tZW5jZXMgYW4gdXBsb2FkIGFzIHNvb24gYXNcbiAqIGEgZmlsZSBpcyBzZWxlY3RlZCB1c2luZyB0aGUgVUkuXG4gKlxuICogVGhlIFVSTCB0byB3aGljaCB0aGUgZmlsZSBtdXN0IGJlIHVwbG9hZGVkIGlzIHNwZWNpZmllZCBpbiB0aGUge0BsaW5rIGNvbmZpZyN1cGxvYWRVcmx9IHByb3BlcnR5LlxuICogVGhpcyBzZXJ2aWNlIG11c3QgcmV0dXJuIGEgSlNPTiBzdGF0dXMgcmVzcG9uc2UgaW4gdGhlIGZvbGxvd2luZyBmb3JtIGZvciBzdWNjZXNzZnVsIHVwbG9hZHM6XG4gKlxuICogYGBganNvblxuICoge1xuICogICAgIFwic3VjY2Vzc1wiIDogdHJ1ZSxcbiAqICAgICBcImRvY3VtZW50SWRcIiA6IDFcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEFuZCB0aGUgZm9sbG93aW5nIGZvcm0gZm9yIHVuc3VjY2Vzc2Z1bCB1cGxvYWRzOlxuICpcbiAqIGBgYGpzb25cbiAqIHtcbiAqICAgICBcInN1Y2Nlc3NcIiA6IGZhbHNlLFxuICogICAgIFwibWVzc2FnZVwiIDogXCJXaHkgdGhlIHVwbG9hZCB3YXMgcmVqZWN0ZWRcIlxuICogfVxuICogYGBgXG4gKlxuICogVGhlIG5hbWUgb2YgdGhlIGBkb2N1bWVudElkYCBwcm9wZXJ0eSBpcyBjb25maWd1cmVkIGluIHtAbGluayAjbWVtYmVyLWRvY3VtZW50SWRQYXJhbWV0ZXJ9LlxuICogSXQgZGVmYXVsdHMgdG8gYCdkb2N1bWVudElkJ2AuXG4gKlxuICogVGhlIGBkb2N1bWVudElkYCBpcyB1c2VkIHdoZW4gcmVxdWVzdGluZyB0aGUgZG9jdW1lbnQgbWFsd2FyZSBzY2FuIHN0YXR1cywgYW5kIHdoZW4gcmVxdWVzdGluZ1xuICogdGhhdCB0aGUgZG9jdW1lbnQgYmUgZGVsZXRlZCwgb3IgZG93bmxvYWRlZC5cbiAqXG4gKiBJZiB0aGUgdXBsb2FkIGlzIHN1Y2Nlc3NmdWwsIHRoZW4gdGhlIHtAbGluayAjbWVtYmVyLWRvY3VtZW50U3RhdHVzVXJsfSBpcyBwb2xsZWQgdW50aWwgdGhlXG4gKiBtYWx3YXJlIHNjYW4uIFRoZSBkb2N1bWVudCBpZCByZXR1cm5lZCBmcm9tIHRoZSB1cGxvYWQgaXMgcGFzc2VkIGluIHRoZSBwYXJhbWV0ZXIgbmFtZWRcbiAqIGJ5IHRoZSB7QGxpbmsgI21lbWJlci1kb2N1bWVudElkUGFyYW1ldGVyfS4gSXQgZGVmYXVsdHMgdG8gYCdkb2N1bWVudElkJ2AuXG4gKlxuICogVGhpcyBzZXJ2aWNlIG11c3QgcmV0dXJuIGEgSlNPTiBzdGF0dXMgcmVzcG9uc2UgaW4gdGhlIGZvbGxvd2luZyBpZiB0aGUgc2NhbiBpcyBzdGlsbCBwcm9ncmVzc2luZzpcbiAqXG4gKiBgYGBqc29uXG4gKiB7XG4gKiAgICAgXCJzdGF0dXNcIiA6IFwic2Nhbm5pbmdcIlxuICogfVxuICogYGBgXG4gKlxuICogQW5kIHRoZSBmb2xsb3dpbmcgZm9ybSBpcyBtYWx3YXJlIHdhcyBkZXRlY3RlZDpcbiAqXG4gKiBgYGBqc29uXG4gKiB7XG4gKiAgICAgXCJzdGF0dXNcIiA6IFwic2Nhbi1mYWlsZWRcIlxuICogfVxuICogYGBgXG4gKlxuICogQWZ0ZXIgYSBzdWNjZXNzZnVsIHNjYW4sIGEgZG9jdW1lbnQgbWF5IG9yIG1heSBub3QgYmUgZG93bmxvYWRhYmxlLlxuICpcbiAqIEZvciBhIGRvd25sb2FkYWJsZSBkb2N1bWVudCwgdGhlIHJlc3BvbnNlIG11c3QgYmU6XG4gKlxuICogYGBganNvblxuICoge1xuICogICAgIFwic3RhdHVzXCIgOiBcImRvd25sb2FkYWJsZVwiXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBGb3IgYSBub24tZG93bmxvYWRhYmxlIGRvY3VtZW50LCB0aGUgcmVzcG9uc2UgbXVzdCBiZTpcbiAqXG4gKiBgYGBqc29uXG4gKiB7XG4gKiAgICAgXCJzdGF0dXNcIiA6IFwibm90LWRvd25sb2FkYWJsZVwiXG4gKiB9XG4gKiBgYGBcbiAqIEBjbGFzcyBOZW8uZm9ybS5maWVsZC5GaWxlVXBsb2FkXG4gKiBAZXh0ZW5kcyBOZW8uZm9ybS5maWVsZC5CYXNlXG4gKi9cbmNsYXNzIEZpbGVVcGxvYWQgZXh0ZW5kcyBCYXNlIHtcbiAgICBzdGF0aWMgY29uZmlnID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBjbGFzc05hbWU9J05lby5mb3JtLmZpZWxkLkZpbGVVcGxvYWQnXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIGNsYXNzTmFtZTogJ05lby5mb3JtLmZpZWxkLkZpbGVVcGxvYWQnLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBudHlwZT0nZmlsZS11cGxvYWQtZmllbGQnXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIG50eXBlOiAnZmlsZS11cGxvYWQtZmllbGQnLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nW119IGJhc2VDbHM9WyduZW8tZmlsZS11cGxvYWQtZmllbGQnXVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBiYXNlQ2xzOiBbJ25lby1maWxlLXVwbG9hZC1maWVsZCddLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nW119IGNscz1bJ25lby1maWVsZC1lbXB0eSddXG4gICAgICAgICAqL1xuICAgICAgICBjbHM6IFsnbmVvLWZpZWxkLWVtcHR5J10sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3R9IF92ZG9tXG4gICAgICAgICAqL1xuICAgICAgICBfdmRvbTpcbiAgICAgICAge2NuOiBbXG4gICAgICAgICAgICB7dGFnOiAnaScsIGNsczogJ25lby1maWxlLXVwbG9hZC1zdGF0ZS1pY29uJ30sXG4gICAgICAgICAgICB7Y2xzOiAnbmVvLWZpbGUtdXBsb2FkLWJvZHknLCBjbjogW1xuICAgICAgICAgICAgICAgIHtjbHM6ICduZW8tZmlsZS11cGxvYWQtZmlsZW5hbWUnfSxcbiAgICAgICAgICAgICAgICB7Y2xzOiAnbmVvLWZpbGUtdXBsb2FkLXN0YXRlJ31cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge3RhZzogJ2J1dHRvbicsIGNsczogJ25lby1maWxlLXVwbG9hZC1hY3Rpb24tYnV0dG9uJ30sXG4gICAgICAgICAgICB7dGFnOiAnaW5wdXQnLCBjbHM6ICduZW8tZmlsZS11cGxvYWQtaW5wdXQnLCB0eXBlOiAnZmlsZSd9LFxuICAgICAgICAgICAge3RhZzogJ2xhYmVsJywgY2xzOiAnbmVvLWZpbGUtdXBsb2FkLWxhYmVsJ30sXG4gICAgICAgICAgICB7Y2xzOiAnbmVvLWZpbGUtdXBsb2FkLWVycm9yLW1lc3NhZ2UnfVxuICAgICAgICBdfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQW4gT2JqZWN0IGNvbnRhaW5pbmcgYSBkZWZhdWx0IHNldCBvZiBoZWFkZXJzIHRvIGJlIHBhc3NlZCB0byB0aGUgc2VydmVyIG9uIGV2ZXJ5IEhUVFAgcmVxdWVzdC5cbiAgICAgICAgICogQG1lbWJlciB7T2JqZWN0fSBoZWFkZXJzXG4gICAgICAgICAqL1xuICAgICAgICBoZWFkZXJzXzoge30sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIE9iamVjdCB3aGljaCBhbGxvd3MgdGhlIHN0YXR1cyB0ZXh0IHJldHVybmVkIGZyb20gdGhlIHtAbGluayAjcHJvcGVydHktZG9jdW1lbnRTdGF0dXNVcmx9IHRvIGJlXG4gICAgICAgICAqIG1hcHBlZCB0byB0aGUgY29ycmVzcG9uZGluZyBuZXh0IHdpZGdldCBzdGF0ZS5cbiAgICAgICAgICogQG1lbWJlciB7T2JqZWN0fSBkb2N1bWVudFN0YXR1c01hcFxuICAgICAgICAgKi9cbiAgICAgICAgZG9jdW1lbnRTdGF0dXNNYXA6IHtcbiAgICAgICAgICAgIFNDQU5OSU5HICAgICAgICAgOiAnc2Nhbm5pbmcnLFxuXG4gICAgICAgICAgICAvLyBUaGUgc2VydmVyIGRvaW5nIGl0cyBvd24gc2Vjb25kYXJ5IHVwbG9hZCB0byB0aGUgZmluYWwgc3RvcmFnZSBsb2NhdGlvbiBtYXkgcmV0dXJuIHRoaXMuXG4gICAgICAgICAgICAvLyBXZSBlbnRlciB0aGUgc2FtZSBzdGF0ZSBhcyBzY2FubmluZy4gQSBzcGlubmVyIHNob3dzIGZvciB0aGUgZHVyYXRpb24gb2YgdGhpcyBzdGF0ZVxuICAgICAgICAgICAgVVBMT0FESU5HICAgICAgIDogJ3NjYW5uaW5nJyxcblxuICAgICAgICAgICAgTUFMV0FSRV9ERVRFQ1RFRDogJ3NjYW4tZmFpbGVkJyxcbiAgICAgICAgICAgIFVOX0RPV05MT0FEQUJMRSA6ICdub3QtZG93bmxvYWRhYmxlJyxcbiAgICAgICAgICAgIEFWQUlMQUJMRSAgICAgICA6ICdub3QtZG93bmxvYWRhYmxlJyxcbiAgICAgICAgICAgIERPV05MT0FEQUJMRSAgICA6ICdkb3dubG9hZGFibGUnLFxuICAgICAgICAgICAgREVMRVRFRCAgICAgICAgIDogJ2RlbGV0ZWQnLFxuICAgICAgICAgICAgRVJST1IgICAgICAgICAgIDogJ2Vycm9yJ1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd8bnVsbH0gZG9jdW1lbnRfPW51bGxcbiAgICAgICAgICovXG4gICAgICAgIGRvY3VtZW50XzogbnVsbCxcblxuICAgICAgICAvKipcbiAgICAgICAgICogSWYgdGhpcyB3aWRnZXQgc2hvdWxkIHJlZmVyZW5jZSBhbiBleGlzdGluZyBkb2N1bWVudCwgY29uZmlndXJlIHRoZSB3aWRnZXQgd2l0aCBhIGRvY3VtZW50SWRcbiAgICAgICAgICogc28gdGhhdCBpdCBjYW4gaW5pdGlhbGl6ZSBpbiB0aGUgY29ycmVjdCBcInVwbG9hZGVkXCIgc3RhdGUuXG4gICAgICAgICAqXG4gICAgICAgICAqIElmIHRoaXMgaXMgKm5vdCogY29uZmlndXJlZCwgdGhlbiB0aGlzIHByb3BlcnR5IHdpbGwgYmUgc2V0IGFmdGVyIGEgc3VjY2Vzc2Z1bCB1cGxvYWQgdG9cbiAgICAgICAgICogdGhlIGlkIHJldHVybmVkIGZyb20gdGhlIHtAbGluayAjcHJvcGVydHktdXBsb2FkVXJsfS5cbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfE51bWJlcn0gZG9jdW1lbnRJZFxuICAgICAgICAgKi9cbiAgICAgICAgZG9jdW1lbnRJZDogbnVsbCxcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIFVSTCBvZiB0aGUgZmlsZSB1cGxvYWQgc2VydmljZSB0byB3aGljaCB0aGUgc2VsZWN0ZWQgZmlsZSBpcyBzZW50LlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGlzIHNlcnZpY2UgbXVzdCByZXR1cm4gYSBKU09OIHJlc3BvbnNlIG9mIHRoZSBmb3JtOlxuICAgICAgICAgKlxuICAgICAgICAgKiBgYGBqc29uXG4gICAgICAgICAqIHtcbiAgICAgICAgICogICAgIFwic3VjY2Vzc1wiICAgIDogdHJ1ZSxcbiAgICAgICAgICogICAgIFwibWVzc2FnZVwiICAgIDogXCJPbmx5IG5lZWRlZCBpZiB0aGUgc3VjY2VzcyBwcm9wZXJ0eSBpcyBmYWxzZVwiLFxuICAgICAgICAgKiAgICAgXCJkb2N1bWVudElkXCIgOiAxXG4gICAgICAgICAqIH1cbiAgICAgICAgICogYGBgXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoZSBkb2N1bWVudCBpZCBpcyBuZWVkZWQgc28gdGhhdCB0aGlzIHdpZGdldCBjYW4gZm9sbG93IHVwIGFuZCByZXF1ZXN0IHRoZSByZXN1bHRzIG9mIHRoZVxuICAgICAgICAgKiBzY2FuIG9wZXJhdGlvbiB0byBzZWUgaWYgdGhlIGZpbGUgd2FzIGFjY2VwdGVkLCBhbmQgd2hldGhlciBpdCBpcyB0byBiZSBzdWJzZXF1ZW50bHkgZG93bmxvYWRhYmxlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGUgZG9jdW1lbnQgc3RhdHVzIHJlcXVlc3QgVVJMIG11c3QgYmUgY29uZmlndXJlZCBpbiB7QGxpbmsgI21lbWJlci1kb2N1bWVudFN0YXR1c1VybH1cbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfG51bGx9IHVwbG9hZFVybD1udWxsXG4gICAgICAgICAqL1xuICAgICAgICB1cGxvYWRVcmw6IG51bGwsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBuYW1lIG9mIHRoZSBKU09OIHByb3BlcnR5IGluIHdoaWNoIHRoZSBkb2N1bWVudCBpZCBpcyByZXR1cm5lZCBpbiB0aGUgdXBsb2FkIHJlc3BvbnNlXG4gICAgICAgICAqIEpTT04gcGFja2V0IGFuZCB0aGUgdG9rZW4gc3RyaW5nIHdoaWNoIGlzIHN1YnN0aXR1dGVkIGZvciB0aGUgZG9jdW1lbnQgaWQgd2hlbiByZXF1ZXN0aW5nXG4gICAgICAgICAqIGEgbWFsd2FyZSBzY2FuIGFuZCBhIGRvY3VtZW50IGRlbGV0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBEZWZhdWx0cyBmcm8gYGRvY3VtZW50SWRgXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gZG9jdW1lbnRJZFBhcmFtZXRlcj0nZG9jdW1lbnRJZCdcbiAgICAgICAgICovXG4gICAgICAgIGRvY3VtZW50SWRQYXJhbWV0ZXI6ICdkb2N1bWVudElkJyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIFVSTCBmcm9tIHdoaWNoIHRoZSBmaWxlIG1heSBiZSBkb3dubG9hZGVkIGFmdGVyIGl0IGhhcyBmaW5pc2hlZCBpdHMgc2Nhbi5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhpcyBtdXN0IGNvbnRhaW4gYSBzdWJzdGl0dXRpb24gdG9rZW4gbmFtZWQgdGhlIHNhbWUgYXMgdGhlIHtAbGluayAjcHJvcGVydHktZG9jdW1lbnRJZFBhcmFtZXRlcn1cbiAgICAgICAgICogd2hpY2ggaXMgdXNlZCB3aGVuIGNyZWF0aW5nIGEgVVJMXG4gICAgICAgICAqXG4gICAgICAgICAqIGZvciBleGFtcGxlOlxuICAgICAgICAgKlxuICAgICAgICAgKiBgYGBqc29uXG4gICAgICAgICAqIHtcbiAgICAgICAgICogICAgIGRvd25sb2FkVXJsIDogJy9nZXREb2N1bWVudC8ke2RvY3VtZW50SWR9J1xuICAgICAgICAgKiB9XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGUgZG9jdW1lbnQgaWQgcmV0dXJuZWQgZnJvbSB0aGUge0BsaW5rICNtZW1iZXItdXBsb2FkVXJsIHVwbG9hZH0gaXMgcGFzc2VkIGluIHRoZSBwYXJhbWV0ZXIgbmFtZWRcbiAgICAgICAgICogYnkgdGhlIHtAbGluayAjbWVtYmVyLWRvY3VtZW50SWRQYXJhbWV0ZXJ9LiBJdCBkZWZhdWx0cyB0byBgJ2RvY3VtZW50SWQnYC5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfG51bGx9IGRvd25sb2FkVXJsXz1udWxsXG4gICAgICAgICAqL1xuICAgICAgICBkb3dubG9hZFVybF86IG51bGwsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBVUkwgb2YgdGhlIGZpbGUgc3RhdHVzIHJlcG9ydGluZyBzZXJ2aWNlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGlzIG11c3QgY29udGFpbiBhIHN1YnN0aXR1dGlvbiB0b2tlbiBuYW1lZCB0aGUgc2FtZSBhcyB0aGUge0BsaW5rICNwcm9wZXJ0eS1kb2N1bWVudElkUGFyYW1ldGVyfVxuICAgICAgICAgKiB3aGljaCBpcyB1c2VkIHdoZW4gY3JlYXRpbmcgYSBVUkxcbiAgICAgICAgICpcbiAgICAgICAgICogZm9yIGV4YW1wbGU6XG4gICAgICAgICAqXG4gICAgICAgICAqIGBgYGpzb25cbiAgICAgICAgICoge1xuICAgICAgICAgKiAgICAgZG9jdW1lbnRTdGF0dXNVcmwgOiAnL2dldERvY3VtZW50U3RhdHVzLyR7ZG9jdW1lbnRJZH0nXG4gICAgICAgICAqIH1cbiAgICAgICAgICogYGBgXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoaXMgd2lkZ2V0IHdpbGwgdXNlIHRoaXMgc2VydmljZSBhZnRlciBhIHN1Y2Nlc3NmdWwgdXBsb2FkIHRvIGRldGVybWluZSBpdHMgbmV4dFxuICAgICAgICAgKiBzdGF0ZS5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhpcyBzZXJ2aWNlIG11c3QgcmV0dXJuIGEgSlNPTiByZXNwb25zZSBvZiB0aGUgZm9ybTpcbiAgICAgICAgICpcbiAgICAgICAgICogYGBganNvblxuICAgICAgICAgKiB7XG4gICAgICAgICAqICAgICBcInN0YXR1c1wiIDogXCJzY2FubmluZ1wiIG9yIFwic2Nhbi1mYWlsZWRcIiBvciBcImRvd25sb2FkYWJsZSBvciBcIm5vdC1kb3dubG9hZGFibGVcIlxuICAgICAgICAgKiB9XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd8bnVsbH0gZG9jdW1lbnRTdGF0dXNVcmxfPW51bGxcbiAgICAgICAgICovXG4gICAgICAgIGRvY3VtZW50U3RhdHVzVXJsXzogbnVsbCxcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHBvbGxpbmcgaW50ZXJ2YWwgKmluIG1pbGxpc2Vjb25kcyogdG8gd2FpdCBiZXR3ZWVuIGFza2luZyB0aGUgc2VydmVyIGhvdyB0aGUgZG9jdW1lbnQgc2NhblxuICAgICAgICAgKiBpcyBwcm9jZWVkaW5nLlxuICAgICAgICAgKlxuICAgICAgICAgKiBEZWZhdWx0cyB0byAyMDAwbXNcbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7TnVtYmVyfSBzdGF0dXNTY2FuSW50ZXJ2YWw9MjAwMFxuICAgICAgICAgKi9cbiAgICAgICAgc3RhdHVzU2NhbkludGVydmFsOiAyMDAwLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgVVJMIG9mIHRoZSBmaWxlIGRlbGV0aW9uIHNlcnZpY2UuXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoaXMgbXVzdCBjb250YWluIGEgc3Vic3RpdHV0aW9uIHRva2VuIG5hbWVkIHRoZSBzYW1lIGFzIHRoZSB7QGxpbmsgI3Byb3BlcnR5LWRvY3VtZW50SWRQYXJhbWV0ZXJ9XG4gICAgICAgICAqIHdoaWNoIGlzIHVzZWQgd2hlbiBjcmVhdGluZyBhIFVSTFxuICAgICAgICAgKlxuICAgICAgICAgKiBmb3IgZXhhbXBsZTpcbiAgICAgICAgICpcbiAgICAgICAgICogYGBganNvblxuICAgICAgICAgKiB7XG4gICAgICAgICAqICAgICBkb2N1bWVudERlbGV0ZVVybCA6ICcvZGVsZXRlRG9jdW1lbnQvJHtkb2N1bWVudElkfSdcbiAgICAgICAgICogfVxuICAgICAgICAgKiBgYGBcbiAgICAgICAgICpcbiAgICAgICAgICogVGhpcyB3aWRnZXQgd2lsbCB1c2UgdGhpcyBzZXJ2aWNlIGFmdGVyIGEgc3VjY2Vzc2Z1bCB1cGxvYWQgdG8gZGV0ZXJtaW5lIGl0cyBuZXh0XG4gICAgICAgICAqIHN0YXRlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBJZiB0aGlzIHNlcnZpY2UgeWllbGRzIGFuIEhUVFAgMjAwIHN0YXR1cywgdGhlIGRlbGV0aW9uIGlzIHRha2VuIHRvIGhhdmUgYmVlbiBzdWNjZXNzZnVsLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd8bnVsbH0gZG9jdW1lbnREZWxldGVVcmxfPW51bGxcbiAgICAgICAgICovXG4gICAgICAgIGRvY3VtZW50RGVsZXRlVXJsXzogbnVsbCxcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIEhUVFAgbWV0aG9kIHRvIHVzZSB3aGVuIHJlcXVlc3RpbmcgYSBkb2N1bWVudCBkZWxldGlvbiB1c2luZyB0aGUge0BsaW5rICNtZW1iZXItZG9jdW1lbnREZWxldGVVcmx9LlxuICAgICAgICAgKlxuICAgICAgICAgKiBEZWZhdWx0cyB0byBgREVMRVRFYC5cbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBkb2N1bWVudERlbGV0ZU1ldGhvZD0nREVMRVRFJ1xuICAgICAgICAgKi9cbiAgICAgICAgZG9jdW1lbnREZWxldGVNZXRob2Q6ICdERUxFVEUnLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IHN0YXRlXz1yZWFkeVxuICAgICAgICAgKi9cbiAgICAgICAgc3RhdGVfOiAncmVhZHknLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3R9IHR5cGVzPW51bGxcbiAgICAgICAgICovXG4gICAgICAgIHR5cGVzXzogbnVsbCxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfE51bWJlcnxudWxsfSBtYXhTaXplPW51bGxcbiAgICAgICAgICovXG4gICAgICAgIG1heFNpemVfOiBudWxsLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgZXJyb3IgdGV4dCB0byBzaG93IGJlbG93IHRoZSB3aWRnZXRcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfG51bGx9IGVycm9yXz1udWxsXG4gICAgICAgICAqL1xuICAgICAgICBlcnJvcl8gOiBudWxsLFxuXG4gICAgICAgIC8vIFVJIHN0cmluZ3Mgd2hpY2ggY2FuIGJlIG92ZXJyaWRkZW4gZm9yIG90aGVyIGxhbmd1YWdlc1xuICAgICAgICBjaG9vc2VGaWxlICAgICAgICAgICA6ICdDaG9vc2UgZmlsZScsXG4gICAgICAgIGRvY3VtZW50VGV4dCAgICAgICAgIDogJ0RvY3VtZW50JyxcbiAgICAgICAgaW52YWxpZEZpbGVGb3JtYXQgICAgOiAnaW52YWxpZCBmaWxlIGZvcm1hdCcsXG4gICAgICAgIHBsZWFzZVVzZVRoZXNlVHlwZXMgIDogJ1BsZWFzZSB1c2UgdGhlc2UgZmlsZSB0eXBlcyB7YWxsb3dlZEZpbGVUeXBlc30nLFxuICAgICAgICBmaWxlU2l6ZU1vcmVUaGFuICAgICA6ICdGaWxlIHNpemUgZXhjZWVkcyB7YWxsb3dlZEZpbGVTaXplfScsXG4gICAgICAgIHVwbG9hZEVycm9yICAgICAgICAgIDogJ1BsZWFzZSB0cnkgYWdhaW4nLFxuICAgICAgICBkb2N1bWVudERlbGV0ZUVycm9yICA6ICdEb2N1bWVudCBkZWxldGUgc2VydmljZSBlcnJvcicsXG4gICAgICAgIGlzTm9Mb25nZXJBdmFpbGFibGUgIDogJ2lzIG5vIGxvbmdlciBhdmFpbGFibGUnLFxuICAgICAgICBkb2N1bWVudFN0YXR1c0Vycm9yICA6ICdEb2N1bWVudCBzdGF0dXMgc2VydmljZSBlcnJvcicsXG4gICAgICAgIHVwbG9hZEZhaWxlZCAgICAgICAgIDogJ1VwbG9hZCBmYWlsZWQnLFxuICAgICAgICBzY2FubmluZyAgICAgICAgICAgICA6ICdTY2FubmluZycsXG4gICAgICAgIHVwbG9hZGluZyAgICAgICAgICAgIDogJ1VwbG9hZGluZy4uLicsXG4gICAgICAgIG1hbHdhcmVGb3VuZEluRmlsZSAgIDogJ01hbHdhcmUgZm91bmQgaW4gZmlsZScsXG4gICAgICAgIHBsZWFzZUNoZWNrICAgICAgICAgIDogJ1BsZWFzZSBjaGVjayB0aGUgZmlsZSBhbmQgdHJ5IGFnYWluJyxcbiAgICAgICAgc3VjY2Vzc2Z1bGx5VXBsb2FkZWQgOiAnU3VjY2Vzc2Z1bGx5IHVwbG9hZGVkJyxcbiAgICAgICAgZmlsZVdhc0RlbGV0ZWQgICAgICAgOiAnRmlsZSB3YXMgZGVsZXRlZCcsXG4gICAgICAgIGZpbGVJc0luQW5FcnJvclN0YXRlIDogJ0ZpbGUgaXMgaW4gYW4gZXJyb3Igc3RhdGUnXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ1xuICAgICAqL1xuICAgIGNvbnN0cnVjdChjb25maWcpIHtcbiAgICAgICAgc3VwZXIuY29uc3RydWN0KGNvbmZpZyk7XG5cbiAgICAgICAgY29uc3QgbWUgPSB0aGlzO1xuXG4gICAgICAgIG1lLmFkZERvbUxpc3RlbmVycyhbXG4gICAgICAgICAgICB7IGlucHV0IDogbWUub25JbnB1dFZhbHVlQ2hhbmdlLCBzY29wZTogbWV9LFxuICAgICAgICAgICAgeyBjbGljayA6IG1lLm9uQWN0aW9uQnV0dG9uQ2xpY2ssIGRlbGVnYXRlIDogJy5uZW8tZmlsZS11cGxvYWQtYWN0aW9uLWJ1dHRvbicsIHNjb3BlIDogbWV9XG4gICAgICAgIF0pO1xuICAgIH1cblxuICAgIGFmdGVyU2V0SWQodmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGlucHV0RWxJZCA9IGAke3RoaXMuaWR9LWlucHV0YDtcblxuICAgICAgICB0aGlzLmdldElucHV0RWwoKS5pZCA9ICB0aGlzLnZkb20uY25bNF0uZm9yID0gaW5wdXRFbElkO1xuXG4gICAgICAgIC8vIHNpbGVudCB2ZG9tIHVwZGF0ZSwgdGhlIHN1cGVyIGNhbGwgd2lsbCB0cmlnZ2VyIHRoZSBlbmdpbmVcbiAgICAgICAgc3VwZXIuYWZ0ZXJTZXRJZD8uKHZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgfVxuXG4gICAgb25Db25zdHJ1Y3RlZCgpIHtcbiAgICAgICAgc3VwZXIub25Db25zdHJ1Y3RlZCguLi5hcmd1bWVudHMpO1xuXG4gICAgICAgIHRoaXMudmRvbS5jbls0XS5odG1sID0gdGhpcy5jaG9vc2VGaWxlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgICovXG4gICAgZ2V0SW5wdXRFbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmRvbS5jblszXTtcbiAgICB9XG5cbiAgICBhc3luYyBjbGVhcigpIHtcbiAgICAgICAgY29uc3RcbiAgICAgICAgICAgIG1lICAgICAgPSB0aGlzLFxuICAgICAgICAgICAgeyBjbHMgfSA9IG1lO1xuXG4gICAgICAgIE5lb0FycmF5LmFkZChjbHMsICduZW8tZmllbGQtZW1wdHknKTtcbiAgICAgICAgbWUuY2xzID0gY2xzO1xuXG4gICAgICAgIG1lLnZkb20uY25bM10gPSB7XG4gICAgICAgICAgICBpZCAgICA6IGAke21lLmlkfS1pbnB1dGAsXG4gICAgICAgICAgICBjbHMgICA6ICduZW8tZmlsZS11cGxvYWQtaW5wdXQnLFxuICAgICAgICAgICAgdGFnICAgOiAnaW5wdXQnLFxuICAgICAgICAgICAgdHlwZSAgOiAnZmlsZScsXG4gICAgICAgICAgICB2YWx1ZSA6ICcnXG4gICAgICAgIH07XG4gICAgICAgIG1lLnN0YXRlID0gJ3JlYWR5JztcbiAgICAgICAgbWUuZXJyb3IgPSAnJztcbiAgICAgICAgbWUuZmlsZSA9IG1lLmRvY3VtZW50ID0gbnVsbDtcblxuICAgICAgICAvLyBXZSBoYXZlIHRvIHdhaXQgZm9yIHRoZSBET00gdG8gaGF2ZSBjaGFuZ2VkLCBhbmQgdGhlIGlucHV0IGZpZWxkIHRvIGJlIHZpc2libGVcbiAgICAgICAgYXdhaXQgbWUudGltZW91dCgxMDApO1xuICAgICAgICBtZS5mb2N1cyhtZS5nZXRJbnB1dEVsKCkuaWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIG9uSW5wdXRWYWx1ZUNoYW5nZSh7IGZpbGVzIH0pIHtcbiAgICAgICAgY29uc3RcbiAgICAgICAgICAgIG1lICAgICAgICA9IHRoaXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdHlwZXMsXG4gICAgICAgICAgICAgICAgY2xzXG4gICAgICAgICAgICB9ID0gbWUsXG4gICAgICAgICAgICBib2R5ICAgICAgPSBtZS52ZG9tLmNuWzFdO1xuXG4gICAgICAgIGlmIChmaWxlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIE5lb0FycmF5LnJlbW92ZShjbHMsICduZW8tZmllbGQtZW1wdHknKTtcbiAgICAgICAgICAgIG1lLmNscyA9IGNscztcblxuICAgICAgICAgICAgY29uc3RcbiAgICAgICAgICAgICAgICBmaWxlICAgICA9IGZpbGVzLml0ZW0oMCksXG4gICAgICAgICAgICAgICAgcG9pbnRQb3MgPSBmaWxlLm5hbWUubGFzdEluZGV4T2YoJy4nKSxcbiAgICAgICAgICAgICAgICB0eXBlICAgICA9IHBvaW50UG9zID4gLTEgPyBmaWxlLm5hbWUuc2xpY2UocG9pbnRQb3MgKyAxKSA6ICcnLFxuICAgICAgICAgICAgICAgIGVzY2FwZWRGaWxlTmFtZSA9IFN0cmluZ1V0aWwuZXNjYXBlSHRtbChmaWxlLm5hbWUpO1xuXG4gICAgICAgICAgICBpZiAobWUudHlwZXMgJiYgIXR5cGVzW3R5cGVdKSB7XG4gICAgICAgICAgICAgICAgYm9keS5jblswXS5pbm5lckhUTUwgPSBlc2NhcGVkRmlsZU5hbWU7XG4gICAgICAgICAgICAgICAgYm9keS5jblsxXS5pbm5lckhUTUwgPSBgJHttZS5pbnZhbGlkRmlsZUZvcm1hdH0gKC4ke3R5cGV9KSAke21lLmZvcm1hdFNpemUoZmlsZS5zaXplKX1gO1xuICAgICAgICAgICAgICAgIG1lLmVycm9yID0gbWUucGxlYXNlVXNlVGhlc2VUeXBlcz8ucmVwbGFjZSgne2FsbG93ZWRGaWxlVHlwZXN9JywgT2JqZWN0LmtleXModHlwZXMpLmpvaW4oJyAuJykpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChmaWxlLnNpemUgPiBtZS5tYXhTaXplKSB7XG4gICAgICAgICAgICAgICAgYm9keS5jblswXS5pbm5lckhUTUwgPSBlc2NhcGVkRmlsZU5hbWU7XG4gICAgICAgICAgICAgICAgYm9keS5jblsxXS5pbm5lckhUTUwgPSBtZS5mb3JtYXRTaXplKGZpbGUuc2l6ZSk7XG4gICAgICAgICAgICAgICAgbWUuZXJyb3IgPSBtZS5maWxlU2l6ZU1vcmVUaGFuPy5yZXBsYWNlKCd7YWxsb3dlZEZpbGVTaXplfScsIFN0cmluZyhtZS5fbWF4U2l6ZSkudG9VcHBlckNhc2UoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBJZiBpdCBwYXNzZXMgdGhlIHR5cGUgYW5kIG1heFNpemUgY2hlY2ssIHVwbG9hZCBpdFxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbWUuZmlsZVNpemUgPSBtZS5mb3JtYXRTaXplKGZpbGUuc2l6ZSk7XG4gICAgICAgICAgICAgICAgbWUuZXJyb3IgPSAnJztcbiAgICAgICAgICAgICAgICBtZS51cGxvYWQoZmlsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgY2xlYXJlZCwgd2UgZ28gYmFjayB0byByZWFkeSBzdGF0ZVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG1lLnN0YXRlID0gJ3JlYWR5JztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIHVwbG9hZChmaWxlKSB7XG4gICAgICAgIGNvbnN0XG4gICAgICAgICAgICBtZSAgICAgICAgID0gdGhpcyxcbiAgICAgICAgICAgIHhociAgICAgICAgPSBtZS54aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKSxcbiAgICAgICAgICAgIHsgdXBsb2FkIH0gPSB4aHIsXG4gICAgICAgICAgICBmaWxlRGF0YSAgID0gbmV3IEZvcm1EYXRhKCksXG4gICAgICAgICAgICBoZWFkZXJzICAgID0geyAuLi5tZS5oZWFkZXJzIH07XG5cbiAgICAgICAgLy8gU2hvdyB0aGUgYWN0aW9uIGJ1dHRvblxuICAgICAgICBtZS5maWxlICA9IGZpbGU7XG4gICAgICAgIG1lLnN0YXRlID0gJ3N0YXJ0aW5nJztcblxuICAgICAgICAvLyBXZSBoYXZlIHRvIHdhaXQgZm9yIHRoZSBET00gdG8gaGF2ZSBjaGFuZ2VkLCBhbmQgdGhlIGFjdGlvbiBidXR0b24gdG8gYmUgdmlzaWJsZVxuICAgICAgICBhd2FpdCBtZS50aW1lb3V0KDEwMCk7XG4gICAgICAgIG1lLmZvY3VzKG1lLnZkb20uY25bMl0uaWQpO1xuXG4gICAgICAgIG1lLnZkb20uY25bMV0uY25bMF0uaW5uZXJIVE1MID0gU3RyaW5nVXRpbC5lc2NhcGVIdG1sKGZpbGUubmFtZSk7XG4gICAgICAgIG1lLnVwZGF0ZSgpO1xuICAgICAgICBtZS5zdGF0ZSA9ICd1cGxvYWRpbmcnO1xuXG4gICAgICAgIC8vIFRoaXMgbWVhbnMgbm8gcHJvZ3Jlc3MgYXMgb3Bwb3NlZCB0byB6ZXJvLCBidXQgc3RpbGwgZHVyaW5nIGEgY3VycmVudGx5IHN1Y2Nlc3NmdWwgb25nb2luZyB1cGxvYWQuXG4gICAgICAgIC8vIFdoZW4gaXQgaXMgTmFOLCB0aGUgZXJyb3IgZGlzcGxheSBkb2VzIG5vdCBhdHRlbXB0IHRvIHNob3cgcHJvZ3Jlc3MuXG4gICAgICAgIG1lLnByb2dyZXNzID0gTmFOO1xuXG4gICAgICAgIGZpbGVEYXRhLmFwcGVuZChcImZpbGVcIiwgZmlsZSk7XG5cbiAgICAgICAgLy8gUmVhY3QgdG8gdXBsb2FkIHN0YXRlIGNoYW5nZXNcbiAgICAgICAgdXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgbWUub25VcGxvYWRQcm9ncmVzcy5iaW5kKG1lKSk7XG4gICAgICAgIHVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsICAgIG1lLm9uVXBsb2FkRXJyb3IuYmluZChtZSkpO1xuICAgICAgICB1cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCAgICBtZS5vblVwbG9hZEFib3J0LmJpbmQobWUpKTtcbiAgICAgICAgeGhyLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWRlbmQnLCAgICAgbWUub25VcGxvYWREb25lLmJpbmQobWUpKTtcblxuICAgICAgICB4aHIub3BlbihcIlBPU1RcIiwgbWUudXBsb2FkVXJsLCB0cnVlKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhpcyBldmVudCBmaXJlcyBiZWZvcmUgZXZlcnkgSFRUUCByZXF1ZXN0IGlzIHNlbnQgdG8gdGhlIHNlcnZlciB2aWEgYW55IG9mIHRoZSBjb25maWd1cmVkIFVSTHMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBldmVudCBiZWZvcmVSZXF1ZXN0XG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCBUaGUgZXZlbnRcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50LmhlYWRlcnMgQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGNvbmZpZ3VyZWQge0BsaW5rICNwcm9wZXJ0eS1oZWFkZXJzfVxuICAgICAgICAgKiBmb3IgdGhpcyB3aWRnZXQsIGludG8gd2hpY2ggbmV3IGhlYWRlcnMgbWF5IGJlIGluamVjdGVkLlxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICAgICAgKi9cbiAgICAgICAgbWUuZmlyZSgnYmVmb3JlUmVxdWVzdCcsIHtcbiAgICAgICAgICAgIGhlYWRlcnNcbiAgICAgICAgfSk7XG4gICAgICAgIGZvciAoY29uc3QgaGVhZGVyIGluIGhlYWRlcnMpIHtcbiAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGhlYWRlciwgaGVhZGVyc1toZWFkZXJdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHhoci5zZW5kKGZpbGVEYXRhKTtcbiAgICB9XG5cbiAgICBvblVwbG9hZFByb2dyZXNzKHsgbG9hZGVkLCB0b3RhbCB9KSB7XG4gICAgICAgIGNvbnN0XG4gICAgICAgICAgICBwcm9ncmVzcyA9IHRoaXMucHJvZ3Jlc3MgPSBsb2FkZWQgLyB0b3RhbCxcbiAgICAgICAgICAgIHsgdmRvbSB9ID0gdGhpcztcblxuICAgICAgICAodmRvbS5zdHlsZSB8fCAodmRvbS5zdHlsZSA9IHt9KSlbJy0tdXBsb2FkLXByb2dyZXNzJ10gPSBgJHtwcm9ncmVzc310dXJuYDtcblxuICAgICAgICB2ZG9tLmNuWzFdLmNuWzFdLmlubmVySFRNTCA9IGAke3RoaXMudXBsb2FkaW5nfS4uLiAoJHtNYXRoLnJvdW5kKHByb2dyZXNzICogMTAwKX0lKWA7XG5cbiAgICAgICAgdGhpcy51cGxvYWRTaXplID0gbG9hZGVkO1xuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIH1cblxuICAgIG9uVXBsb2FkQWJvcnQoZSkge1xuICAgICAgICB0aGlzLnhociA9IG51bGw7XG4gICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICB9XG5cbiAgICBvblVwbG9hZEVycm9yKGUpIHtcbiAgICAgICAgdGhpcy54aHIgPSBudWxsO1xuICAgICAgICB0aGlzLnN0YXRlID0gJ3VwbG9hZC1mYWlsZWQnO1xuICAgICAgICB0aGlzLmVycm9yID0gYCR7dGhpcy51cGxvYWRFcnJvcn1gO1xuICAgIH1cblxuICAgIG9uVXBsb2FkRG9uZSh7IGxvYWRlZCwgdGFyZ2V0IDogeGhyIH0pIHtcbiAgICAgICAgY29uc3QgbWUgPSB0aGlzO1xuXG4gICAgICAgIG1lLnhociA9IG51bGw7XG5cbiAgICAgICAgLy8gU3VjY2Vzc2Z1bCBuZXR3b3JrIHJlcXVlc3QuXG4gICAgICAgIC8vIENoZWNrIHRoZSByZXN1bHRpbmcgSlNPTiBwYWNrZXQgZm9yIGRldGFpbHMgYW5kIGFueSBlcnJvci5cbiAgICAgICAgaWYgKGh0dHBTdWNjZXNzQ29kZXNbU3RyaW5nKHhoci5zdGF0dXMpWzBdXSkge1xuICAgICAgICAgICAgaWYgKGxvYWRlZCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2UpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgbWUuZG9jdW1lbnRJZCA9IHJlc3BvbnNlW21lLmRvY3VtZW50SWRQYXJhbWV0ZXJdO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBzdGF0dXMgY2hlY2sgcGhhc2UgaXMgb3B0aW9uYWwuXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIG5vIFVSTCBzcGVjaWZpZWQsIHRoZSBmaWxlIGlzIHRha2VuIHRvIGJlIGRvd25sb2FkYWJsZS5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lLmRvY3VtZW50U3RhdHVzVXJsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZS5zdGF0ZSA9ICdwcm9jZXNzaW5nJztcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3RhcnQgcG9sbGluZyB0aGUgc2VydmVyIHRvIHNlZSB3aGVuIHRoZSBzY2FuIGhhcyBhIHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lLmNoZWNrRG9jdW1lbnRTdGF0dXMoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lLnN0YXRlID0gJ2Rvd25sb2FkYWJsZSc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG1lLmVycm9yID0gcmVzcG9uc2UubWVzc2FnZTtcbiAgICAgICAgICAgICAgICAgICAgbWUuc3RhdGUgPSAndXBsb2FkLWZhaWxlZCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEZhaWxlZCBuZXR3b3JrIHJlcXVlc3RzIGFyZSBoYW5kbGVkIGluIG9uVXBsb2FkRXJyb3JcbiAgICAgICAgLy8gc28gbm8gZWxzZSBjb25kaXRpb24gbmVjZXNzYXJ5IGhlcmVcbiAgICB9XG5cbiAgICBvbkFjdGlvbkJ1dHRvbkNsaWNrKCkge1xuICAgICAgICBjb25zdFxuICAgICAgICAgICAgbWUgICAgICAgID0gdGhpcyxcbiAgICAgICAgICAgIHsgc3RhdGUgfSA9IG1lO1xuXG4gICAgICAgIC8vIFdoZW4gdGhleSBjbGljayB0aGUgYWN0aW9uIGJ1dHRvbiwgZGVwZW5kaW5nIG9uIHdoaWNoIHN0YXRlIHdlIGFyZSBpbiwgd2UgZ28gdG9cbiAgICAgICAgLy8gZGlmZmVyZW50IHN0YXRlcy5cbiAgICAgICAgc3dpdGNoIChzdGF0ZSkge1xuICAgICAgICAgICAgLy8gRHVyaW5nIHVwbG9hZCwgaXRzIGFuIGFib3J0XG4gICAgICAgICAgICBjYXNlICd1cGxvYWRpbmcnOlxuICAgICAgICAgICAgICAgIG1lLmFib3J0VXBsb2FkKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIC8vIFdoaWxlIHByb2Nlc3Npbmcgd2UganVzdCBoYXZlIHRvIHdhaXQgdW50aWwgaXQncyBzdWNjZWVkZWQgb3IgZmFpbGVkLi5cbiAgICAgICAgICAgIGNhc2UgJ3Byb2Nlc3NpbmcnOlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAvLyBJZiB0aGUgdXBsb2FkIG9yIHRoZSBzY2FuIGZhaWxlZCwgdGhlIGRvY3VtZW50IHdpbGwgbm90IGhhdmUgYmVlblxuICAgICAgICAgICAgLy8gc2F2ZWQsIHNvIHdlIGp1c3QgZ28gYmFjayB0byByZWFkeSBzdGF0ZVxuICAgICAgICAgICAgY2FzZSAndXBsb2FkLWZhaWxlZCc6XG4gICAgICAgICAgICBjYXNlICdzY2FuLWZhaWxlZCc6XG4gICAgICAgICAgICBjYXNlICdlcnJvcic6XG4gICAgICAgICAgICAgICAgbWUuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICBtZS5zdGF0ZSA9ICdyZWFkeSc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIC8vIEZvciBzdG9yZWQgZG9jdW1lbnRzLCB3ZSBuZWVkIHRvIHRlbGwgdGhlIHNlcnZlciB0aGUgZG9jdW1lbnRcbiAgICAgICAgICAgIC8vIGlzIG5vdCByZXF1aXJlZC5cbiAgICAgICAgICAgIGNhc2UgJ3Byb2Nlc3NpbmcnOlxuICAgICAgICAgICAgY2FzZSAnZG93bmxvYWRhYmxlJzpcbiAgICAgICAgICAgIGNhc2UgJ25vdC1kb3dubG9hZGFibGUnOlxuICAgICAgICAgICAgICAgIG1lLmRlbGV0ZURvY3VtZW50KCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkZWxldGVkJzpcbiAgICAgICAgICAgICAgICBtZS5jbGVhcigpO1xuICAgICAgICAgICAgICAgIG1lLnN0YXRlID0gJ3JlYWR5JztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3JlYWR5JzpcbiAgICAgICAgICAgICAgICBtZS5jbGVhcigpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWJvcnRVcGxvYWQoKSB7XG4gICAgICAgIHRoaXMueGhyPy5hYm9ydCgpO1xuICAgIH1cblxuICAgIGFzeW5jIGRlbGV0ZURvY3VtZW50KCkge1xuICAgICAgICBjb25zdFxuICAgICAgICAgICAgbWUgICAgICAgICAgPSB0aGlzLFxuICAgICAgICAgICAgeyBoZWFkZXJzIH0gPSBtZTtcblxuICAgICAgICBtZS5maXJlKCdiZWZvcmVSZXF1ZXN0Jywge1xuICAgICAgICAgICAgaGVhZGVyc1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBXZSBhc2sgdGhlIHNlcnZlciB0byBkZWxldGUgdXNpbmcgb3VyIHRoaXMuZG9jdW1lbnRJZFxuICAgICAgICBjb25zdCBzdGF0dXNSZXNwb25zZSA9IGF3YWl0IGZldGNoKG1lLmRvY3VtZW50RGVsZXRlVXJsLCB7XG4gICAgICAgICAgICBtZXRob2QgOiBtZS5kb2N1bWVudERlbGV0ZU1ldGhvZCxcbiAgICAgICAgICAgIGhlYWRlcnNcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gU3VjY2Vzc1xuICAgICAgICBpZiAoaHR0cFN1Y2Nlc3NDb2Rlc1tTdHJpbmcoc3RhdHVzUmVzcG9uc2Uuc3RhdHVzKVswXV0pIHtcbiAgICAgICAgICAgIG1lLmNsZWFyKCk7XG4gICAgICAgICAgICBtZS5zdGF0ZSA9ICdyZWFkeSc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBtZS5lcnJvciA9IGAke21lLmRvY3VtZW50RGVsZXRlRXJyb3J9OiAke3N0YXR1c1Jlc3BvbnNlLnN0YXR1c1RleHR9YDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGNoZWNrRG9jdW1lbnRTdGF0dXMoKSB7XG4gICAgICAgIGNvbnN0XG4gICAgICAgICAgICBtZSAgICAgICAgICA9IHRoaXMsXG4gICAgICAgICAgICB7IGhlYWRlcnMgfSA9IG1lO1xuXG4gICAgICAgIGlmIChtZS5zdGF0ZSA9PT0gJ3Byb2Nlc3NpbmcnKSB7XG4gICAgICAgICAgICBtZS5maXJlKCdiZWZvcmVSZXF1ZXN0Jywge1xuICAgICAgICAgICAgICAgIGhlYWRlcnNcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb25zdCBzdGF0dXNSZXNwb25zZSA9IGF3YWl0IGZldGNoKG1lLmRvY3VtZW50U3RhdHVzVXJsLCB7XG4gICAgICAgICAgICAgICAgaGVhZGVyc1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFN1Y2Nlc3NcbiAgICAgICAgICAgIGlmIChodHRwU3VjY2Vzc0NvZGVzW1N0cmluZyhzdGF0dXNSZXNwb25zZS5zdGF0dXMpWzBdXSkge1xuICAgICAgICAgICAgICAgIGNvbnN0XG4gICAgICAgICAgICAgICAgICAgIHNlcnZlckpzb24gICA9IGF3YWl0IHN0YXR1c1Jlc3BvbnNlLmpzb24oKSxcbiAgICAgICAgICAgICAgICAgICAgc2VydmVyU3RhdHVzID0gc2VydmVySnNvbi5zdGF0dXMsXG4gICAgICAgICAgICAgICAgICAgIC8vIE1hcCB0aGUgc2VydmVyJ3Mgc3RhdGVzIGNvZGVzIHRvIG91ciBvd24gc3RhdHVzIGNvZGVzXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cyAgICAgICA9IG1lLmRvY3VtZW50U3RhdHVzTWFwW3NlcnZlclN0YXR1c10gfHwgc2VydmVyU3RhdHVzO1xuXG4gICAgICAgICAgICAgICAgc3dpdGNoIChzdGF0dXMpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnc2Nhbm5pbmcnOlxuICAgICAgICAgICAgICAgICAgICAgICAgbWUudGltZW91dChtZS5zdGF0dXNTY2FuSW50ZXJ2YWwpLnRoZW4oKCkgPT4ge21lLmNoZWNrRG9jdW1lbnRTdGF0dXMoKX0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2RlbGV0ZWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgbWUuZXJyb3IgPSBgJHttZS5kb2N1bWVudFRleHR9ICR7bWUuZG9jdW1lbnRJZH0gJHtpc05vTG9uZ2VyQXZhaWxhYmxlfWA7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZS5zdGF0ZSA9ICdyZWFkeSc7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZXJyb3InOlxuICAgICAgICAgICAgICAgICAgICAgICAgbWUuZXJyb3IgPSBgJHttZS5kb2N1bWVudFN0YXR1c0Vycm9yfTogJHtzdGF0dXNSZXNwb25zZS5zdGF0dXNUZXh0IHx8IGBTZXJ2ZXIgZXJyb3IgJHtzdGF0dXNSZXNwb25zZS5zdGF0dXN9YH1gO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWUuc3RhdGUgPSAnZGVsZXRlZCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lLnN0YXRlID0gc3RhdHVzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG1lLmVycm9yID0gYCR7bWUuZG9jdW1lbnRTdGF0dXNFcnJvcn06ICR7c3RhdHVzUmVzcG9uc2Uuc3RhdHVzVGV4dCB8fCBgU2VydmVyIGVycm9yICR7c3RhdHVzUmVzcG9uc2Uuc3RhdHVzfWB9YDtcbiAgICAgICAgICAgICAgICBtZS5zdGF0ZSA9ICdkZWxldGVkJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFmdGVyU2V0RG9jdW1lbnQoZG9jdW1lbnQpIHtcbiAgICAgICAgaWYgKGRvY3VtZW50KSB7XG4gICAgICAgICAgICBjb25zdFxuICAgICAgICAgICAgICAgIG1lICAgICAgPSB0aGlzLFxuICAgICAgICAgICAgICAgIHsgY2xzIH0gPSBtZTtcblxuICAgICAgICAgICAgTmVvQXJyYXkucmVtb3ZlKGNscywgJ25lby1maWVsZC1lbXB0eScpO1xuICAgICAgICAgICAgbWUuY2xzID0gY2xzO1xuXG4gICAgICAgICAgICBtZS5kb2N1bWVudElkID0gZG9jdW1lbnQuaWQ7XG4gICAgICAgICAgICBtZS5maWxlU2l6ZSA9IG1lLmZvcm1hdFNpemUoZG9jdW1lbnQuc2l6ZSk7XG4gICAgICAgICAgICBtZS52ZG9tLmNuWzFdLmNuWzBdLmlubmVySFRNTCA9IFN0cmluZ1V0aWwuZXNjYXBlSHRtbChkb2N1bWVudC5maWxlTmFtZSk7XG4gICAgICAgICAgICBtZS5zdGF0ZSA9IG1lLmRvY3VtZW50U3RhdHVzTWFwW2RvY3VtZW50LnN0YXR1c107XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYWZ0ZXIgdGhlIHN0YXRlIGNvbmZpZyBnb3QgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvbGRWYWx1ZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBhZnRlclNldFN0YXRlKHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICBjb25zdFxuICAgICAgICAgICAgbWUgICAgICA9IHRoaXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmRvbVxuICAgICAgICAgICAgfSA9IG1lLFxuICAgICAgICAgICAgYW5jaG9yICA9IHZkb20uY25bMV0uY25bMF0sXG4gICAgICAgICAgICBzdGF0dXMgID0gdmRvbS5jblsxXS5jblsxXTtcblxuICAgICAgICBkZWxldGUgdmRvbS5pbmVydDtcblxuICAgICAgICBsZXQgaXNDaGFuZ2VFdmVudE5lZWRlZDtcblxuICAgICAgICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgICAgICAgICBjYXNlICdyZWFkeSc6XG4gICAgICAgICAgICAgICAgYW5jaG9yLnRhZyA9ICdkaXYnO1xuICAgICAgICAgICAgICAgIGFuY2hvci5ocmVmID0gJyc7XG4gICAgICAgICAgICAgICAgaXNDaGFuZ2VFdmVudE5lZWRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd1cGxvYWQtZmFpbGVkJzpcbiAgICAgICAgICAgICAgICBzdGF0dXMuaW5uZXJIVE1MID0gYCR7bWUudXBsb2FkRmFpbGVkfSR7aXNOYU4obWUucHJvZ3Jlc3MpID8gJycgOiBgLi4uICgke01hdGgucm91bmQobWUucHJvZ3Jlc3MgKiAxMDApfSUpYH1gO1xuICAgICAgICAgICAgICAgIGlzQ2hhbmdlRXZlbnROZWVkZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncHJvY2Vzc2luZyc6XG4gICAgICAgICAgICAgICAgc3RhdHVzLmlubmVySFRNTCA9IGAke21lLnNjYW5uaW5nfS4uLiAoJHttZS5mb3JtYXRTaXplKG1lLnVwbG9hZFNpemUpfSlgO1xuICAgICAgICAgICAgICAgIHZkb20uaW5lcnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc2Nhbi1mYWlsZWQnOlxuICAgICAgICAgICAgICAgIHN0YXR1cy5pbm5lckhUTUwgPSBgJHttZS5tYWx3YXJlRm91bmRJbkZpbGV9LiBcXHUyMDIyICR7bWUuZmlsZVNpemV9YDtcbiAgICAgICAgICAgICAgICBtZS5lcnJvciA9IG1lLnBsZWFzZUNoZWNrO1xuICAgICAgICAgICAgICAgIGlzQ2hhbmdlRXZlbnROZWVkZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZG93bmxvYWRhYmxlJzpcbiAgICAgICAgICAgICAgICBhbmNob3IudGFnID0gJ2EnO1xuICAgICAgICAgICAgICAgIGFuY2hvci5ocmVmID0gbWUuY3JlYXRlVXJsKG1lLmRvd25sb2FkVXJsLCB7XG4gICAgICAgICAgICAgICAgICAgIFttZS5kb2N1bWVudElkUGFyYW1ldGVyXSA6IG1lLmRvY3VtZW50SWRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBzdGF0dXMuaW5uZXJIVE1MID0gbWUuZmlsZVNpemU7XG4gICAgICAgICAgICAgICAgaXNDaGFuZ2VFdmVudE5lZWRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdub3QtZG93bmxvYWRhYmxlJzpcbiAgICAgICAgICAgICAgICBzdGF0dXMuaW5uZXJIVE1MID0gbWUuZG9jdW1lbnQgPyBtZS5maWxlU2l6ZSA6IGAke21lLnN1Y2Nlc3NmdWxseVVwbG9hZGVkfSBcXHUyMDIyICR7bWUuZmlsZVNpemV9YDtcbiAgICAgICAgICAgICAgICBpc0NoYW5nZUV2ZW50TmVlZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2RlbGV0ZWQnOlxuICAgICAgICAgICAgICAgIHN0YXR1cy5pbm5lckhUTUwgPSBtZS5maWxlV2FzRGVsZXRlZDtcbiAgICAgICAgICAgICAgICBpc0NoYW5nZUV2ZW50TmVlZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2Vycm9yJzpcbiAgICAgICAgICAgICAgICBzdGF0dXMuaW5uZXJIVE1MID0gbWUuZmlsZUlzSW5BbkVycm9yU3RhdGU7XG4gICAgICAgICAgICAgICAgbWUuZXJyb3IgPSBtZS5wbGVhc2VDaGVjaztcbiAgICAgICAgICAgICAgICBpc0NoYW5nZUV2ZW50TmVlZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICBpZiAoaXNDaGFuZ2VFdmVudE5lZWRlZCAmJiBvbGRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBtZS5maXJlQ2hhbmdlRXZlbnQobWUuZmlsZSlcbiAgICAgICAgfVxuICAgICAgICBtZS52YWxpZGF0ZSgpO1xuICAgICAgICBtZS51cGRhdGUoKTtcblxuICAgICAgICAvLyBQcm9jZXNzaW5nIGFib3ZlIG1heSBtdXRhdGUgY2xzXG4gICAgICAgIGNvbnN0IHsgY2xzIH0gPSBtZTtcblxuICAgICAgICBOZW9BcnJheS5yZW1vdmUoY2xzLCAnbmVvLWZpbGUtdXBsb2FkLXN0YXRlLScgKyBvbGRWYWx1ZSk7XG4gICAgICAgIE5lb0FycmF5LmFkZChjbHMsICduZW8tZmlsZS11cGxvYWQtc3RhdGUtJyArIHZhbHVlKTtcbiAgICAgICAgTmVvQXJyYXlbbWUuZmlsZSB8fCBtZS5kb2N1bWVudCA/ICdyZW1vdmUnIDogJ2FkZCcsICduZW8tZmllbGQtZW1wdHknXTtcbiAgICAgICAgbWUuY2xzID0gY2xzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBVUkwgc3Vic3RpdHV0aW5nIHRoZSBwYXNzZWQgcGFyYW1ldGVyIG5hbWVzIGluIGF0IHRoZSBwbGFjZXMgd2hlcmUgdGhlIG5hbWVcbiAgICAgKiBvY2N1cnMgd2l0aGluIGB7fWAgaW4gdGhlIHBhdHRlcm4uXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHVybFBhdHRlcm5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zXG4gICAgICovXG4gICAgY3JlYXRlVXJsKHVybFBhdHRlcm4sIHBhcmFtcykge1xuICAgICAgICBmb3IgKGNvbnN0IHBhcmFtTmFtZSBpbiBwYXJhbXMpIHtcbiAgICAgICAgICAgIHVybFBhdHRlcm4gPSB1cmxQYXR0ZXJuLnJlcGxhY2UoYHske3BhcmFtTmFtZX19YCwgcGFyYW1zW3BhcmFtTmFtZV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1cmxQYXR0ZXJuO1xuICAgIH1cblxuICAgIGJlZm9yZUdldEhlYWRlcnMoaGVhZGVycykge1xuICAgICAgICByZXR1cm4geyAuLi4oaGVhZGVycyB8fCB7fSkgfVxuICAgIH1cblxuICAgIGJlZm9yZUdldERvY3VtZW50U3RhdHVzVXJsKGRvY3VtZW50U3RhdHVzVXJsKSB7XG4gICAgICAgIGNvbnN0IG1lID0gdGhpcztcblxuICAgICAgICByZXR1cm4gdHlwZW9mIGRvY3VtZW50U3RhdHVzVXJsID09PSAnZnVuY3Rpb24nPyBkb2N1bWVudFN0YXR1c1VybC5jYWxsKG1lLCBtZSkgOiBtZS5jcmVhdGVVcmwoZG9jdW1lbnRTdGF0dXNVcmwsIHtcbiAgICAgICAgICAgIFttZS5kb2N1bWVudElkUGFyYW1ldGVyXSA6IG1lLmRvY3VtZW50SWRcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYmVmb3JlR2V0RG9jdW1lbnREZWxldGVVcmwoZG9jdW1lbnREZWxldGVVcmwpIHtcbiAgICAgICAgY29uc3QgbWUgPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiB0eXBlb2YgZG9jdW1lbnREZWxldGVVcmwgPT09ICdmdW5jdGlvbic/IGRvY3VtZW50RGVsZXRlVXJsLmNhbGwobWUsIG1lKSA6IG1lLmNyZWF0ZVVybChkb2N1bWVudERlbGV0ZVVybCwge1xuICAgICAgICAgICAgW21lLmRvY3VtZW50SWRQYXJhbWV0ZXJdIDogbWUuZG9jdW1lbnRJZFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBiZWZvcmVHZXREb3dubG9hZFVybChkb3dubG9hZFVybCkge1xuICAgICAgICBjb25zdCBtZSA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIHR5cGVvZiBkb3dubG9hZFVybCA9PT0gJ2Z1bmN0aW9uJz8gZG93bmxvYWRVcmwuY2FsbChtZSwgbWUpIDogbWUuY3JlYXRlVXJsKGRvd25sb2FkVXJsLCB7XG4gICAgICAgICAgICBbbWUuZG9jdW1lbnRJZFBhcmFtZXRlcl0gOiBtZS5kb2N1bWVudElkXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGJlZm9yZUdldE1heFNpemUobWF4U2l6ZSkge1xuICAgICAgICAvLyBOb3QgY29uZmlndXJlZCBtZWFucyBubyBsaW1pdFxuICAgICAgICBpZiAobWF4U2l6ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTcGxpdCBlZyBcIjEwMG1iXCIgaW50byB0aGUgbnVtZXJpYyBhbmQgdW5pdHMgcGFydHNcbiAgICAgICAgY29uc3Qgc2l6ZVBhcnRzID0gc2l6ZVJFLmV4ZWMobWF4U2l6ZSk7XG5cbiAgICAgICAgaWYgKHNpemVQYXJ0cykge1xuICAgICAgICAgICAgLy8gQ29udmVydCBtYiB0byAxMDAwMDAwIGV0Y1xuICAgICAgICAgICAgY29uc3QgbXVsdGlwbGllciA9IHNpemVNdWx0aXBsaWVyWyhzaXplUGFydHNbMl18fCd1bml0JykudG9Mb3dlckNhc2UoKV07XG5cbiAgICAgICAgICAgIHJldHVybiBwYXJzZUludChzaXplUGFydHNbMV0pICogbXVsdGlwbGllcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFmdGVyU2V0RXJyb3IodGV4dCkge1xuICAgICAgICBpZiAodGV4dCkge1xuICAgICAgICAgICAgdGhpcy52ZG9tLmNuWzVdLmNuID0gW3tcbiAgICAgICAgICAgICAgICB2dHlwZSA6ICd0ZXh0JyxcbiAgICAgICAgICAgICAgICBodG1sICA6IHRleHRcbiAgICAgICAgICAgIH1dO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy52ZG9tLmNuWzVdLmNuID0gW107XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnZhbGlkYXRlKCk7XG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfVxuXG4gICAgZm9ybWF0U2l6ZShieXRlcywgc2VwYXJhdG9yID0gJycsIHBvc3RGaXggPSAnJykge1xuICAgICAgICBpZiAoYnl0ZXMpIHtcbiAgICAgICAgICAgIGNvbnN0XG4gICAgICAgICAgICAgICAgc2l6ZXMgPSBbJ0J5dGVzJywgJ0tCJywgJ01CJywgJ0dCJywgJ1RCJ10sXG4gICAgICAgICAgICAgICAgaSAgICAgPSBNYXRoLm1pbihwYXJzZUludChNYXRoLmZsb29yKE1hdGgubG9nKGJ5dGVzKSAvIE1hdGgubG9nKDEwMDApKS50b1N0cmluZygpLCAxMCksIHNpemVzLmxlbmd0aCAtIDEpO1xuXG4gICAgICAgICAgICByZXR1cm4gYCR7KGJ5dGVzIC8gKDEwMDAgKiogaSkpLnRvRml4ZWQoaSA/IDEgOiAwKX0ke3NlcGFyYXRvcn0ke3NpemVzW2ldfSR7cG9zdEZpeH1gO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnbi9hJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICB2YWxpZGF0ZSgpIHtcbiAgICAgICAgY29uc3RcbiAgICAgICAgICAgIHsgY2xzIH0gPSB0aGlzLFxuICAgICAgICAgICAgaXNWYWxpZCA9IHRoaXMuaXNWYWxpZCgpO1xuXG4gICAgICAgIE5lb0FycmF5LnRvZ2dsZShjbHMsICduZW8taW52YWxpZCcsICFpc1ZhbGlkKTtcbiAgICAgICAgdGhpcy5jbHMgPSBjbHM7XG5cbiAgICAgICAgcmV0dXJuIGlzVmFsaWQ7XG4gICAgfVxuXG4gICAgaXNWYWxpZCgpIHtcbiAgICAgICAgY29uc3QgbWUgPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiAhbWUuZXJyb3IgJiYgICEobWUuc3RhdGUgPT09ICdyZWFkeScgJiYgbWUucmVxdWlyZWQpIHx8XG4gICAgICAgICAgICAgICAoICAgIChtZS5zdGF0ZSA9PT0gJ2Rvd25sb2FkYWJsZScpIHx8XG4gICAgICAgICAgICAgICAgICAgIChtZS5zdGF0ZSA9PT0gJ25vdC1kb3dubG9hZGFibGUnKVxuICAgICAgICAgICAgICAgKTtcbiAgICB9XG59XG5cbk5lby5zZXR1cENsYXNzKEZpbGVVcGxvYWQpO1xuXG5leHBvcnQgZGVmYXVsdCBGaWxlVXBsb2FkO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9