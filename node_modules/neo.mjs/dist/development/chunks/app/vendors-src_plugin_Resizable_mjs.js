"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["vendors-src_plugin_Resizable_mjs"],{

/***/ "./src/plugin/Base.mjs":
/*!*****************************!*\
  !*** ./src/plugin/Base.mjs ***!
  \*****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/Base.mjs */ "./src/core/Base.mjs");


/**
 * Abstract base class for plugin implementations.
 * Plugins are intended to get put into the plugins config of component.Base
 * to enhance them or add additional features
 * @class Neo.plugin.Base
 * @extends Neo.core.Base
 */
class Base extends _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.plugin.Base'
         * @protected
         */
        className: 'Neo.plugin.Base',
        /**
         * All plugin ntypes need to start with 'plugin-' to ensure that component.Base: getPlugin() can find them
         * @member {String} ntype='plugin'
         * @protected
         */
        ntype: 'plugin',
        /**
         * @member {Neo.component.Base} owner=null
         * @protected
         */
        owner: null
    }

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);

        let me = this;

        if (me.owner.mounted) {
            me.onOwnerMounted();
        } else {
            me.owner.on('mounted', me.onOwnerMounted, me);
        }
    }

    /**
     * Override this method to apply changes to the owner Component when it does get mounted
     */
    onOwnerMounted() {

    }
}

Neo.setupClass(Base);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Base);


/***/ }),

/***/ "./src/plugin/Resizable.mjs":
/*!**********************************!*\
  !*** ./src/plugin/Resizable.mjs ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Base.mjs */ "./src/plugin/Base.mjs");
/* harmony import */ var _draggable_DragZone_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../draggable/DragZone.mjs */ "./src/draggable/DragZone.mjs");
/* harmony import */ var _util_Array_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/Array.mjs */ "./src/util/Array.mjs");




/**
 * @class Neo.plugin.Resizable
 * @extends Neo.plugin.Base
 */
class Resizable extends _Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    /**
     * Resize cursor styles use north, south based names, so we need a mapping.
     * The order has to match the static positions array.
     * @member {String[]} cursorPositions=['s','sw','se','w','e','n','nw','ne']
     * @protected
     * @static
     */
    static cursorPositions = ['s', 'sw', 'se', 'w', 'e', 'n', 'nw', 'ne']
    /**
     * remove - chars
     * @member {RegExp} nameRegEx=/-([a-z])/g
     * @protected
     * @static
     */
    static nameRegEx = /-([a-z])/g
    /**
     * Internal position names
     * @member {String[]} validDirections=['bottom','bottom-left','bottom-right','left','right','top','top-left','top-right']
     * @static
     */
    static positions = ['bottom', 'bottom-left', 'bottom-right', 'left', 'right', 'top', 'top-left', 'top-right']
    /**
     * Directions into which you want to drag => resize
     * @member {String[]} validDirections=['b','bl','br','l','r','t','tl','tr']
     * @static
     */
    static validDirections = ['b', 'bl', 'br', 'l', 'r', 't', 'tl', 'tr']

    static config = {
        /**
         * @member {String} className='Neo.plugin.Resizable'
         * @protected
         */
        className: 'Neo.plugin.Resizable',
        /**
         * @member {String} ntype='plugin-resizable'
         * @protected
         */
        ntype: 'plugin-resizable',
        /**
         * The name of the App this instance belongs to
         * @member {String|null} appName_=null
         */
        appName_: null,
        /**
         * @member {String|null} boundaryContainerId='document.body'
         */
        boundaryContainerId: 'document.body',
        /**
         * The DOMRect of the boundaryContainer if set (measured on drag:start)
         * @member {Object} boundaryContainerRect=null
         * @protected
         */
        boundaryContainerRect: null,
        /**
         * @member {String} currentNodeName=null
         * @protected
         */
        currentNodeName: null,
        /**
         * Must be set by each owner
         * @member {String} delegationCls=null
         */
        delegationCls: null,
        /**
         * Directions into which you want to drag => resize
         * @member {String[]} directions_=['b','bl','br','l','r','t','tl','tr']
         */
        directions_: ['b', 'bl', 'br', 'l', 'r', 't', 'tl', 'tr'],
        /**
         * @member {Neo.draggable.DragZone|null} dragZone=null
         */
        dragZone: null,
        /**
         * @member {Object} dragZoneConfig=null
         */
        dragZoneConfig: null,
        /**
         * @member {Number} gap=10
         * @protected
         */
        gap: 10,
        /**
         * The DOMRect of the element to drag (measured on drag:start)
         * @member {Object} initialRect=null
         * @protected
         */
        initialRect: null,
        /**
         * @member {Boolean} isDragging=false
         */
        isDragging: false,
        /**
         * maximum height when resizing in px
         * @member {Number|null} maxHeight=null
         */
        maxHeight: null,
        /**
         * maximum width when resizing in px
         * @member {Number|null} maxWidth=null
         */
        maxWidth: null,
        /**
         * minimum height when resizing in px
         * @member {Number} minHeight=200
         */
        minHeight: 200,
        /**
         * minimum width when resizing in px
         * @member {Number} minWidth=200
         */
        minWidth: 200,
        /**
         * @member {Object} nodeBottom=null
         * @protected
         */
        nodeBottom: null,
        /**
         * @member {Object} nodeBottomLeft=null
         * @protected
         */
        nodeBottomLeft: null,
        /**
         * @member {Object} nodeBottomRight=null
         * @protected
         */
        nodeBottomRight: null,
        /**
         * @member {Object} nodeLeft=null
         * @protected
         */
        nodeLeft: null,
        /**
         * @member {Object} nodeRight=null
         * @protected
         */
        nodeRight: null,
        /**
         * @member {Object} nodeTop=null
         * @protected
         */
        nodeTop: null,
        /**
         * @member {Object} nodeTopLeft=null
         * @protected
         */
        nodeTopLeft: null,
        /**
         * @member {Object} nodeTopRight=null
         * @protected
         */
        nodeTopRight: null,
        /**
         * vdom node which matches the delegationCls to add resize handles
         * @member {Object} targetNode=null
         * @protected
         */
        targetNode: null
    }

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);

        let me = this;

        me.owner.addDomListeners([
            {'drag:end'  : me.onDragEnd,    scope: me, delegate: '.neo-resizable'},
            {'drag:move' : me.onDragMove,   scope: me, delegate: '.neo-resizable'},
            {'drag:start': me.onDragStart,  scope: me, delegate: '.neo-resizable'},
            {mousedown   : me.onMouseDown,  scope: me, delegate: '.neo-resizable'},
            {mousemove   : me.onMouseMove,  scope: me, local   : true},
            {mouseleave  : me.onMouseLeave, scope: me, delegate: `.${me.delegationCls}`},
            {mouseup     : me.onMouseUp,    scope: me, delegate: '.neo-resizable'}
        ])
    }

    /**
     *
     */
    addBodyCursorCls() {
        Neo.applyDeltas(this.appName, {
            id : 'document.body',
            cls: {
                add   : [`neo-cursor-${Resizable.cursorPositions[Resizable.positions.indexOf(this.currentNodeName)]}-resize`],
                remove: []
            }
        })
    }

    /**
     * @param {String} name
     * @returns {Boolean} true
     */
    addNode(name) {
        let me           = this,
            nodeName     = 'node' + Neo.capitalize(name.replace(Resizable.nameRegEx, (str, letter) => letter.toUpperCase())),
            {targetNode} = me;

        if (targetNode) {
            me.currentNodeName = name;
            me[nodeName] = {cls: ['neo-resizable', `neo-resizable-${name}`]};

            targetNode.cn = targetNode.cn || [];
            targetNode.cn.push(me[nodeName]);

            return true
        }

        return false
    }

    /**
     * Triggered after the appName config got changed
     * @param {String|null} value
     * @param {String|null} oldValue
     * @protected
     */
    afterSetAppName(value, oldValue) {
        let me = this;

        if (value) {
            Neo.currentWorker.insertThemeFiles(value, me.owner.windowId, me.__proto__)
        }

        if (me.dragZone) {
            me.dragZone.appName = value
        }
    }

    /**
     * Triggered before the directions config gets changed.
     * @param {String[]} value
     * @param {String[]} oldValue
     * @returns {String[]}
     * @protected
     */
    beforeSetDirections(value, oldValue) {
        if (Array.isArray(value)) {
            let i   = 0,
                len = value.length;

            for (; i < len; i++) {
                if (this.beforeSetEnumValue(value[i], oldValue, 'directions', 'validDirections') !== value[i]) {
                    return oldValue
                }
            }
        }

        return value
    }

    /**
     * @param {Object} data
     */
    onDragEnd(data) {
        let me    = this,
            style = me.owner.wrapperStyle; // todo: delegation target

        Object.assign(me, {
            boundaryContainerRect: null,
            initialRect          : null,
            isDragging           : false
        });

        Object.assign(style, {
            opacity  : 1,
            transform: 'none',
            ...me.dragZone.dragProxy.wrapperStyle
        });

        me.owner.wrapperStyle = style;

        me.removeBodyCursorCls();

        me.dragZone.dragEnd();
        me.removeAllNodes()
    }

    /**
     * @param {Object} data
     */
    onDragMove(data) {
        let me     = this,
            node   = me.currentNodeName,
            ctRect = me.boundaryContainerRect,
            {maxHeight, maxWidth, minHeight, minWidth} = me,
            rect   = me.initialRect,
            dist, size, style;

        if (!node) {
            me.onDragEnd({})
        } else if (me.dragZone.dragProxy) {
            style = me.dragZone.dragProxy.wrapperStyle;

            if (node.includes('bottom')) {
                size = Math.max(minHeight, data.clientY - rect.top);

                if (maxHeight) {
                    size = Math.min(size, maxHeight);
                }

                if (ctRect) {
                    size = Math.min(size, ctRect.bottom - rect.top);
                }

                style.height = `${size}px`
            } else if (node.includes('top')) {
                dist = Math.min(rect.bottom - minHeight, data.clientY);
                size = Math.max(minHeight, rect.height + rect.top - data.clientY);

                if (maxHeight) {
                    dist = Math.max(dist, rect.bottom - maxHeight);
                    size = Math.min(size, maxHeight)
                }

                if (ctRect) {
                    dist = Math.max(dist, ctRect.top);
                    size = Math.min(size, rect.bottom - ctRect.top)
                }

                style.height = `${size}px`;
                style.top    = `${dist}px`
            }

            if (node.includes('left')) {
                dist = Math.min(rect.right - minWidth, data.clientX);
                size = Math.max(minWidth, rect.width + rect.left - data.clientX);

                if (maxWidth) {
                    dist = Math.max(dist, rect.right - maxWidth);
                    size = Math.min(size, maxWidth)
                }

                if (ctRect) {
                    dist = Math.max(dist, ctRect.left);
                    size = Math.min(size, rect.right - ctRect.left)
                }

                style.left  = `${dist}px`;
                style.width = `${size}px`
            } else if (node.includes('right')) {
                size = Math.max(minWidth, rect.width - rect.right + data.clientX);

                if (maxWidth) {
                    size = Math.min(size, maxWidth)
                }

                if (ctRect) {
                    size = Math.min(size, ctRect.right - rect.left)
                }

                style.width = `${size}px`
            }

            me.dragZone.dragProxy.wrapperStyle = style
        }
    }

    /**
     * @param {Object} data
     */
    onDragStart(data) {
        let me               = this,
            containerId      = me.boundaryContainerId,
            i                = 0,
            len              = data.path.length,
            {appName, owner} = me,
            style            = owner.wrapperStyle, // todo: delegation target
            target, vdom, vdomStyle;

        me.isDragging = true;

        style.opacity = 0.3;
        owner.wrapperStyle = style;

        for (; i < len; i++) {
            target = data.path[i];

            if (target.cls.includes(me.delegationCls)) {
                me.initialRect = target.rect
            }

            if (containerId) {
                if (containerId === 'document.body' && target.tagName === 'body' || containerId === target.id) {
                    me.boundaryContainerRect = target.rect;
                    break // assuming that the dragEl is not outside of the container
                }
            }
        }

        if (!me.boundaryContainerRect) {
            owner.getDomRect(me.boundaryContainerRect).then(rect => {
                me.boundaryContainerRect = rect
            })
        }

        me.addBodyCursorCls();

        if (!me.dragZone) {
            vdom      = Neo.clone(owner.vdom, true);
            vdomStyle = vdom.style;

            delete vdomStyle.height;
            delete vdomStyle.left;
            delete vdomStyle.top;
            delete vdomStyle.width;

            me.dragZone = Neo.create({
                module             : _draggable_DragZone_mjs__WEBPACK_IMPORTED_MODULE_1__["default"],
                appName,
                boundaryContainerId: owner.boundaryContainerId,
                dragElement        : vdom,
                moveInMainThread   : false,
                owner,
                ...me.dragZoneConfig
            })
        } else {
            me.dragZone.boundaryContainerId = owner.boundaryContainerId
        }

        me.dragZone.dragStart(data)
    }

    /**
     * See: https://github.com/neomjs/neo/issues/2431
     * @param {Object} data
     */
    onMouseDown(data) {
        this.isDragging = true
    }

    /**
     * @param {Object} data
     */
    onMouseMove(data) {
        let me  = this,
            dir = me.directions,
            i   = 0,
            {gap, owner, targetNode} = me,
            h   = false,
            len = data.path.length,
            bottom, left, right, target, top;

        if (!me.isDragging && !owner.isDragging) {
            for (; i < len; i++) {
                if (data.path[i].cls.includes(me.delegationCls)) {
                    target = data.path[i];
                    break
                }
            }

            if (target) {
                if (target.id !== targetNode?.id) {
                    if (targetNode) {
                        me.removeAllNodes()
                    }

                    me.targetNode = owner.getVdomChild(target.id)
                }

                bottom = data.clientY >= target.rect.y - gap + target.rect.height;
                left   = data.clientX <= target.rect.x + gap;
                right  = data.clientX >= target.rect.x - gap + target.rect.width;
                top    = data.clientY <= target.rect.y + gap;

                if (me.nodeBottom && (!bottom || bottom && left  || bottom && right)) {h = me.removeNode('bottom')}
                if (me.nodeLeft   && (!left   || bottom && left  || top    && left))  {h = me.removeNode('left')}
                if (me.nodeRight  && (!right  || bottom && right || top    && right)) {h = me.removeNode('right')}
                if (me.nodeTop    && (!top    || top    && left  || top    && right)) {h = me.removeNode('top')}

                if (me.nodeBottomLeft  && (!bottom || !left))  {h = me.removeNode('bottom-left')}
                if (me.nodeBottomRight && (!bottom || !right)) {h = me.removeNode('bottom-right')}
                if (me.nodeTopLeft     && (!top    || !left))  {h = me.removeNode('top-left')}
                if (me.nodeTopRight    && (!top    || !right)) {h = me.removeNode('top-right')}

                if      (dir.includes('bl') && bottom && left)  {if (!me.nodeBottomLeft)  {h = me.addNode('bottom-left')}}
                else if (dir.includes('br') && bottom && right) {if (!me.nodeBottomRight) {h = me.addNode('bottom-right')}}
                else if (dir.includes('tl') && top    && left)  {if (!me.nodeTopLeft)     {h = me.addNode('top-left')}}
                else if (dir.includes('tr') && top    && right) {if (!me.nodeTopRight)    {h = me.addNode('top-right')}}
                else if (dir.includes('b')  && bottom)          {if (!me.nodeBottom)      {h = me.addNode('bottom')}}
                else if (dir.includes('l')  && left)            {if (!me.nodeLeft)        {h = me.addNode('left')}}
                else if (dir.includes('r')  && right)           {if (!me.nodeRight)       {h = me.addNode('right')}}
                else if (dir.includes('t')  && top)             {if (!me.nodeTop)         {h = me.addNode('top')}}

                h && owner.update()
            }
        }
    }

    /**
     * @param {Object} data
     */
    onMouseLeave(data) {
        let me = this;

        if (!me.isDragging && !me.owner.isDragging) {
            // limit the event to delegation targets
            if (data.path[0].cls.includes(me.delegationCls)) {
                me.removeAllNodes()
            }
        }
    }

    /**
     * See: https://github.com/neomjs/neo/issues/2431
     * @param {Object} data
     */
    onMouseUp(data) {
        this.isDragging = false
    }

    /**
     * There should be max 1 node (resize handle) at any given time.
     * see: /issues/1139
     */
    removeAllNodes() {
        let me = this;

        if (me.currentNodeName) {
            me.removeNode(me.currentNodeName);
            me.owner.update();

            me.currentNodeName = null;
            me.targetNode      = null
        }
    }

    /**
     *
     */
    removeBodyCursorCls() {
        Neo.applyDeltas(this.appName, {
            id : 'document.body',
            cls: {
                add   : [],
                remove: [`neo-cursor-${Resizable.cursorPositions[Resizable.positions.indexOf(this.currentNodeName)]}-resize`]
            }
        })
    }

    /**
     * @param {String} name
     * @returns {Boolean} true in case the node existed
     */
    removeNode(name) {
        let me       = this,
            nodeName = 'node' + Neo.capitalize(name.replace(Resizable.nameRegEx, (str, letter) => letter.toUpperCase()));

        if (me[nodeName]) {
            me.currentNodeName = null;
            _util_Array_mjs__WEBPACK_IMPORTED_MODULE_2__["default"].remove(me.targetNode.cn, me[nodeName]);
            me[nodeName] = null;

            return true
        }

        return false
    }
}

Neo.setupClass(Resizable);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Resizable);


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmtzL2FwcC92ZW5kb3JzLXNyY19wbHVnaW5fUmVzaXphYmxlX21qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUF3Qzs7QUFFeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsc0RBQVE7QUFDM0I7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixvQkFBb0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUEsaUVBQWUsSUFBSSxFQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN0RGM7QUFDZTtBQUNSOztBQUV6QztBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixpREFBSTtBQUM1QjtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsVUFBVTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsVUFBVTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFVBQVU7QUFDMUI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsYUFBYTtBQUNqQztBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsYUFBYTtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9C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QWdFO0FBQ2hFLGdFQUFnRTs7QUFFaEUsaUVBQWlFLDBCQUEwQjtBQUMzRixpRUFBaUUsMEJBQTBCO0FBQzNGLGlFQUFpRSwwQkFBMEI7QUFDM0YsaUVBQWlFLDBCQUEwQjtBQUMzRixpRUFBaUUsMEJBQTBCO0FBQzNGLGlFQUFpRSwwQkFBMEI7QUFDM0YsaUVBQWlFLDBCQUEwQjtBQUMzRixpRUFBaUUsMEJBQTBCOztBQUUzRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsNkVBQTZFO0FBQ3BIO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZLHVEQUFRO0FBQ3BCOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBLGlFQUFlLFNBQVMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL25lby5tanMvLi9zcmMvcGx1Z2luL0Jhc2UubWpzIiwid2VicGFjazovL25lby5tanMvLi9zcmMvcGx1Z2luL1Jlc2l6YWJsZS5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENvcmVCYXNlIGZyb20gJy4uL2NvcmUvQmFzZS5tanMnO1xuXG4vKipcbiAqIEFic3RyYWN0IGJhc2UgY2xhc3MgZm9yIHBsdWdpbiBpbXBsZW1lbnRhdGlvbnMuXG4gKiBQbHVnaW5zIGFyZSBpbnRlbmRlZCB0byBnZXQgcHV0IGludG8gdGhlIHBsdWdpbnMgY29uZmlnIG9mIGNvbXBvbmVudC5CYXNlXG4gKiB0byBlbmhhbmNlIHRoZW0gb3IgYWRkIGFkZGl0aW9uYWwgZmVhdHVyZXNcbiAqIEBjbGFzcyBOZW8ucGx1Z2luLkJhc2VcbiAqIEBleHRlbmRzIE5lby5jb3JlLkJhc2VcbiAqL1xuY2xhc3MgQmFzZSBleHRlbmRzIENvcmVCYXNlIHtcbiAgICBzdGF0aWMgY29uZmlnID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBjbGFzc05hbWU9J05lby5wbHVnaW4uQmFzZSdcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgY2xhc3NOYW1lOiAnTmVvLnBsdWdpbi5CYXNlJyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFsbCBwbHVnaW4gbnR5cGVzIG5lZWQgdG8gc3RhcnQgd2l0aCAncGx1Z2luLScgdG8gZW5zdXJlIHRoYXQgY29tcG9uZW50LkJhc2U6IGdldFBsdWdpbigpIGNhbiBmaW5kIHRoZW1cbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBudHlwZT0ncGx1Z2luJ1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBudHlwZTogJ3BsdWdpbicsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtOZW8uY29tcG9uZW50LkJhc2V9IG93bmVyPW51bGxcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgb3duZXI6IG51bGxcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXG4gICAgICovXG4gICAgY29uc3RydWN0KGNvbmZpZykge1xuICAgICAgICBzdXBlci5jb25zdHJ1Y3QoY29uZmlnKTtcblxuICAgICAgICBsZXQgbWUgPSB0aGlzO1xuXG4gICAgICAgIGlmIChtZS5vd25lci5tb3VudGVkKSB7XG4gICAgICAgICAgICBtZS5vbk93bmVyTW91bnRlZCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWUub3duZXIub24oJ21vdW50ZWQnLCBtZS5vbk93bmVyTW91bnRlZCwgbWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gYXBwbHkgY2hhbmdlcyB0byB0aGUgb3duZXIgQ29tcG9uZW50IHdoZW4gaXQgZG9lcyBnZXQgbW91bnRlZFxuICAgICAqL1xuICAgIG9uT3duZXJNb3VudGVkKCkge1xuXG4gICAgfVxufVxuXG5OZW8uc2V0dXBDbGFzcyhCYXNlKTtcblxuZXhwb3J0IGRlZmF1bHQgQmFzZTtcbiIsImltcG9ydCBCYXNlICAgICBmcm9tICcuL0Jhc2UubWpzJztcbmltcG9ydCBEcmFnWm9uZSBmcm9tICcuLi9kcmFnZ2FibGUvRHJhZ1pvbmUubWpzJztcbmltcG9ydCBOZW9BcnJheSBmcm9tICcuLi91dGlsL0FycmF5Lm1qcyc7XG5cbi8qKlxuICogQGNsYXNzIE5lby5wbHVnaW4uUmVzaXphYmxlXG4gKiBAZXh0ZW5kcyBOZW8ucGx1Z2luLkJhc2VcbiAqL1xuY2xhc3MgUmVzaXphYmxlIGV4dGVuZHMgQmFzZSB7XG4gICAgLyoqXG4gICAgICogUmVzaXplIGN1cnNvciBzdHlsZXMgdXNlIG5vcnRoLCBzb3V0aCBiYXNlZCBuYW1lcywgc28gd2UgbmVlZCBhIG1hcHBpbmcuXG4gICAgICogVGhlIG9yZGVyIGhhcyB0byBtYXRjaCB0aGUgc3RhdGljIHBvc2l0aW9ucyBhcnJheS5cbiAgICAgKiBAbWVtYmVyIHtTdHJpbmdbXX0gY3Vyc29yUG9zaXRpb25zPVsncycsJ3N3Jywnc2UnLCd3JywnZScsJ24nLCdudycsJ25lJ11cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIHN0YXRpYyBjdXJzb3JQb3NpdGlvbnMgPSBbJ3MnLCAnc3cnLCAnc2UnLCAndycsICdlJywgJ24nLCAnbncnLCAnbmUnXVxuICAgIC8qKlxuICAgICAqIHJlbW92ZSAtIGNoYXJzXG4gICAgICogQG1lbWJlciB7UmVnRXhwfSBuYW1lUmVnRXg9Ly0oW2Etel0pL2dcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIHN0YXRpYyBuYW1lUmVnRXggPSAvLShbYS16XSkvZ1xuICAgIC8qKlxuICAgICAqIEludGVybmFsIHBvc2l0aW9uIG5hbWVzXG4gICAgICogQG1lbWJlciB7U3RyaW5nW119IHZhbGlkRGlyZWN0aW9ucz1bJ2JvdHRvbScsJ2JvdHRvbS1sZWZ0JywnYm90dG9tLXJpZ2h0JywnbGVmdCcsJ3JpZ2h0JywndG9wJywndG9wLWxlZnQnLCd0b3AtcmlnaHQnXVxuICAgICAqIEBzdGF0aWNcbiAgICAgKi9cbiAgICBzdGF0aWMgcG9zaXRpb25zID0gWydib3R0b20nLCAnYm90dG9tLWxlZnQnLCAnYm90dG9tLXJpZ2h0JywgJ2xlZnQnLCAncmlnaHQnLCAndG9wJywgJ3RvcC1sZWZ0JywgJ3RvcC1yaWdodCddXG4gICAgLyoqXG4gICAgICogRGlyZWN0aW9ucyBpbnRvIHdoaWNoIHlvdSB3YW50IHRvIGRyYWcgPT4gcmVzaXplXG4gICAgICogQG1lbWJlciB7U3RyaW5nW119IHZhbGlkRGlyZWN0aW9ucz1bJ2InLCdibCcsJ2JyJywnbCcsJ3InLCd0JywndGwnLCd0ciddXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIHN0YXRpYyB2YWxpZERpcmVjdGlvbnMgPSBbJ2InLCAnYmwnLCAnYnInLCAnbCcsICdyJywgJ3QnLCAndGwnLCAndHInXVxuXG4gICAgc3RhdGljIGNvbmZpZyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gY2xhc3NOYW1lPSdOZW8ucGx1Z2luLlJlc2l6YWJsZSdcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgY2xhc3NOYW1lOiAnTmVvLnBsdWdpbi5SZXNpemFibGUnLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBudHlwZT0ncGx1Z2luLXJlc2l6YWJsZSdcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgbnR5cGU6ICdwbHVnaW4tcmVzaXphYmxlJyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBuYW1lIG9mIHRoZSBBcHAgdGhpcyBpbnN0YW5jZSBiZWxvbmdzIHRvXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ3xudWxsfSBhcHBOYW1lXz1udWxsXG4gICAgICAgICAqL1xuICAgICAgICBhcHBOYW1lXzogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ3xudWxsfSBib3VuZGFyeUNvbnRhaW5lcklkPSdkb2N1bWVudC5ib2R5J1xuICAgICAgICAgKi9cbiAgICAgICAgYm91bmRhcnlDb250YWluZXJJZDogJ2RvY3VtZW50LmJvZHknLFxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIERPTVJlY3Qgb2YgdGhlIGJvdW5kYXJ5Q29udGFpbmVyIGlmIHNldCAobWVhc3VyZWQgb24gZHJhZzpzdGFydClcbiAgICAgICAgICogQG1lbWJlciB7T2JqZWN0fSBib3VuZGFyeUNvbnRhaW5lclJlY3Q9bnVsbFxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBib3VuZGFyeUNvbnRhaW5lclJlY3Q6IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IGN1cnJlbnROb2RlTmFtZT1udWxsXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIGN1cnJlbnROb2RlTmFtZTogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE11c3QgYmUgc2V0IGJ5IGVhY2ggb3duZXJcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBkZWxlZ2F0aW9uQ2xzPW51bGxcbiAgICAgICAgICovXG4gICAgICAgIGRlbGVnYXRpb25DbHM6IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEaXJlY3Rpb25zIGludG8gd2hpY2ggeW91IHdhbnQgdG8gZHJhZyA9PiByZXNpemVcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nW119IGRpcmVjdGlvbnNfPVsnYicsJ2JsJywnYnInLCdsJywncicsJ3QnLCd0bCcsJ3RyJ11cbiAgICAgICAgICovXG4gICAgICAgIGRpcmVjdGlvbnNfOiBbJ2InLCAnYmwnLCAnYnInLCAnbCcsICdyJywgJ3QnLCAndGwnLCAndHInXSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge05lby5kcmFnZ2FibGUuRHJhZ1pvbmV8bnVsbH0gZHJhZ1pvbmU9bnVsbFxuICAgICAgICAgKi9cbiAgICAgICAgZHJhZ1pvbmU6IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3R9IGRyYWdab25lQ29uZmlnPW51bGxcbiAgICAgICAgICovXG4gICAgICAgIGRyYWdab25lQ29uZmlnOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7TnVtYmVyfSBnYXA9MTBcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgZ2FwOiAxMCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBET01SZWN0IG9mIHRoZSBlbGVtZW50IHRvIGRyYWcgKG1lYXN1cmVkIG9uIGRyYWc6c3RhcnQpXG4gICAgICAgICAqIEBtZW1iZXIge09iamVjdH0gaW5pdGlhbFJlY3Q9bnVsbFxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBpbml0aWFsUmVjdDogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge0Jvb2xlYW59IGlzRHJhZ2dpbmc9ZmFsc2VcbiAgICAgICAgICovXG4gICAgICAgIGlzRHJhZ2dpbmc6IGZhbHNlLFxuICAgICAgICAvKipcbiAgICAgICAgICogbWF4aW11bSBoZWlnaHQgd2hlbiByZXNpemluZyBpbiBweFxuICAgICAgICAgKiBAbWVtYmVyIHtOdW1iZXJ8bnVsbH0gbWF4SGVpZ2h0PW51bGxcbiAgICAgICAgICovXG4gICAgICAgIG1heEhlaWdodDogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIG1heGltdW0gd2lkdGggd2hlbiByZXNpemluZyBpbiBweFxuICAgICAgICAgKiBAbWVtYmVyIHtOdW1iZXJ8bnVsbH0gbWF4V2lkdGg9bnVsbFxuICAgICAgICAgKi9cbiAgICAgICAgbWF4V2lkdGg6IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBtaW5pbXVtIGhlaWdodCB3aGVuIHJlc2l6aW5nIGluIHB4XG4gICAgICAgICAqIEBtZW1iZXIge051bWJlcn0gbWluSGVpZ2h0PTIwMFxuICAgICAgICAgKi9cbiAgICAgICAgbWluSGVpZ2h0OiAyMDAsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBtaW5pbXVtIHdpZHRoIHdoZW4gcmVzaXppbmcgaW4gcHhcbiAgICAgICAgICogQG1lbWJlciB7TnVtYmVyfSBtaW5XaWR0aD0yMDBcbiAgICAgICAgICovXG4gICAgICAgIG1pbldpZHRoOiAyMDAsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3R9IG5vZGVCb3R0b209bnVsbFxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBub2RlQm90dG9tOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7T2JqZWN0fSBub2RlQm90dG9tTGVmdD1udWxsXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIG5vZGVCb3R0b21MZWZ0OiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7T2JqZWN0fSBub2RlQm90dG9tUmlnaHQ9bnVsbFxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBub2RlQm90dG9tUmlnaHQ6IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3R9IG5vZGVMZWZ0PW51bGxcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgbm9kZUxlZnQ6IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3R9IG5vZGVSaWdodD1udWxsXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIG5vZGVSaWdodDogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge09iamVjdH0gbm9kZVRvcD1udWxsXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIG5vZGVUb3A6IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3R9IG5vZGVUb3BMZWZ0PW51bGxcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgbm9kZVRvcExlZnQ6IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3R9IG5vZGVUb3BSaWdodD1udWxsXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIG5vZGVUb3BSaWdodDogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHZkb20gbm9kZSB3aGljaCBtYXRjaGVzIHRoZSBkZWxlZ2F0aW9uQ2xzIHRvIGFkZCByZXNpemUgaGFuZGxlc1xuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3R9IHRhcmdldE5vZGU9bnVsbFxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICB0YXJnZXROb2RlOiBudWxsXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ1xuICAgICAqL1xuICAgIGNvbnN0cnVjdChjb25maWcpIHtcbiAgICAgICAgc3VwZXIuY29uc3RydWN0KGNvbmZpZyk7XG5cbiAgICAgICAgbGV0IG1lID0gdGhpcztcblxuICAgICAgICBtZS5vd25lci5hZGREb21MaXN0ZW5lcnMoW1xuICAgICAgICAgICAgeydkcmFnOmVuZCcgIDogbWUub25EcmFnRW5kLCAgICBzY29wZTogbWUsIGRlbGVnYXRlOiAnLm5lby1yZXNpemFibGUnfSxcbiAgICAgICAgICAgIHsnZHJhZzptb3ZlJyA6IG1lLm9uRHJhZ01vdmUsICAgc2NvcGU6IG1lLCBkZWxlZ2F0ZTogJy5uZW8tcmVzaXphYmxlJ30sXG4gICAgICAgICAgICB7J2RyYWc6c3RhcnQnOiBtZS5vbkRyYWdTdGFydCwgIHNjb3BlOiBtZSwgZGVsZWdhdGU6ICcubmVvLXJlc2l6YWJsZSd9LFxuICAgICAgICAgICAge21vdXNlZG93biAgIDogbWUub25Nb3VzZURvd24sICBzY29wZTogbWUsIGRlbGVnYXRlOiAnLm5lby1yZXNpemFibGUnfSxcbiAgICAgICAgICAgIHttb3VzZW1vdmUgICA6IG1lLm9uTW91c2VNb3ZlLCAgc2NvcGU6IG1lLCBsb2NhbCAgIDogdHJ1ZX0sXG4gICAgICAgICAgICB7bW91c2VsZWF2ZSAgOiBtZS5vbk1vdXNlTGVhdmUsIHNjb3BlOiBtZSwgZGVsZWdhdGU6IGAuJHttZS5kZWxlZ2F0aW9uQ2xzfWB9LFxuICAgICAgICAgICAge21vdXNldXAgICAgIDogbWUub25Nb3VzZVVwLCAgICBzY29wZTogbWUsIGRlbGVnYXRlOiAnLm5lby1yZXNpemFibGUnfVxuICAgICAgICBdKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgYWRkQm9keUN1cnNvckNscygpIHtcbiAgICAgICAgTmVvLmFwcGx5RGVsdGFzKHRoaXMuYXBwTmFtZSwge1xuICAgICAgICAgICAgaWQgOiAnZG9jdW1lbnQuYm9keScsXG4gICAgICAgICAgICBjbHM6IHtcbiAgICAgICAgICAgICAgICBhZGQgICA6IFtgbmVvLWN1cnNvci0ke1Jlc2l6YWJsZS5jdXJzb3JQb3NpdGlvbnNbUmVzaXphYmxlLnBvc2l0aW9ucy5pbmRleE9mKHRoaXMuY3VycmVudE5vZGVOYW1lKV19LXJlc2l6ZWBdLFxuICAgICAgICAgICAgICAgIHJlbW92ZTogW11cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufSB0cnVlXG4gICAgICovXG4gICAgYWRkTm9kZShuYW1lKSB7XG4gICAgICAgIGxldCBtZSAgICAgICAgICAgPSB0aGlzLFxuICAgICAgICAgICAgbm9kZU5hbWUgICAgID0gJ25vZGUnICsgTmVvLmNhcGl0YWxpemUobmFtZS5yZXBsYWNlKFJlc2l6YWJsZS5uYW1lUmVnRXgsIChzdHIsIGxldHRlcikgPT4gbGV0dGVyLnRvVXBwZXJDYXNlKCkpKSxcbiAgICAgICAgICAgIHt0YXJnZXROb2RlfSA9IG1lO1xuXG4gICAgICAgIGlmICh0YXJnZXROb2RlKSB7XG4gICAgICAgICAgICBtZS5jdXJyZW50Tm9kZU5hbWUgPSBuYW1lO1xuICAgICAgICAgICAgbWVbbm9kZU5hbWVdID0ge2NsczogWyduZW8tcmVzaXphYmxlJywgYG5lby1yZXNpemFibGUtJHtuYW1lfWBdfTtcblxuICAgICAgICAgICAgdGFyZ2V0Tm9kZS5jbiA9IHRhcmdldE5vZGUuY24gfHwgW107XG4gICAgICAgICAgICB0YXJnZXROb2RlLmNuLnB1c2gobWVbbm9kZU5hbWVdKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCBhZnRlciB0aGUgYXBwTmFtZSBjb25maWcgZ290IGNoYW5nZWRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xudWxsfSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfG51bGx9IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFmdGVyU2V0QXBwTmFtZSh2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgbGV0IG1lID0gdGhpcztcblxuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIE5lby5jdXJyZW50V29ya2VyLmluc2VydFRoZW1lRmlsZXModmFsdWUsIG1lLm93bmVyLndpbmRvd0lkLCBtZS5fX3Byb3RvX18pXG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWUuZHJhZ1pvbmUpIHtcbiAgICAgICAgICAgIG1lLmRyYWdab25lLmFwcE5hbWUgPSB2YWx1ZVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGJlZm9yZSB0aGUgZGlyZWN0aW9ucyBjb25maWcgZ2V0cyBjaGFuZ2VkLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nW119IHZhbHVlXG4gICAgICogQHBhcmFtIHtTdHJpbmdbXX0gb2xkVmFsdWVcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nW119XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGJlZm9yZVNldERpcmVjdGlvbnModmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgbGV0IGkgICA9IDAsXG4gICAgICAgICAgICAgICAgbGVuID0gdmFsdWUubGVuZ3RoO1xuXG4gICAgICAgICAgICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYmVmb3JlU2V0RW51bVZhbHVlKHZhbHVlW2ldLCBvbGRWYWx1ZSwgJ2RpcmVjdGlvbnMnLCAndmFsaWREaXJlY3Rpb25zJykgIT09IHZhbHVlW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvbGRWYWx1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWx1ZVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICovXG4gICAgb25EcmFnRW5kKGRhdGEpIHtcbiAgICAgICAgbGV0IG1lICAgID0gdGhpcyxcbiAgICAgICAgICAgIHN0eWxlID0gbWUub3duZXIud3JhcHBlclN0eWxlOyAvLyB0b2RvOiBkZWxlZ2F0aW9uIHRhcmdldFxuXG4gICAgICAgIE9iamVjdC5hc3NpZ24obWUsIHtcbiAgICAgICAgICAgIGJvdW5kYXJ5Q29udGFpbmVyUmVjdDogbnVsbCxcbiAgICAgICAgICAgIGluaXRpYWxSZWN0ICAgICAgICAgIDogbnVsbCxcbiAgICAgICAgICAgIGlzRHJhZ2dpbmcgICAgICAgICAgIDogZmFsc2VcbiAgICAgICAgfSk7XG5cbiAgICAgICAgT2JqZWN0LmFzc2lnbihzdHlsZSwge1xuICAgICAgICAgICAgb3BhY2l0eSAgOiAxLFxuICAgICAgICAgICAgdHJhbnNmb3JtOiAnbm9uZScsXG4gICAgICAgICAgICAuLi5tZS5kcmFnWm9uZS5kcmFnUHJveHkud3JhcHBlclN0eWxlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIG1lLm93bmVyLndyYXBwZXJTdHlsZSA9IHN0eWxlO1xuXG4gICAgICAgIG1lLnJlbW92ZUJvZHlDdXJzb3JDbHMoKTtcblxuICAgICAgICBtZS5kcmFnWm9uZS5kcmFnRW5kKCk7XG4gICAgICAgIG1lLnJlbW92ZUFsbE5vZGVzKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgICAqL1xuICAgIG9uRHJhZ01vdmUoZGF0YSkge1xuICAgICAgICBsZXQgbWUgICAgID0gdGhpcyxcbiAgICAgICAgICAgIG5vZGUgICA9IG1lLmN1cnJlbnROb2RlTmFtZSxcbiAgICAgICAgICAgIGN0UmVjdCA9IG1lLmJvdW5kYXJ5Q29udGFpbmVyUmVjdCxcbiAgICAgICAgICAgIHttYXhIZWlnaHQsIG1heFdpZHRoLCBtaW5IZWlnaHQsIG1pbldpZHRofSA9IG1lLFxuICAgICAgICAgICAgcmVjdCAgID0gbWUuaW5pdGlhbFJlY3QsXG4gICAgICAgICAgICBkaXN0LCBzaXplLCBzdHlsZTtcblxuICAgICAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgICAgIG1lLm9uRHJhZ0VuZCh7fSlcbiAgICAgICAgfSBlbHNlIGlmIChtZS5kcmFnWm9uZS5kcmFnUHJveHkpIHtcbiAgICAgICAgICAgIHN0eWxlID0gbWUuZHJhZ1pvbmUuZHJhZ1Byb3h5LndyYXBwZXJTdHlsZTtcblxuICAgICAgICAgICAgaWYgKG5vZGUuaW5jbHVkZXMoJ2JvdHRvbScpKSB7XG4gICAgICAgICAgICAgICAgc2l6ZSA9IE1hdGgubWF4KG1pbkhlaWdodCwgZGF0YS5jbGllbnRZIC0gcmVjdC50b3ApO1xuXG4gICAgICAgICAgICAgICAgaWYgKG1heEhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICBzaXplID0gTWF0aC5taW4oc2l6ZSwgbWF4SGVpZ2h0KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoY3RSZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHNpemUgPSBNYXRoLm1pbihzaXplLCBjdFJlY3QuYm90dG9tIC0gcmVjdC50b3ApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHN0eWxlLmhlaWdodCA9IGAke3NpemV9cHhgXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5vZGUuaW5jbHVkZXMoJ3RvcCcpKSB7XG4gICAgICAgICAgICAgICAgZGlzdCA9IE1hdGgubWluKHJlY3QuYm90dG9tIC0gbWluSGVpZ2h0LCBkYXRhLmNsaWVudFkpO1xuICAgICAgICAgICAgICAgIHNpemUgPSBNYXRoLm1heChtaW5IZWlnaHQsIHJlY3QuaGVpZ2h0ICsgcmVjdC50b3AgLSBkYXRhLmNsaWVudFkpO1xuXG4gICAgICAgICAgICAgICAgaWYgKG1heEhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICBkaXN0ID0gTWF0aC5tYXgoZGlzdCwgcmVjdC5ib3R0b20gLSBtYXhIZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICBzaXplID0gTWF0aC5taW4oc2l6ZSwgbWF4SGVpZ2h0KVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChjdFJlY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzdCA9IE1hdGgubWF4KGRpc3QsIGN0UmVjdC50b3ApO1xuICAgICAgICAgICAgICAgICAgICBzaXplID0gTWF0aC5taW4oc2l6ZSwgcmVjdC5ib3R0b20gLSBjdFJlY3QudG9wKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHN0eWxlLmhlaWdodCA9IGAke3NpemV9cHhgO1xuICAgICAgICAgICAgICAgIHN0eWxlLnRvcCAgICA9IGAke2Rpc3R9cHhgXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChub2RlLmluY2x1ZGVzKCdsZWZ0JykpIHtcbiAgICAgICAgICAgICAgICBkaXN0ID0gTWF0aC5taW4ocmVjdC5yaWdodCAtIG1pbldpZHRoLCBkYXRhLmNsaWVudFgpO1xuICAgICAgICAgICAgICAgIHNpemUgPSBNYXRoLm1heChtaW5XaWR0aCwgcmVjdC53aWR0aCArIHJlY3QubGVmdCAtIGRhdGEuY2xpZW50WCk7XG5cbiAgICAgICAgICAgICAgICBpZiAobWF4V2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzdCA9IE1hdGgubWF4KGRpc3QsIHJlY3QucmlnaHQgLSBtYXhXaWR0aCk7XG4gICAgICAgICAgICAgICAgICAgIHNpemUgPSBNYXRoLm1pbihzaXplLCBtYXhXaWR0aClcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoY3RSZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3QgPSBNYXRoLm1heChkaXN0LCBjdFJlY3QubGVmdCk7XG4gICAgICAgICAgICAgICAgICAgIHNpemUgPSBNYXRoLm1pbihzaXplLCByZWN0LnJpZ2h0IC0gY3RSZWN0LmxlZnQpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc3R5bGUubGVmdCAgPSBgJHtkaXN0fXB4YDtcbiAgICAgICAgICAgICAgICBzdHlsZS53aWR0aCA9IGAke3NpemV9cHhgXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5vZGUuaW5jbHVkZXMoJ3JpZ2h0JykpIHtcbiAgICAgICAgICAgICAgICBzaXplID0gTWF0aC5tYXgobWluV2lkdGgsIHJlY3Qud2lkdGggLSByZWN0LnJpZ2h0ICsgZGF0YS5jbGllbnRYKTtcblxuICAgICAgICAgICAgICAgIGlmIChtYXhXaWR0aCkge1xuICAgICAgICAgICAgICAgICAgICBzaXplID0gTWF0aC5taW4oc2l6ZSwgbWF4V2lkdGgpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGN0UmVjdCkge1xuICAgICAgICAgICAgICAgICAgICBzaXplID0gTWF0aC5taW4oc2l6ZSwgY3RSZWN0LnJpZ2h0IC0gcmVjdC5sZWZ0KVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHN0eWxlLndpZHRoID0gYCR7c2l6ZX1weGBcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbWUuZHJhZ1pvbmUuZHJhZ1Byb3h5LndyYXBwZXJTdHlsZSA9IHN0eWxlXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgICAqL1xuICAgIG9uRHJhZ1N0YXJ0KGRhdGEpIHtcbiAgICAgICAgbGV0IG1lICAgICAgICAgICAgICAgPSB0aGlzLFxuICAgICAgICAgICAgY29udGFpbmVySWQgICAgICA9IG1lLmJvdW5kYXJ5Q29udGFpbmVySWQsXG4gICAgICAgICAgICBpICAgICAgICAgICAgICAgID0gMCxcbiAgICAgICAgICAgIGxlbiAgICAgICAgICAgICAgPSBkYXRhLnBhdGgubGVuZ3RoLFxuICAgICAgICAgICAge2FwcE5hbWUsIG93bmVyfSA9IG1lLFxuICAgICAgICAgICAgc3R5bGUgICAgICAgICAgICA9IG93bmVyLndyYXBwZXJTdHlsZSwgLy8gdG9kbzogZGVsZWdhdGlvbiB0YXJnZXRcbiAgICAgICAgICAgIHRhcmdldCwgdmRvbSwgdmRvbVN0eWxlO1xuXG4gICAgICAgIG1lLmlzRHJhZ2dpbmcgPSB0cnVlO1xuXG4gICAgICAgIHN0eWxlLm9wYWNpdHkgPSAwLjM7XG4gICAgICAgIG93bmVyLndyYXBwZXJTdHlsZSA9IHN0eWxlO1xuXG4gICAgICAgIGZvciAoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIHRhcmdldCA9IGRhdGEucGF0aFtpXTtcblxuICAgICAgICAgICAgaWYgKHRhcmdldC5jbHMuaW5jbHVkZXMobWUuZGVsZWdhdGlvbkNscykpIHtcbiAgICAgICAgICAgICAgICBtZS5pbml0aWFsUmVjdCA9IHRhcmdldC5yZWN0XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjb250YWluZXJJZCkge1xuICAgICAgICAgICAgICAgIGlmIChjb250YWluZXJJZCA9PT0gJ2RvY3VtZW50LmJvZHknICYmIHRhcmdldC50YWdOYW1lID09PSAnYm9keScgfHwgY29udGFpbmVySWQgPT09IHRhcmdldC5pZCkge1xuICAgICAgICAgICAgICAgICAgICBtZS5ib3VuZGFyeUNvbnRhaW5lclJlY3QgPSB0YXJnZXQucmVjdDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgLy8gYXNzdW1pbmcgdGhhdCB0aGUgZHJhZ0VsIGlzIG5vdCBvdXRzaWRlIG9mIHRoZSBjb250YWluZXJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIW1lLmJvdW5kYXJ5Q29udGFpbmVyUmVjdCkge1xuICAgICAgICAgICAgb3duZXIuZ2V0RG9tUmVjdChtZS5ib3VuZGFyeUNvbnRhaW5lclJlY3QpLnRoZW4ocmVjdCA9PiB7XG4gICAgICAgICAgICAgICAgbWUuYm91bmRhcnlDb250YWluZXJSZWN0ID0gcmVjdFxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIG1lLmFkZEJvZHlDdXJzb3JDbHMoKTtcblxuICAgICAgICBpZiAoIW1lLmRyYWdab25lKSB7XG4gICAgICAgICAgICB2ZG9tICAgICAgPSBOZW8uY2xvbmUob3duZXIudmRvbSwgdHJ1ZSk7XG4gICAgICAgICAgICB2ZG9tU3R5bGUgPSB2ZG9tLnN0eWxlO1xuXG4gICAgICAgICAgICBkZWxldGUgdmRvbVN0eWxlLmhlaWdodDtcbiAgICAgICAgICAgIGRlbGV0ZSB2ZG9tU3R5bGUubGVmdDtcbiAgICAgICAgICAgIGRlbGV0ZSB2ZG9tU3R5bGUudG9wO1xuICAgICAgICAgICAgZGVsZXRlIHZkb21TdHlsZS53aWR0aDtcblxuICAgICAgICAgICAgbWUuZHJhZ1pvbmUgPSBOZW8uY3JlYXRlKHtcbiAgICAgICAgICAgICAgICBtb2R1bGUgICAgICAgICAgICAgOiBEcmFnWm9uZSxcbiAgICAgICAgICAgICAgICBhcHBOYW1lLFxuICAgICAgICAgICAgICAgIGJvdW5kYXJ5Q29udGFpbmVySWQ6IG93bmVyLmJvdW5kYXJ5Q29udGFpbmVySWQsXG4gICAgICAgICAgICAgICAgZHJhZ0VsZW1lbnQgICAgICAgIDogdmRvbSxcbiAgICAgICAgICAgICAgICBtb3ZlSW5NYWluVGhyZWFkICAgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBvd25lcixcbiAgICAgICAgICAgICAgICAuLi5tZS5kcmFnWm9uZUNvbmZpZ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1lLmRyYWdab25lLmJvdW5kYXJ5Q29udGFpbmVySWQgPSBvd25lci5ib3VuZGFyeUNvbnRhaW5lcklkXG4gICAgICAgIH1cblxuICAgICAgICBtZS5kcmFnWm9uZS5kcmFnU3RhcnQoZGF0YSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9uZW9tanMvbmVvL2lzc3Vlcy8yNDMxXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKi9cbiAgICBvbk1vdXNlRG93bihkYXRhKSB7XG4gICAgICAgIHRoaXMuaXNEcmFnZ2luZyA9IHRydWVcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgICAqL1xuICAgIG9uTW91c2VNb3ZlKGRhdGEpIHtcbiAgICAgICAgbGV0IG1lICA9IHRoaXMsXG4gICAgICAgICAgICBkaXIgPSBtZS5kaXJlY3Rpb25zLFxuICAgICAgICAgICAgaSAgID0gMCxcbiAgICAgICAgICAgIHtnYXAsIG93bmVyLCB0YXJnZXROb2RlfSA9IG1lLFxuICAgICAgICAgICAgaCAgID0gZmFsc2UsXG4gICAgICAgICAgICBsZW4gPSBkYXRhLnBhdGgubGVuZ3RoLFxuICAgICAgICAgICAgYm90dG9tLCBsZWZ0LCByaWdodCwgdGFyZ2V0LCB0b3A7XG5cbiAgICAgICAgaWYgKCFtZS5pc0RyYWdnaW5nICYmICFvd25lci5pc0RyYWdnaW5nKSB7XG4gICAgICAgICAgICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEucGF0aFtpXS5jbHMuaW5jbHVkZXMobWUuZGVsZWdhdGlvbkNscykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gZGF0YS5wYXRoW2ldO1xuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQuaWQgIT09IHRhcmdldE5vZGU/LmlkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXROb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZS5yZW1vdmVBbGxOb2RlcygpXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBtZS50YXJnZXROb2RlID0gb3duZXIuZ2V0VmRvbUNoaWxkKHRhcmdldC5pZClcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBib3R0b20gPSBkYXRhLmNsaWVudFkgPj0gdGFyZ2V0LnJlY3QueSAtIGdhcCArIHRhcmdldC5yZWN0LmhlaWdodDtcbiAgICAgICAgICAgICAgICBsZWZ0ICAgPSBkYXRhLmNsaWVudFggPD0gdGFyZ2V0LnJlY3QueCArIGdhcDtcbiAgICAgICAgICAgICAgICByaWdodCAgPSBkYXRhLmNsaWVudFggPj0gdGFyZ2V0LnJlY3QueCAtIGdhcCArIHRhcmdldC5yZWN0LndpZHRoO1xuICAgICAgICAgICAgICAgIHRvcCAgICA9IGRhdGEuY2xpZW50WSA8PSB0YXJnZXQucmVjdC55ICsgZ2FwO1xuXG4gICAgICAgICAgICAgICAgaWYgKG1lLm5vZGVCb3R0b20gJiYgKCFib3R0b20gfHwgYm90dG9tICYmIGxlZnQgIHx8IGJvdHRvbSAmJiByaWdodCkpIHtoID0gbWUucmVtb3ZlTm9kZSgnYm90dG9tJyl9XG4gICAgICAgICAgICAgICAgaWYgKG1lLm5vZGVMZWZ0ICAgJiYgKCFsZWZ0ICAgfHwgYm90dG9tICYmIGxlZnQgIHx8IHRvcCAgICAmJiBsZWZ0KSkgIHtoID0gbWUucmVtb3ZlTm9kZSgnbGVmdCcpfVxuICAgICAgICAgICAgICAgIGlmIChtZS5ub2RlUmlnaHQgICYmICghcmlnaHQgIHx8IGJvdHRvbSAmJiByaWdodCB8fCB0b3AgICAgJiYgcmlnaHQpKSB7aCA9IG1lLnJlbW92ZU5vZGUoJ3JpZ2h0Jyl9XG4gICAgICAgICAgICAgICAgaWYgKG1lLm5vZGVUb3AgICAgJiYgKCF0b3AgICAgfHwgdG9wICAgICYmIGxlZnQgIHx8IHRvcCAgICAmJiByaWdodCkpIHtoID0gbWUucmVtb3ZlTm9kZSgndG9wJyl9XG5cbiAgICAgICAgICAgICAgICBpZiAobWUubm9kZUJvdHRvbUxlZnQgICYmICghYm90dG9tIHx8ICFsZWZ0KSkgIHtoID0gbWUucmVtb3ZlTm9kZSgnYm90dG9tLWxlZnQnKX1cbiAgICAgICAgICAgICAgICBpZiAobWUubm9kZUJvdHRvbVJpZ2h0ICYmICghYm90dG9tIHx8ICFyaWdodCkpIHtoID0gbWUucmVtb3ZlTm9kZSgnYm90dG9tLXJpZ2h0Jyl9XG4gICAgICAgICAgICAgICAgaWYgKG1lLm5vZGVUb3BMZWZ0ICAgICAmJiAoIXRvcCAgICB8fCAhbGVmdCkpICB7aCA9IG1lLnJlbW92ZU5vZGUoJ3RvcC1sZWZ0Jyl9XG4gICAgICAgICAgICAgICAgaWYgKG1lLm5vZGVUb3BSaWdodCAgICAmJiAoIXRvcCAgICB8fCAhcmlnaHQpKSB7aCA9IG1lLnJlbW92ZU5vZGUoJ3RvcC1yaWdodCcpfVxuXG4gICAgICAgICAgICAgICAgaWYgICAgICAoZGlyLmluY2x1ZGVzKCdibCcpICYmIGJvdHRvbSAmJiBsZWZ0KSAge2lmICghbWUubm9kZUJvdHRvbUxlZnQpICB7aCA9IG1lLmFkZE5vZGUoJ2JvdHRvbS1sZWZ0Jyl9fVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGRpci5pbmNsdWRlcygnYnInKSAmJiBib3R0b20gJiYgcmlnaHQpIHtpZiAoIW1lLm5vZGVCb3R0b21SaWdodCkge2ggPSBtZS5hZGROb2RlKCdib3R0b20tcmlnaHQnKX19XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZGlyLmluY2x1ZGVzKCd0bCcpICYmIHRvcCAgICAmJiBsZWZ0KSAge2lmICghbWUubm9kZVRvcExlZnQpICAgICB7aCA9IG1lLmFkZE5vZGUoJ3RvcC1sZWZ0Jyl9fVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGRpci5pbmNsdWRlcygndHInKSAmJiB0b3AgICAgJiYgcmlnaHQpIHtpZiAoIW1lLm5vZGVUb3BSaWdodCkgICAge2ggPSBtZS5hZGROb2RlKCd0b3AtcmlnaHQnKX19XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZGlyLmluY2x1ZGVzKCdiJykgICYmIGJvdHRvbSkgICAgICAgICAge2lmICghbWUubm9kZUJvdHRvbSkgICAgICB7aCA9IG1lLmFkZE5vZGUoJ2JvdHRvbScpfX1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChkaXIuaW5jbHVkZXMoJ2wnKSAgJiYgbGVmdCkgICAgICAgICAgICB7aWYgKCFtZS5ub2RlTGVmdCkgICAgICAgIHtoID0gbWUuYWRkTm9kZSgnbGVmdCcpfX1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChkaXIuaW5jbHVkZXMoJ3InKSAgJiYgcmlnaHQpICAgICAgICAgICB7aWYgKCFtZS5ub2RlUmlnaHQpICAgICAgIHtoID0gbWUuYWRkTm9kZSgncmlnaHQnKX19XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZGlyLmluY2x1ZGVzKCd0JykgICYmIHRvcCkgICAgICAgICAgICAge2lmICghbWUubm9kZVRvcCkgICAgICAgICB7aCA9IG1lLmFkZE5vZGUoJ3RvcCcpfX1cblxuICAgICAgICAgICAgICAgIGggJiYgb3duZXIudXBkYXRlKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICovXG4gICAgb25Nb3VzZUxlYXZlKGRhdGEpIHtcbiAgICAgICAgbGV0IG1lID0gdGhpcztcblxuICAgICAgICBpZiAoIW1lLmlzRHJhZ2dpbmcgJiYgIW1lLm93bmVyLmlzRHJhZ2dpbmcpIHtcbiAgICAgICAgICAgIC8vIGxpbWl0IHRoZSBldmVudCB0byBkZWxlZ2F0aW9uIHRhcmdldHNcbiAgICAgICAgICAgIGlmIChkYXRhLnBhdGhbMF0uY2xzLmluY2x1ZGVzKG1lLmRlbGVnYXRpb25DbHMpKSB7XG4gICAgICAgICAgICAgICAgbWUucmVtb3ZlQWxsTm9kZXMoKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VlOiBodHRwczovL2dpdGh1Yi5jb20vbmVvbWpzL25lby9pc3N1ZXMvMjQzMVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICovXG4gICAgb25Nb3VzZVVwKGRhdGEpIHtcbiAgICAgICAgdGhpcy5pc0RyYWdnaW5nID0gZmFsc2VcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGVyZSBzaG91bGQgYmUgbWF4IDEgbm9kZSAocmVzaXplIGhhbmRsZSkgYXQgYW55IGdpdmVuIHRpbWUuXG4gICAgICogc2VlOiAvaXNzdWVzLzExMzlcbiAgICAgKi9cbiAgICByZW1vdmVBbGxOb2RlcygpIHtcbiAgICAgICAgbGV0IG1lID0gdGhpcztcblxuICAgICAgICBpZiAobWUuY3VycmVudE5vZGVOYW1lKSB7XG4gICAgICAgICAgICBtZS5yZW1vdmVOb2RlKG1lLmN1cnJlbnROb2RlTmFtZSk7XG4gICAgICAgICAgICBtZS5vd25lci51cGRhdGUoKTtcblxuICAgICAgICAgICAgbWUuY3VycmVudE5vZGVOYW1lID0gbnVsbDtcbiAgICAgICAgICAgIG1lLnRhcmdldE5vZGUgICAgICA9IG51bGxcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgcmVtb3ZlQm9keUN1cnNvckNscygpIHtcbiAgICAgICAgTmVvLmFwcGx5RGVsdGFzKHRoaXMuYXBwTmFtZSwge1xuICAgICAgICAgICAgaWQgOiAnZG9jdW1lbnQuYm9keScsXG4gICAgICAgICAgICBjbHM6IHtcbiAgICAgICAgICAgICAgICBhZGQgICA6IFtdLFxuICAgICAgICAgICAgICAgIHJlbW92ZTogW2BuZW8tY3Vyc29yLSR7UmVzaXphYmxlLmN1cnNvclBvc2l0aW9uc1tSZXNpemFibGUucG9zaXRpb25zLmluZGV4T2YodGhpcy5jdXJyZW50Tm9kZU5hbWUpXX0tcmVzaXplYF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufSB0cnVlIGluIGNhc2UgdGhlIG5vZGUgZXhpc3RlZFxuICAgICAqL1xuICAgIHJlbW92ZU5vZGUobmFtZSkge1xuICAgICAgICBsZXQgbWUgICAgICAgPSB0aGlzLFxuICAgICAgICAgICAgbm9kZU5hbWUgPSAnbm9kZScgKyBOZW8uY2FwaXRhbGl6ZShuYW1lLnJlcGxhY2UoUmVzaXphYmxlLm5hbWVSZWdFeCwgKHN0ciwgbGV0dGVyKSA9PiBsZXR0ZXIudG9VcHBlckNhc2UoKSkpO1xuXG4gICAgICAgIGlmIChtZVtub2RlTmFtZV0pIHtcbiAgICAgICAgICAgIG1lLmN1cnJlbnROb2RlTmFtZSA9IG51bGw7XG4gICAgICAgICAgICBOZW9BcnJheS5yZW1vdmUobWUudGFyZ2V0Tm9kZS5jbiwgbWVbbm9kZU5hbWVdKTtcbiAgICAgICAgICAgIG1lW25vZGVOYW1lXSA9IG51bGw7XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG59XG5cbk5lby5zZXR1cENsYXNzKFJlc2l6YWJsZSk7XG5cbmV4cG9ydCBkZWZhdWx0IFJlc2l6YWJsZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==