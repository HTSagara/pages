"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["vendors-src_model_Component_mjs"],{

/***/ "./src/model/Component.mjs":
/*!*********************************!*\
  !*** ./src/model/Component.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/Base.mjs */ "./src/core/Base.mjs");
/* harmony import */ var _util_ClassSystem_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/ClassSystem.mjs */ "./src/util/ClassSystem.mjs");
/* harmony import */ var _util_Array_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/Array.mjs */ "./src/util/Array.mjs");
/* harmony import */ var _core_Observable_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/Observable.mjs */ "./src/core/Observable.mjs");





const dataVariableRegex   = /data((?!(\.[a-z_]\w*\(\)))\.[a-z_]\w*)+/gi,
      twoWayBindingSymbol = Symbol.for('twoWayBinding'),
      variableNameRegex   = /^\w*/;

/**
 * An optional component (view) model for adding bindings to configs
 * @class Neo.model.Component
 * @extends Neo.core.Base
 */
class Component extends _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    /**
     * True automatically applies the core.Observable mixin
     * @member {Boolean} observable=true
     * @static
     */
    static observable = true

    static config = {
        /**
         * @member {String} className='Neo.model.Component'
         * @protected
         */
        className: 'Neo.model.Component',
        /**
         * @member {String} ntype='component-model'
         * @protected
         */
        ntype: 'component-model',
        /**
         * @member {Object|null} bindings_=null
         * @protected
         */
        bindings_: null,
        /**
         * @member {Neo.component.Base|null} component=null
         * @protected
         */
        component: null,
        /**
         * @member {Object|null} data_=null
         */
        data_: null,
        /**
         * @member {Object|null} formulas_=null
         *
         * @example
         *     data: {
         *         a: 1,
         *         b: 2
         *     }
         *     formulas: {
         *         aPlusB: {
         *             bind: {
         *                 foo: 'a',
         *                 bar: 'b'
         *             },
         *             get(data) {
         *                 return data.foo + data.bar
         *             }
         *         }
         *     }
         */
        formulas_: null,
        /**
         * @member {Neo.model.Component|null} parent_=null
         */
        parent_: null,
        /**
         * @member {Object|null} stores_=null
         */
        stores_: null
    }

    /**
     * @param {Object} config
     */
    construct(config) {
        Neo.currentWorker.isUsingViewModels = true;
        super.construct(config);
        this.bindings = {}
    }

    /**
     * Adds a given key/value combination on this model level.
     * The method is used by setData() & setDataAtSameLevel()
     * in case the  data property does not exist yet.
     * @param {String} key
     * @param {*} value
     * @private
     */
    addDataProperty(key, value) {
        let me = this,
            data, scope;

        Neo.ns(key, true, me.data);

        data = me.getDataScope(key);
        scope = data.scope;

        scope[data.key] = value;

        me.createDataProperties(me.data, 'data')
    }

    /**
     * Triggered after the data config got changed
     * @param {Object|null} value
     * @param {Object|null} oldValue
     * @protected
     */
    afterSetData(value, oldValue) {
        value && this.createDataProperties(value, 'data')
    }

    /**
     * Triggered after the formulas config got changed
     * @param {Object|null} value
     * @param {Object|null} oldValue
     * @protected
     */
    afterSetFormulas(value, oldValue) {
        value && this.resolveFormulas(null)
    }

    /**
     * Triggered when accessing the data config
     * @param {Object} value
     * @protected
     */
    beforeGetData(value) {
        return value || {}
    }

    /**
     * Triggered before the parent config gets changed
     * @param {Neo.model.Component|null} value
     * @param {Neo.model.Component|null} oldValue
     * @protected
     */
    beforeSetParent(value, oldValue) {
        return value ? value : this.getParent()
    }

    /**
     * Triggered before the stores config gets changed.
     * @param {Object|null} value
     * @param {Object|null} oldValue
     * @returns {Object|null}
     * @protected
     */
    beforeSetStores(value, oldValue) {
        if (value) {
            let controller = this.component.getController();

            Object.entries(value).forEach(([key, storeValue]) => {
                controller?.parseConfig(storeValue);
                value[key] = _util_ClassSystem_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].beforeSetInstance(storeValue)
            })
        }

        return value
    }

    /**
     * @param {Function} formatter
     * @param {Object} data=null optionally pass this.getHierarchyData() for performance reasons
     * @returns {String}
     */
    callFormatter(formatter, data=null) {
        if (!data) {
            data = this.getHierarchyData()
        }

        return formatter.call(this, data)
    }

    /**
     * Registers a new binding in case a matching data property does exist.
     * Otherwise it will use the closest model with a match.
     * @param {String} componentId
     * @param {String} key
     * @param {String} value
     * @param {String} formatter
     */
    createBinding(componentId, key, value, formatter) {
        let me      = this,
            data    = me.getDataScope(key),
            scope   = data.scope,
            keyLeaf = data.key,
            bindingScope, parentModel;

        if (scope?.hasOwnProperty(keyLeaf)) {
            bindingScope = Neo.ns(`${key}.${componentId}`, true, me.bindings);
            bindingScope[value] = formatter
        } else {
            parentModel = me.getParent();

            if (parentModel) {
                parentModel.createBinding(componentId, key, value, formatter)
            } else {
                console.error('No model.Component found with the specified data property', componentId, keyLeaf, value)
            }
        }
    }

    /**
     * Registers a new binding in case a matching data property does exist.
     * Otherwise, it will use the closest model with a match.
     * @param {String} componentId
     * @param {String} formatter
     * @param {String} value
     * @returns {String[]}
     */
    createBindingByFormatter(componentId, formatter, value) {
        let me            = this,
            formatterVars = me.getFormatterVariables(formatter);

        formatterVars.forEach(key => {
            me.createBinding(componentId, key, value, formatter)
        });

        return formatterVars
    }

    /**
     * @param {Neo.component.Base} component
     */
    createBindings(component) {
        Object.entries(component.bind).forEach(([key, value]) => {
            let twoWayBinding = false,
                formatterVars;

            if (Neo.isObject(value)) {
                twoWayBinding = true;
                value         = value.value
            }

            if (!this.isStoreValue(value)) {
                formatterVars = this.createBindingByFormatter(component.id, value, key);

                if (twoWayBinding) {
                    component.bind[key].key = formatterVars[0];
                    component[twoWayBindingSymbol] = true;
                }
            }
        })
    }

    /**
     * @param {Object} config
     * @param {String} path
     */
    createDataProperties(config, path) {
        let me   = this,
            root = Neo.ns(path, false, me),
            descriptor, keyValue, newPath;

        Object.entries(config).forEach(([key, value]) => {
            if (!key.startsWith('_')) {
                descriptor = Object.getOwnPropertyDescriptor(root, key);
                newPath    = `${path}.${key}`

                if (!(typeof descriptor === 'object' && typeof descriptor.set === 'function')) {
                    keyValue = config[key];
                    me.createDataProperty(key, newPath, root);
                    root[key] = keyValue
                }

                if (Neo.isObject(value)) {
                    me.createDataProperties(config[key], newPath)
                }
            }
        })
    }

    /**
     * @param {String} key
     * @param {String} path
     * @param {Object} root=this.data
     */
    createDataProperty(key, path, root=this.data) {
        let me = this;

        if (path?.startsWith('data.')) {
            path = path.substring(5)
        }

        Object.defineProperty(root, key, {
            get() {
                let value = root['_' + key];

                if (Neo.typeOf(value) === 'Date') {
                    value = new Date(value.valueOf())
                }

                return value
            },

            set(value) {
                let _key     = `_${key}`,
                    oldValue = root[_key];

                if (!root[_key]) {
                    Object.defineProperty(root, _key, {
                        enumerable: false,
                        value,
                        writable  : true
                    })
                } else {
                    root[_key] = value
                }

                if (!Neo.isEqual(value, oldValue)) {
                    me.onDataPropertyChange(path ? path : key, value, oldValue)
                }
            }
        })
    }

    /**
     * Convenience shortcut
     * @param {String} [ntype]
     * @returns {Neo.controller.Component|null}
     */
    getController(ntype) {
        return this.component.getController(ntype)
    }

    /**
     * Access the closest data property inside the VM parent chain.
     * @param {String} key
     * @param {Neo.model.Component} originModel=this for internal usage only
     * @returns {*} value
     */
    getData(key, originModel=this) {
        let me      = this,
            data    = me.getDataScope(key),
            {scope} = data,
            keyLeaf = data.key,
            parentModel;

        if (scope?.hasOwnProperty(keyLeaf)) {
            return scope[keyLeaf]
        }

        parentModel = me.getParent();

        if (!parentModel) {
            console.error(`data property '${key}' does not exist.`, originModel)
        }

        return parentModel.getData(key, originModel)
    }

    /**
     * Helper method to get the scope for a nested data property via Neo.ns() if needed.
     *
     * Example: passing the value 'foo.bar.baz' will return the bar object as the scope
     * and 'baz' as the key.
     * @param key
     * @returns {Object}
     */
    getDataScope(key) {
        let me      = this,
            keyLeaf = key,
            {data}  = me;

        if (key.includes('.')) {
            key     = key.split('.');
            keyLeaf = key.pop();
            data    = Neo.ns(key.join('.'), false, data)
        }

        return {
            key  : keyLeaf,
            scope: data
        }
    }

    /**
     * Extracts data variables from a given formatter string
     * @param {String} value
     */
    getFormatterVariables(value) {
        if (Neo.isFunction(value)) {
            value = value.toString()
        }

        if (Neo.config.environment === 'dist/production') {
            // see: https://github.com/neomjs/neo/issues/2371
            // inside dist/prod the formatter:
            // data => DateUtil.convertToyyyymmdd(data.currentDate)
            // will get minified to:
            // e=>s.Z.convertToyyyymmdd(e.currentDate)
            // the new strategy: find the first variable name => "e"
            // replace it with "data":
            // data=>s.Z.convertToyyyymmdd(data.currentDate)
            // from there we can use the dev mode regex again.

            let dataName       = value.match(variableNameRegex)[0],
                variableRegExp = new RegExp(`(^|[^\\w.])(${dataName})(?!\\w)`, 'g');

            value = value.replace(variableRegExp, '$1data')
        }

        let dataVars = value.match(dataVariableRegex) || [],
            result   = [];

        dataVars.forEach(variable => {
            // remove the "data." at the start
            variable = variable.substr(5);
            _util_Array_mjs__WEBPACK_IMPORTED_MODULE_2__["default"].add(result, variable)
        });

        result.sort();

        return result
    }

    /**
     * Returns the merged data
     * @param {Object} data=this.getPlainData()
     * @returns {Object} data
     */
    getHierarchyData(data=this.getPlainData()) {
        let me     = this,
            parent = me.getParent();

        if (parent) {
            return {
                ...parent.getHierarchyData(data),
                ...me.getPlainData()
            }
        }

        return me.getPlainData()
    }

    /**
     * Returns a plain version of this.data.
     * This excludes the property getters & setters.
     * @param {Object} data=this.data
     * @returns {Object}
     */
    getPlainData(data=this.data) {
        let plainData = {};

        Object.entries(data).forEach(([key, value]) => {
            if (Neo.typeOf(value) === 'Object') {
                plainData[key] = this.getPlainData(value)
            } else {
                plainData[key] = value
            }
        });

        return plainData
    }

    /**
     * Get the closest model inside the components parent tree
     * @returns {Neo.model.Component|null}
     */
    getParent() {
        let {parent} = this;

        if (parent) {
            return parent
        }

        return this.component.parent?.getModel() || null
    }

    /**
     * Access the closest store inside the VM parent chain.
     * @param {String} key
     * @param {Neo.model.Component} originModel=this for internal usage only
     * @returns {Neo.data.Store}
     */
    getStore(key, originModel=this) {
        let me       = this,
            {stores} = me,
            parentModel;

        if (stores?.hasOwnProperty(key)) {
            return stores[key]
        }

        parentModel = me.getParent();

        if (!parentModel) {
            console.error(`store '${key}' not found inside this model or parents.`, originModel)
        }

        return parentModel.getStore(key, originModel)
    }

    /**
     * Internal method to avoid code redundancy.
     * Use setData() or setDataAtSameLevel() instead.
     *
     * Passing an originModel param will try to set each key on the closest property match
     * inside the parent model chain => setData()
     * Not passing it will set all values on the model where the method gets called => setDataAtSameLevel()
     * @param {Object|String} key
     * @param {*} value
     * @param {Neo.model.Component} [originModel]
     * @protected
     */
    internalSetData(key, value, originModel) {
        let me = this,
            data, keyLeaf, parentModel, scope;

        if (Neo.isObject(value) && !value.isRecord) {
            Object.entries(value).forEach(([dataKey, dataValue]) => {
                me.internalSetData(`${key}.${dataKey}`, dataValue, originModel)
            })
        } else if (Neo.isObject(key)) {
            Object.entries(key).forEach(([dataKey, dataValue]) => {
                me.internalSetData(dataKey, dataValue, originModel)
            })
        } else {
            data    = me.getDataScope(key);
            keyLeaf = data.key;
            scope   = data.scope;

            if (scope?.hasOwnProperty(keyLeaf)) {
                scope[keyLeaf] = value
            } else {
                if (originModel) {
                    parentModel = me.getParent();

                    if (parentModel) {
                        parentModel.internalSetData(key, value, originModel)
                    } else {
                        originModel.addDataProperty(key, value)
                    }
                } else {
                    me.addDataProperty(key, value)
                }
            }
        }
    }

    /**
     * Internal convenience method to check if a binding value is supposed to match a store
     * @param {String} value
     * @returns {Boolean}
     */
    isStoreValue(value) {
        return Neo.isString(value) && value.startsWith('stores.')
    }

    /**
     * Override this method to change the order configs are applied to this instance.
     * @param {Object} config
     * @param {Boolean} [preventOriginalConfig] True prevents the instance from getting an originalConfig property
     * @returns {Object} config
     */
    mergeConfig(config, preventOriginalConfig) {
        if (config.data) {
            config.data = Neo.merge(Neo.clone(this.constructor.config.data, true) || {}, config.data)
        }

        return super.mergeConfig(config, preventOriginalConfig)
    }

    /**
     * @param {String} key
     * @param {*} value
     * @param {*} oldValue
     */
    onDataPropertyChange(key, value, oldValue) {
        let me      = this,
            binding = me.bindings && Neo.ns(key, false, me.bindings),
            component, config, hierarchyData, model;

        if (binding) {
            hierarchyData = {};

            Object.entries(binding).forEach(([componentId, configObject]) => {
                component = Neo.getComponent(componentId) || Neo.get(componentId); // timing issue: the cmp might not be registered inside manager.Component yet
                config    = {};
                model     = component.getModel() || me;

                if (!hierarchyData[model.id]) {
                    hierarchyData[model.id] = model.getHierarchyData()
                }

                Object.entries(configObject).forEach(([configField, formatter]) => {
                    // we can not call me.callFormatter(), since a data property inside a parent model
                    // could have changed which is relying on data properties inside a closer model
                    config[configField] = model.callFormatter(formatter, hierarchyData[model.id])
                });

                component?.set(config)
            })
        }

        me.resolveFormulas({key, id: me.id, oldValue, value});

        me.fire('dataPropertyChange', {key, id: me.id, oldValue, value})
    }

    /**
     * This method will assign binding values at the earliest possible point inside the component lifecycle.
     * It can not store bindings though, since child component ids most likely do not exist yet.
     * @param {Neo.component.Base} component=this.component
     */
    parseConfig(component=this.component) {
        let me     = this,
            config = {};

        if (component.bind) {
            me.createBindings(component);

            Object.entries(component.bind).forEach(([key, value]) => {
                if (Neo.isObject(value)) {
                    value.key = me.getFormatterVariables(value.value)[0];
                    value = value.value
                }

                if (me.isStoreValue(value)) {
                    me.resolveStore(component, key, value.substring(7)) // remove the "stores." at the start
                } else {
                    config[key] = me.callFormatter(value)
                }
            });

            component.set(config)
        }
    }

    /**
     * Removes all bindings for a given component id inside this model
     * as well as inside all parent models.
     * @param {String} componentId
     */
    removeBindings(componentId) {
        let me          = this,
            parentModel = me.getParent();

        Object.entries(me.bindings).forEach(([dataProperty, binding]) => {
            delete binding[componentId]
        });

        parentModel?.removeBindings(componentId)
    }

    /**
     * Resolve the formulas initially and update, when data change
     * @param {Object} data data from event or null on initial call
     */
    resolveFormulas(data) {
        let me         = this,
            {formulas} = me,
            initialRun = !data,
            affectFormula, bindObject, fn, key, result, value;

        if (formulas) {
            if (!initialRun && (!data.key || !data.value)) {
                console.warn('[ViewModel:formulas] missing key or value', data.key, data.value)
            }

            for ([key, value] of Object.entries(formulas)) {
                affectFormula = true;

                // Check if the change affects a formula
                if (!initialRun) {
                    affectFormula = Object.values(value.bind).includes(data.key)
                }

                if (affectFormula) {
                    // Create Bind-Object and fill with new values
                    bindObject = Neo.clone(value.bind);
                    fn         = value.get;

                    Object.keys(bindObject).forEach((key, index) => {
                        bindObject[key] = me.getData(bindObject[key])
                    });

                    // Calc the formula
                    result = fn(bindObject);

                    // Assign if no error or null
                    if (isNaN(result)) {
                        me.setData(key, null)
                    } else {
                        me.setData(key, result)
                    }
                }
            }
        }
    }

    /**
     * @param {Neo.component.Base} component
     * @param {String} configName
     * @param {String} storeName
     */
    resolveStore(component, configName, storeName) {
        let store = this.getStore(storeName);

        if (component[configName] !== store) {
            component[configName] = store
        }
    }

    /**
     * The method will assign all values to the closest model where it finds an existing key.
     * In case no match is found inside the parent chain, a new data property will get generated.
     * @param {Object|String} key
     * @param {*} value
     */
    setData(key, value) {
        this.internalSetData(key, value, this)
    }

    /**
     * Use this method instead of setData() in case you want to enforce
     * setting all keys on this instance instead of looking for matches inside parent models.
     * @param {Object|String} key
     * @param {*} value
     */
    setDataAtSameLevel(key, value) {
        this.internalSetData(key, value)
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(Component));


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmtzL2FwcC92ZW5kb3JzLXNyY19tb2RlbF9Db21wb25lbnRfbWpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQStDO0FBQ087QUFDTjtBQUNLOztBQUVyRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixzREFBSTtBQUM1QjtBQUNBO0FBQ0EsZ0JBQWdCLFNBQVM7QUFDekI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGFBQWE7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IseUJBQXlCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGFBQWE7QUFDakM7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGFBQWE7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDBCQUEwQjtBQUM5QztBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsYUFBYTtBQUNqQztBQUNBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsR0FBRztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxhQUFhO0FBQzVCLGVBQWUsYUFBYTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLGFBQWE7QUFDNUIsZUFBZSxhQUFhO0FBQzVCO0FBQ0E7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QixlQUFlLEdBQUc7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZUFBZSxlQUFlO0FBQzlCLGVBQWUsR0FBRztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlFQUFlLHlCQUF5QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmVvLm1qcy8uL3NyYy9tb2RlbC9Db21wb25lbnQubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCYXNlICAgICAgICAgICAgZnJvbSAnLi4vY29yZS9CYXNlLm1qcyc7XG5pbXBvcnQgQ2xhc3NTeXN0ZW1VdGlsIGZyb20gJy4uL3V0aWwvQ2xhc3NTeXN0ZW0ubWpzJztcbmltcG9ydCBOZW9BcnJheSAgICAgICAgZnJvbSAnLi4vdXRpbC9BcnJheS5tanMnO1xuaW1wb3J0IE9ic2VydmFibGUgICAgICBmcm9tICcuLi9jb3JlL09ic2VydmFibGUubWpzJztcblxuY29uc3QgZGF0YVZhcmlhYmxlUmVnZXggICA9IC9kYXRhKCg/IShcXC5bYS16X11cXHcqXFwoXFwpKSlcXC5bYS16X11cXHcqKSsvZ2ksXG4gICAgICB0d29XYXlCaW5kaW5nU3ltYm9sID0gU3ltYm9sLmZvcigndHdvV2F5QmluZGluZycpLFxuICAgICAgdmFyaWFibGVOYW1lUmVnZXggICA9IC9eXFx3Ki87XG5cbi8qKlxuICogQW4gb3B0aW9uYWwgY29tcG9uZW50ICh2aWV3KSBtb2RlbCBmb3IgYWRkaW5nIGJpbmRpbmdzIHRvIGNvbmZpZ3NcbiAqIEBjbGFzcyBOZW8ubW9kZWwuQ29tcG9uZW50XG4gKiBAZXh0ZW5kcyBOZW8uY29yZS5CYXNlXG4gKi9cbmNsYXNzIENvbXBvbmVudCBleHRlbmRzIEJhc2Uge1xuICAgIC8qKlxuICAgICAqIFRydWUgYXV0b21hdGljYWxseSBhcHBsaWVzIHRoZSBjb3JlLk9ic2VydmFibGUgbWl4aW5cbiAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBvYnNlcnZhYmxlPXRydWVcbiAgICAgKiBAc3RhdGljXG4gICAgICovXG4gICAgc3RhdGljIG9ic2VydmFibGUgPSB0cnVlXG5cbiAgICBzdGF0aWMgY29uZmlnID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBjbGFzc05hbWU9J05lby5tb2RlbC5Db21wb25lbnQnXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIGNsYXNzTmFtZTogJ05lby5tb2RlbC5Db21wb25lbnQnLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBudHlwZT0nY29tcG9uZW50LW1vZGVsJ1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBudHlwZTogJ2NvbXBvbmVudC1tb2RlbCcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3R8bnVsbH0gYmluZGluZ3NfPW51bGxcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgYmluZGluZ3NfOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7TmVvLmNvbXBvbmVudC5CYXNlfG51bGx9IGNvbXBvbmVudD1udWxsXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIGNvbXBvbmVudDogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge09iamVjdHxudWxsfSBkYXRhXz1udWxsXG4gICAgICAgICAqL1xuICAgICAgICBkYXRhXzogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge09iamVjdHxudWxsfSBmb3JtdWxhc189bnVsbFxuICAgICAgICAgKlxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiAgICAgZGF0YToge1xuICAgICAgICAgKiAgICAgICAgIGE6IDEsXG4gICAgICAgICAqICAgICAgICAgYjogMlxuICAgICAgICAgKiAgICAgfVxuICAgICAgICAgKiAgICAgZm9ybXVsYXM6IHtcbiAgICAgICAgICogICAgICAgICBhUGx1c0I6IHtcbiAgICAgICAgICogICAgICAgICAgICAgYmluZDoge1xuICAgICAgICAgKiAgICAgICAgICAgICAgICAgZm9vOiAnYScsXG4gICAgICAgICAqICAgICAgICAgICAgICAgICBiYXI6ICdiJ1xuICAgICAgICAgKiAgICAgICAgICAgICB9LFxuICAgICAgICAgKiAgICAgICAgICAgICBnZXQoZGF0YSkge1xuICAgICAgICAgKiAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEuZm9vICsgZGF0YS5iYXJcbiAgICAgICAgICogICAgICAgICAgICAgfVxuICAgICAgICAgKiAgICAgICAgIH1cbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICovXG4gICAgICAgIGZvcm11bGFzXzogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge05lby5tb2RlbC5Db21wb25lbnR8bnVsbH0gcGFyZW50Xz1udWxsXG4gICAgICAgICAqL1xuICAgICAgICBwYXJlbnRfOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7T2JqZWN0fG51bGx9IHN0b3Jlc189bnVsbFxuICAgICAgICAgKi9cbiAgICAgICAgc3RvcmVzXzogbnVsbFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3QoY29uZmlnKSB7XG4gICAgICAgIE5lby5jdXJyZW50V29ya2VyLmlzVXNpbmdWaWV3TW9kZWxzID0gdHJ1ZTtcbiAgICAgICAgc3VwZXIuY29uc3RydWN0KGNvbmZpZyk7XG4gICAgICAgIHRoaXMuYmluZGluZ3MgPSB7fVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBnaXZlbiBrZXkvdmFsdWUgY29tYmluYXRpb24gb24gdGhpcyBtb2RlbCBsZXZlbC5cbiAgICAgKiBUaGUgbWV0aG9kIGlzIHVzZWQgYnkgc2V0RGF0YSgpICYgc2V0RGF0YUF0U2FtZUxldmVsKClcbiAgICAgKiBpbiBjYXNlIHRoZSAgZGF0YSBwcm9wZXJ0eSBkb2VzIG5vdCBleGlzdCB5ZXQuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGFkZERhdGFQcm9wZXJ0eShrZXksIHZhbHVlKSB7XG4gICAgICAgIGxldCBtZSA9IHRoaXMsXG4gICAgICAgICAgICBkYXRhLCBzY29wZTtcblxuICAgICAgICBOZW8ubnMoa2V5LCB0cnVlLCBtZS5kYXRhKTtcblxuICAgICAgICBkYXRhID0gbWUuZ2V0RGF0YVNjb3BlKGtleSk7XG4gICAgICAgIHNjb3BlID0gZGF0YS5zY29wZTtcblxuICAgICAgICBzY29wZVtkYXRhLmtleV0gPSB2YWx1ZTtcblxuICAgICAgICBtZS5jcmVhdGVEYXRhUHJvcGVydGllcyhtZS5kYXRhLCAnZGF0YScpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGFmdGVyIHRoZSBkYXRhIGNvbmZpZyBnb3QgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fG51bGx9IHZhbHVlXG4gICAgICogQHBhcmFtIHtPYmplY3R8bnVsbH0gb2xkVmFsdWVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYWZ0ZXJTZXREYXRhKHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICB2YWx1ZSAmJiB0aGlzLmNyZWF0ZURhdGFQcm9wZXJ0aWVzKHZhbHVlLCAnZGF0YScpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGFmdGVyIHRoZSBmb3JtdWxhcyBjb25maWcgZ290IGNoYW5nZWRcbiAgICAgKiBAcGFyYW0ge09iamVjdHxudWxsfSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fG51bGx9IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFmdGVyU2V0Rm9ybXVsYXModmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIHZhbHVlICYmIHRoaXMucmVzb2x2ZUZvcm11bGFzKG51bGwpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIHdoZW4gYWNjZXNzaW5nIHRoZSBkYXRhIGNvbmZpZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBiZWZvcmVHZXREYXRhKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSB8fCB7fVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCBiZWZvcmUgdGhlIHBhcmVudCBjb25maWcgZ2V0cyBjaGFuZ2VkXG4gICAgICogQHBhcmFtIHtOZW8ubW9kZWwuQ29tcG9uZW50fG51bGx9IHZhbHVlXG4gICAgICogQHBhcmFtIHtOZW8ubW9kZWwuQ29tcG9uZW50fG51bGx9IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGJlZm9yZVNldFBhcmVudCh2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID8gdmFsdWUgOiB0aGlzLmdldFBhcmVudCgpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGJlZm9yZSB0aGUgc3RvcmVzIGNvbmZpZyBnZXRzIGNoYW5nZWQuXG4gICAgICogQHBhcmFtIHtPYmplY3R8bnVsbH0gdmFsdWVcbiAgICAgKiBAcGFyYW0ge09iamVjdHxudWxsfSBvbGRWYWx1ZVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R8bnVsbH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYmVmb3JlU2V0U3RvcmVzKHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIGxldCBjb250cm9sbGVyID0gdGhpcy5jb21wb25lbnQuZ2V0Q29udHJvbGxlcigpO1xuXG4gICAgICAgICAgICBPYmplY3QuZW50cmllcyh2YWx1ZSkuZm9yRWFjaCgoW2tleSwgc3RvcmVWYWx1ZV0pID0+IHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyPy5wYXJzZUNvbmZpZyhzdG9yZVZhbHVlKTtcbiAgICAgICAgICAgICAgICB2YWx1ZVtrZXldID0gQ2xhc3NTeXN0ZW1VdGlsLmJlZm9yZVNldEluc3RhbmNlKHN0b3JlVmFsdWUpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm9ybWF0dGVyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGE9bnVsbCBvcHRpb25hbGx5IHBhc3MgdGhpcy5nZXRIaWVyYXJjaHlEYXRhKCkgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnNcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxuICAgICAqL1xuICAgIGNhbGxGb3JtYXR0ZXIoZm9ybWF0dGVyLCBkYXRhPW51bGwpIHtcbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICBkYXRhID0gdGhpcy5nZXRIaWVyYXJjaHlEYXRhKClcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmb3JtYXR0ZXIuY2FsbCh0aGlzLCBkYXRhKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyBhIG5ldyBiaW5kaW5nIGluIGNhc2UgYSBtYXRjaGluZyBkYXRhIHByb3BlcnR5IGRvZXMgZXhpc3QuXG4gICAgICogT3RoZXJ3aXNlIGl0IHdpbGwgdXNlIHRoZSBjbG9zZXN0IG1vZGVsIHdpdGggYSBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gY29tcG9uZW50SWRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGZvcm1hdHRlclxuICAgICAqL1xuICAgIGNyZWF0ZUJpbmRpbmcoY29tcG9uZW50SWQsIGtleSwgdmFsdWUsIGZvcm1hdHRlcikge1xuICAgICAgICBsZXQgbWUgICAgICA9IHRoaXMsXG4gICAgICAgICAgICBkYXRhICAgID0gbWUuZ2V0RGF0YVNjb3BlKGtleSksXG4gICAgICAgICAgICBzY29wZSAgID0gZGF0YS5zY29wZSxcbiAgICAgICAgICAgIGtleUxlYWYgPSBkYXRhLmtleSxcbiAgICAgICAgICAgIGJpbmRpbmdTY29wZSwgcGFyZW50TW9kZWw7XG5cbiAgICAgICAgaWYgKHNjb3BlPy5oYXNPd25Qcm9wZXJ0eShrZXlMZWFmKSkge1xuICAgICAgICAgICAgYmluZGluZ1Njb3BlID0gTmVvLm5zKGAke2tleX0uJHtjb21wb25lbnRJZH1gLCB0cnVlLCBtZS5iaW5kaW5ncyk7XG4gICAgICAgICAgICBiaW5kaW5nU2NvcGVbdmFsdWVdID0gZm9ybWF0dGVyXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJlbnRNb2RlbCA9IG1lLmdldFBhcmVudCgpO1xuXG4gICAgICAgICAgICBpZiAocGFyZW50TW9kZWwpIHtcbiAgICAgICAgICAgICAgICBwYXJlbnRNb2RlbC5jcmVhdGVCaW5kaW5nKGNvbXBvbmVudElkLCBrZXksIHZhbHVlLCBmb3JtYXR0ZXIpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ05vIG1vZGVsLkNvbXBvbmVudCBmb3VuZCB3aXRoIHRoZSBzcGVjaWZpZWQgZGF0YSBwcm9wZXJ0eScsIGNvbXBvbmVudElkLCBrZXlMZWFmLCB2YWx1ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyBhIG5ldyBiaW5kaW5nIGluIGNhc2UgYSBtYXRjaGluZyBkYXRhIHByb3BlcnR5IGRvZXMgZXhpc3QuXG4gICAgICogT3RoZXJ3aXNlLCBpdCB3aWxsIHVzZSB0aGUgY2xvc2VzdCBtb2RlbCB3aXRoIGEgbWF0Y2guXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGNvbXBvbmVudElkXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGZvcm1hdHRlclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxuICAgICAqIEByZXR1cm5zIHtTdHJpbmdbXX1cbiAgICAgKi9cbiAgICBjcmVhdGVCaW5kaW5nQnlGb3JtYXR0ZXIoY29tcG9uZW50SWQsIGZvcm1hdHRlciwgdmFsdWUpIHtcbiAgICAgICAgbGV0IG1lICAgICAgICAgICAgPSB0aGlzLFxuICAgICAgICAgICAgZm9ybWF0dGVyVmFycyA9IG1lLmdldEZvcm1hdHRlclZhcmlhYmxlcyhmb3JtYXR0ZXIpO1xuXG4gICAgICAgIGZvcm1hdHRlclZhcnMuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgICAgbWUuY3JlYXRlQmluZGluZyhjb21wb25lbnRJZCwga2V5LCB2YWx1ZSwgZm9ybWF0dGVyKVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZm9ybWF0dGVyVmFyc1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7TmVvLmNvbXBvbmVudC5CYXNlfSBjb21wb25lbnRcbiAgICAgKi9cbiAgICBjcmVhdGVCaW5kaW5ncyhjb21wb25lbnQpIHtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMoY29tcG9uZW50LmJpbmQpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgbGV0IHR3b1dheUJpbmRpbmcgPSBmYWxzZSxcbiAgICAgICAgICAgICAgICBmb3JtYXR0ZXJWYXJzO1xuXG4gICAgICAgICAgICBpZiAoTmVvLmlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHR3b1dheUJpbmRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHZhbHVlICAgICAgICAgPSB2YWx1ZS52YWx1ZVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNTdG9yZVZhbHVlKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGZvcm1hdHRlclZhcnMgPSB0aGlzLmNyZWF0ZUJpbmRpbmdCeUZvcm1hdHRlcihjb21wb25lbnQuaWQsIHZhbHVlLCBrZXkpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHR3b1dheUJpbmRpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50LmJpbmRba2V5XS5rZXkgPSBmb3JtYXR0ZXJWYXJzWzBdO1xuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRbdHdvV2F5QmluZGluZ1N5bWJvbF0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHBhdGhcbiAgICAgKi9cbiAgICBjcmVhdGVEYXRhUHJvcGVydGllcyhjb25maWcsIHBhdGgpIHtcbiAgICAgICAgbGV0IG1lICAgPSB0aGlzLFxuICAgICAgICAgICAgcm9vdCA9IE5lby5ucyhwYXRoLCBmYWxzZSwgbWUpLFxuICAgICAgICAgICAgZGVzY3JpcHRvciwga2V5VmFsdWUsIG5ld1BhdGg7XG5cbiAgICAgICAgT2JqZWN0LmVudHJpZXMoY29uZmlnKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGlmICgha2V5LnN0YXJ0c1dpdGgoJ18nKSkge1xuICAgICAgICAgICAgICAgIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHJvb3QsIGtleSk7XG4gICAgICAgICAgICAgICAgbmV3UGF0aCAgICA9IGAke3BhdGh9LiR7a2V5fWBcblxuICAgICAgICAgICAgICAgIGlmICghKHR5cGVvZiBkZXNjcmlwdG9yID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgZGVzY3JpcHRvci5zZXQgPT09ICdmdW5jdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIGtleVZhbHVlID0gY29uZmlnW2tleV07XG4gICAgICAgICAgICAgICAgICAgIG1lLmNyZWF0ZURhdGFQcm9wZXJ0eShrZXksIG5ld1BhdGgsIHJvb3QpO1xuICAgICAgICAgICAgICAgICAgICByb290W2tleV0gPSBrZXlWYWx1ZVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChOZW8uaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lLmNyZWF0ZURhdGFQcm9wZXJ0aWVzKGNvbmZpZ1trZXldLCBuZXdQYXRoKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHBhdGhcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcm9vdD10aGlzLmRhdGFcbiAgICAgKi9cbiAgICBjcmVhdGVEYXRhUHJvcGVydHkoa2V5LCBwYXRoLCByb290PXRoaXMuZGF0YSkge1xuICAgICAgICBsZXQgbWUgPSB0aGlzO1xuXG4gICAgICAgIGlmIChwYXRoPy5zdGFydHNXaXRoKCdkYXRhLicpKSB7XG4gICAgICAgICAgICBwYXRoID0gcGF0aC5zdWJzdHJpbmcoNSlcbiAgICAgICAgfVxuXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyb290LCBrZXksIHtcbiAgICAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSByb290WydfJyArIGtleV07XG5cbiAgICAgICAgICAgICAgICBpZiAoTmVvLnR5cGVPZih2YWx1ZSkgPT09ICdEYXRlJykge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG5ldyBEYXRlKHZhbHVlLnZhbHVlT2YoKSlcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGxldCBfa2V5ICAgICA9IGBfJHtrZXl9YCxcbiAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWUgPSByb290W19rZXldO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFyb290W19rZXldKSB7XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyb290LCBfa2V5LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGFibGUgIDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJvb3RbX2tleV0gPSB2YWx1ZVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghTmVvLmlzRXF1YWwodmFsdWUsIG9sZFZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBtZS5vbkRhdGFQcm9wZXJ0eUNoYW5nZShwYXRoID8gcGF0aCA6IGtleSwgdmFsdWUsIG9sZFZhbHVlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZW5pZW5jZSBzaG9ydGN1dFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbbnR5cGVdXG4gICAgICogQHJldHVybnMge05lby5jb250cm9sbGVyLkNvbXBvbmVudHxudWxsfVxuICAgICAqL1xuICAgIGdldENvbnRyb2xsZXIobnR5cGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50LmdldENvbnRyb2xsZXIobnR5cGUpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWNjZXNzIHRoZSBjbG9zZXN0IGRhdGEgcHJvcGVydHkgaW5zaWRlIHRoZSBWTSBwYXJlbnQgY2hhaW4uXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICAgICAqIEBwYXJhbSB7TmVvLm1vZGVsLkNvbXBvbmVudH0gb3JpZ2luTW9kZWw9dGhpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuICAgICAqIEByZXR1cm5zIHsqfSB2YWx1ZVxuICAgICAqL1xuICAgIGdldERhdGEoa2V5LCBvcmlnaW5Nb2RlbD10aGlzKSB7XG4gICAgICAgIGxldCBtZSAgICAgID0gdGhpcyxcbiAgICAgICAgICAgIGRhdGEgICAgPSBtZS5nZXREYXRhU2NvcGUoa2V5KSxcbiAgICAgICAgICAgIHtzY29wZX0gPSBkYXRhLFxuICAgICAgICAgICAga2V5TGVhZiA9IGRhdGEua2V5LFxuICAgICAgICAgICAgcGFyZW50TW9kZWw7XG5cbiAgICAgICAgaWYgKHNjb3BlPy5oYXNPd25Qcm9wZXJ0eShrZXlMZWFmKSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjb3BlW2tleUxlYWZdXG4gICAgICAgIH1cblxuICAgICAgICBwYXJlbnRNb2RlbCA9IG1lLmdldFBhcmVudCgpO1xuXG4gICAgICAgIGlmICghcGFyZW50TW9kZWwpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYGRhdGEgcHJvcGVydHkgJyR7a2V5fScgZG9lcyBub3QgZXhpc3QuYCwgb3JpZ2luTW9kZWwpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGFyZW50TW9kZWwuZ2V0RGF0YShrZXksIG9yaWdpbk1vZGVsKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhlbHBlciBtZXRob2QgdG8gZ2V0IHRoZSBzY29wZSBmb3IgYSBuZXN0ZWQgZGF0YSBwcm9wZXJ0eSB2aWEgTmVvLm5zKCkgaWYgbmVlZGVkLlxuICAgICAqXG4gICAgICogRXhhbXBsZTogcGFzc2luZyB0aGUgdmFsdWUgJ2Zvby5iYXIuYmF6JyB3aWxsIHJldHVybiB0aGUgYmFyIG9iamVjdCBhcyB0aGUgc2NvcGVcbiAgICAgKiBhbmQgJ2JheicgYXMgdGhlIGtleS5cbiAgICAgKiBAcGFyYW0ga2V5XG4gICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAgKi9cbiAgICBnZXREYXRhU2NvcGUoa2V5KSB7XG4gICAgICAgIGxldCBtZSAgICAgID0gdGhpcyxcbiAgICAgICAgICAgIGtleUxlYWYgPSBrZXksXG4gICAgICAgICAgICB7ZGF0YX0gID0gbWU7XG5cbiAgICAgICAgaWYgKGtleS5pbmNsdWRlcygnLicpKSB7XG4gICAgICAgICAgICBrZXkgICAgID0ga2V5LnNwbGl0KCcuJyk7XG4gICAgICAgICAgICBrZXlMZWFmID0ga2V5LnBvcCgpO1xuICAgICAgICAgICAgZGF0YSAgICA9IE5lby5ucyhrZXkuam9pbignLicpLCBmYWxzZSwgZGF0YSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBrZXkgIDoga2V5TGVhZixcbiAgICAgICAgICAgIHNjb3BlOiBkYXRhXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeHRyYWN0cyBkYXRhIHZhcmlhYmxlcyBmcm9tIGEgZ2l2ZW4gZm9ybWF0dGVyIHN0cmluZ1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxuICAgICAqL1xuICAgIGdldEZvcm1hdHRlclZhcmlhYmxlcyh2YWx1ZSkge1xuICAgICAgICBpZiAoTmVvLmlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKClcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChOZW8uY29uZmlnLmVudmlyb25tZW50ID09PSAnZGlzdC9wcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgLy8gc2VlOiBodHRwczovL2dpdGh1Yi5jb20vbmVvbWpzL25lby9pc3N1ZXMvMjM3MVxuICAgICAgICAgICAgLy8gaW5zaWRlIGRpc3QvcHJvZCB0aGUgZm9ybWF0dGVyOlxuICAgICAgICAgICAgLy8gZGF0YSA9PiBEYXRlVXRpbC5jb252ZXJ0VG95eXl5bW1kZChkYXRhLmN1cnJlbnREYXRlKVxuICAgICAgICAgICAgLy8gd2lsbCBnZXQgbWluaWZpZWQgdG86XG4gICAgICAgICAgICAvLyBlPT5zLlouY29udmVydFRveXl5eW1tZGQoZS5jdXJyZW50RGF0ZSlcbiAgICAgICAgICAgIC8vIHRoZSBuZXcgc3RyYXRlZ3k6IGZpbmQgdGhlIGZpcnN0IHZhcmlhYmxlIG5hbWUgPT4gXCJlXCJcbiAgICAgICAgICAgIC8vIHJlcGxhY2UgaXQgd2l0aCBcImRhdGFcIjpcbiAgICAgICAgICAgIC8vIGRhdGE9PnMuWi5jb252ZXJ0VG95eXl5bW1kZChkYXRhLmN1cnJlbnREYXRlKVxuICAgICAgICAgICAgLy8gZnJvbSB0aGVyZSB3ZSBjYW4gdXNlIHRoZSBkZXYgbW9kZSByZWdleCBhZ2Fpbi5cblxuICAgICAgICAgICAgbGV0IGRhdGFOYW1lICAgICAgID0gdmFsdWUubWF0Y2godmFyaWFibGVOYW1lUmVnZXgpWzBdLFxuICAgICAgICAgICAgICAgIHZhcmlhYmxlUmVnRXhwID0gbmV3IFJlZ0V4cChgKF58W15cXFxcdy5dKSgke2RhdGFOYW1lfSkoPyFcXFxcdylgLCAnZycpO1xuXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UodmFyaWFibGVSZWdFeHAsICckMWRhdGEnKVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGRhdGFWYXJzID0gdmFsdWUubWF0Y2goZGF0YVZhcmlhYmxlUmVnZXgpIHx8IFtdLFxuICAgICAgICAgICAgcmVzdWx0ICAgPSBbXTtcblxuICAgICAgICBkYXRhVmFycy5mb3JFYWNoKHZhcmlhYmxlID0+IHtcbiAgICAgICAgICAgIC8vIHJlbW92ZSB0aGUgXCJkYXRhLlwiIGF0IHRoZSBzdGFydFxuICAgICAgICAgICAgdmFyaWFibGUgPSB2YXJpYWJsZS5zdWJzdHIoNSk7XG4gICAgICAgICAgICBOZW9BcnJheS5hZGQocmVzdWx0LCB2YXJpYWJsZSlcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmVzdWx0LnNvcnQoKTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbWVyZ2VkIGRhdGFcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YT10aGlzLmdldFBsYWluRGF0YSgpXG4gICAgICogQHJldHVybnMge09iamVjdH0gZGF0YVxuICAgICAqL1xuICAgIGdldEhpZXJhcmNoeURhdGEoZGF0YT10aGlzLmdldFBsYWluRGF0YSgpKSB7XG4gICAgICAgIGxldCBtZSAgICAgPSB0aGlzLFxuICAgICAgICAgICAgcGFyZW50ID0gbWUuZ2V0UGFyZW50KCk7XG5cbiAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5wYXJlbnQuZ2V0SGllcmFyY2h5RGF0YShkYXRhKSxcbiAgICAgICAgICAgICAgICAuLi5tZS5nZXRQbGFpbkRhdGEoKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1lLmdldFBsYWluRGF0YSgpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHBsYWluIHZlcnNpb24gb2YgdGhpcy5kYXRhLlxuICAgICAqIFRoaXMgZXhjbHVkZXMgdGhlIHByb3BlcnR5IGdldHRlcnMgJiBzZXR0ZXJzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhPXRoaXMuZGF0YVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgICovXG4gICAgZ2V0UGxhaW5EYXRhKGRhdGE9dGhpcy5kYXRhKSB7XG4gICAgICAgIGxldCBwbGFpbkRhdGEgPSB7fTtcblxuICAgICAgICBPYmplY3QuZW50cmllcyhkYXRhKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGlmIChOZW8udHlwZU9mKHZhbHVlKSA9PT0gJ09iamVjdCcpIHtcbiAgICAgICAgICAgICAgICBwbGFpbkRhdGFba2V5XSA9IHRoaXMuZ2V0UGxhaW5EYXRhKHZhbHVlKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwbGFpbkRhdGFba2V5XSA9IHZhbHVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBwbGFpbkRhdGFcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGNsb3Nlc3QgbW9kZWwgaW5zaWRlIHRoZSBjb21wb25lbnRzIHBhcmVudCB0cmVlXG4gICAgICogQHJldHVybnMge05lby5tb2RlbC5Db21wb25lbnR8bnVsbH1cbiAgICAgKi9cbiAgICBnZXRQYXJlbnQoKSB7XG4gICAgICAgIGxldCB7cGFyZW50fSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcmVudFxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50LnBhcmVudD8uZ2V0TW9kZWwoKSB8fCBudWxsXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWNjZXNzIHRoZSBjbG9zZXN0IHN0b3JlIGluc2lkZSB0aGUgVk0gcGFyZW50IGNoYWluLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcbiAgICAgKiBAcGFyYW0ge05lby5tb2RlbC5Db21wb25lbnR9IG9yaWdpbk1vZGVsPXRoaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcbiAgICAgKiBAcmV0dXJucyB7TmVvLmRhdGEuU3RvcmV9XG4gICAgICovXG4gICAgZ2V0U3RvcmUoa2V5LCBvcmlnaW5Nb2RlbD10aGlzKSB7XG4gICAgICAgIGxldCBtZSAgICAgICA9IHRoaXMsXG4gICAgICAgICAgICB7c3RvcmVzfSA9IG1lLFxuICAgICAgICAgICAgcGFyZW50TW9kZWw7XG5cbiAgICAgICAgaWYgKHN0b3Jlcz8uaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHN0b3Jlc1trZXldXG4gICAgICAgIH1cblxuICAgICAgICBwYXJlbnRNb2RlbCA9IG1lLmdldFBhcmVudCgpO1xuXG4gICAgICAgIGlmICghcGFyZW50TW9kZWwpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYHN0b3JlICcke2tleX0nIG5vdCBmb3VuZCBpbnNpZGUgdGhpcyBtb2RlbCBvciBwYXJlbnRzLmAsIG9yaWdpbk1vZGVsKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBhcmVudE1vZGVsLmdldFN0b3JlKGtleSwgb3JpZ2luTW9kZWwpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW50ZXJuYWwgbWV0aG9kIHRvIGF2b2lkIGNvZGUgcmVkdW5kYW5jeS5cbiAgICAgKiBVc2Ugc2V0RGF0YSgpIG9yIHNldERhdGFBdFNhbWVMZXZlbCgpIGluc3RlYWQuXG4gICAgICpcbiAgICAgKiBQYXNzaW5nIGFuIG9yaWdpbk1vZGVsIHBhcmFtIHdpbGwgdHJ5IHRvIHNldCBlYWNoIGtleSBvbiB0aGUgY2xvc2VzdCBwcm9wZXJ0eSBtYXRjaFxuICAgICAqIGluc2lkZSB0aGUgcGFyZW50IG1vZGVsIGNoYWluID0+IHNldERhdGEoKVxuICAgICAqIE5vdCBwYXNzaW5nIGl0IHdpbGwgc2V0IGFsbCB2YWx1ZXMgb24gdGhlIG1vZGVsIHdoZXJlIHRoZSBtZXRob2QgZ2V0cyBjYWxsZWQgPT4gc2V0RGF0YUF0U2FtZUxldmVsKClcbiAgICAgKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGtleVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICAgKiBAcGFyYW0ge05lby5tb2RlbC5Db21wb25lbnR9IFtvcmlnaW5Nb2RlbF1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgaW50ZXJuYWxTZXREYXRhKGtleSwgdmFsdWUsIG9yaWdpbk1vZGVsKSB7XG4gICAgICAgIGxldCBtZSA9IHRoaXMsXG4gICAgICAgICAgICBkYXRhLCBrZXlMZWFmLCBwYXJlbnRNb2RlbCwgc2NvcGU7XG5cbiAgICAgICAgaWYgKE5lby5pc09iamVjdCh2YWx1ZSkgJiYgIXZhbHVlLmlzUmVjb3JkKSB7XG4gICAgICAgICAgICBPYmplY3QuZW50cmllcyh2YWx1ZSkuZm9yRWFjaCgoW2RhdGFLZXksIGRhdGFWYWx1ZV0pID0+IHtcbiAgICAgICAgICAgICAgICBtZS5pbnRlcm5hbFNldERhdGEoYCR7a2V5fS4ke2RhdGFLZXl9YCwgZGF0YVZhbHVlLCBvcmlnaW5Nb2RlbClcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSBpZiAoTmVvLmlzT2JqZWN0KGtleSkpIHtcbiAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKGtleSkuZm9yRWFjaCgoW2RhdGFLZXksIGRhdGFWYWx1ZV0pID0+IHtcbiAgICAgICAgICAgICAgICBtZS5pbnRlcm5hbFNldERhdGEoZGF0YUtleSwgZGF0YVZhbHVlLCBvcmlnaW5Nb2RlbClcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkYXRhICAgID0gbWUuZ2V0RGF0YVNjb3BlKGtleSk7XG4gICAgICAgICAgICBrZXlMZWFmID0gZGF0YS5rZXk7XG4gICAgICAgICAgICBzY29wZSAgID0gZGF0YS5zY29wZTtcblxuICAgICAgICAgICAgaWYgKHNjb3BlPy5oYXNPd25Qcm9wZXJ0eShrZXlMZWFmKSkge1xuICAgICAgICAgICAgICAgIHNjb3BlW2tleUxlYWZdID0gdmFsdWVcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKG9yaWdpbk1vZGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudE1vZGVsID0gbWUuZ2V0UGFyZW50KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudE1vZGVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRNb2RlbC5pbnRlcm5hbFNldERhdGEoa2V5LCB2YWx1ZSwgb3JpZ2luTW9kZWwpXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5Nb2RlbC5hZGREYXRhUHJvcGVydHkoa2V5LCB2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG1lLmFkZERhdGFQcm9wZXJ0eShrZXksIHZhbHVlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludGVybmFsIGNvbnZlbmllbmNlIG1ldGhvZCB0byBjaGVjayBpZiBhIGJpbmRpbmcgdmFsdWUgaXMgc3VwcG9zZWQgdG8gbWF0Y2ggYSBzdG9yZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuICAgIGlzU3RvcmVWYWx1ZSh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gTmVvLmlzU3RyaW5nKHZhbHVlKSAmJiB2YWx1ZS5zdGFydHNXaXRoKCdzdG9yZXMuJylcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZSB0aGlzIG1ldGhvZCB0byBjaGFuZ2UgdGhlIG9yZGVyIGNvbmZpZ3MgYXJlIGFwcGxpZWQgdG8gdGhpcyBpbnN0YW5jZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbcHJldmVudE9yaWdpbmFsQ29uZmlnXSBUcnVlIHByZXZlbnRzIHRoZSBpbnN0YW5jZSBmcm9tIGdldHRpbmcgYW4gb3JpZ2luYWxDb25maWcgcHJvcGVydHlcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBjb25maWdcbiAgICAgKi9cbiAgICBtZXJnZUNvbmZpZyhjb25maWcsIHByZXZlbnRPcmlnaW5hbENvbmZpZykge1xuICAgICAgICBpZiAoY29uZmlnLmRhdGEpIHtcbiAgICAgICAgICAgIGNvbmZpZy5kYXRhID0gTmVvLm1lcmdlKE5lby5jbG9uZSh0aGlzLmNvbnN0cnVjdG9yLmNvbmZpZy5kYXRhLCB0cnVlKSB8fCB7fSwgY29uZmlnLmRhdGEpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3VwZXIubWVyZ2VDb25maWcoY29uZmlnLCBwcmV2ZW50T3JpZ2luYWxDb25maWcpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICAgKiBAcGFyYW0geyp9IG9sZFZhbHVlXG4gICAgICovXG4gICAgb25EYXRhUHJvcGVydHlDaGFuZ2Uoa2V5LCB2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgbGV0IG1lICAgICAgPSB0aGlzLFxuICAgICAgICAgICAgYmluZGluZyA9IG1lLmJpbmRpbmdzICYmIE5lby5ucyhrZXksIGZhbHNlLCBtZS5iaW5kaW5ncyksXG4gICAgICAgICAgICBjb21wb25lbnQsIGNvbmZpZywgaGllcmFyY2h5RGF0YSwgbW9kZWw7XG5cbiAgICAgICAgaWYgKGJpbmRpbmcpIHtcbiAgICAgICAgICAgIGhpZXJhcmNoeURhdGEgPSB7fTtcblxuICAgICAgICAgICAgT2JqZWN0LmVudHJpZXMoYmluZGluZykuZm9yRWFjaCgoW2NvbXBvbmVudElkLCBjb25maWdPYmplY3RdKSA9PiB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50ID0gTmVvLmdldENvbXBvbmVudChjb21wb25lbnRJZCkgfHwgTmVvLmdldChjb21wb25lbnRJZCk7IC8vIHRpbWluZyBpc3N1ZTogdGhlIGNtcCBtaWdodCBub3QgYmUgcmVnaXN0ZXJlZCBpbnNpZGUgbWFuYWdlci5Db21wb25lbnQgeWV0XG4gICAgICAgICAgICAgICAgY29uZmlnICAgID0ge307XG4gICAgICAgICAgICAgICAgbW9kZWwgICAgID0gY29tcG9uZW50LmdldE1vZGVsKCkgfHwgbWU7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWhpZXJhcmNoeURhdGFbbW9kZWwuaWRdKSB7XG4gICAgICAgICAgICAgICAgICAgIGhpZXJhcmNoeURhdGFbbW9kZWwuaWRdID0gbW9kZWwuZ2V0SGllcmFyY2h5RGF0YSgpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgT2JqZWN0LmVudHJpZXMoY29uZmlnT2JqZWN0KS5mb3JFYWNoKChbY29uZmlnRmllbGQsIGZvcm1hdHRlcl0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gd2UgY2FuIG5vdCBjYWxsIG1lLmNhbGxGb3JtYXR0ZXIoKSwgc2luY2UgYSBkYXRhIHByb3BlcnR5IGluc2lkZSBhIHBhcmVudCBtb2RlbFxuICAgICAgICAgICAgICAgICAgICAvLyBjb3VsZCBoYXZlIGNoYW5nZWQgd2hpY2ggaXMgcmVseWluZyBvbiBkYXRhIHByb3BlcnRpZXMgaW5zaWRlIGEgY2xvc2VyIG1vZGVsXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ1tjb25maWdGaWVsZF0gPSBtb2RlbC5jYWxsRm9ybWF0dGVyKGZvcm1hdHRlciwgaGllcmFyY2h5RGF0YVttb2RlbC5pZF0pXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBjb21wb25lbnQ/LnNldChjb25maWcpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgbWUucmVzb2x2ZUZvcm11bGFzKHtrZXksIGlkOiBtZS5pZCwgb2xkVmFsdWUsIHZhbHVlfSk7XG5cbiAgICAgICAgbWUuZmlyZSgnZGF0YVByb3BlcnR5Q2hhbmdlJywge2tleSwgaWQ6IG1lLmlkLCBvbGRWYWx1ZSwgdmFsdWV9KVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHdpbGwgYXNzaWduIGJpbmRpbmcgdmFsdWVzIGF0IHRoZSBlYXJsaWVzdCBwb3NzaWJsZSBwb2ludCBpbnNpZGUgdGhlIGNvbXBvbmVudCBsaWZlY3ljbGUuXG4gICAgICogSXQgY2FuIG5vdCBzdG9yZSBiaW5kaW5ncyB0aG91Z2gsIHNpbmNlIGNoaWxkIGNvbXBvbmVudCBpZHMgbW9zdCBsaWtlbHkgZG8gbm90IGV4aXN0IHlldC5cbiAgICAgKiBAcGFyYW0ge05lby5jb21wb25lbnQuQmFzZX0gY29tcG9uZW50PXRoaXMuY29tcG9uZW50XG4gICAgICovXG4gICAgcGFyc2VDb25maWcoY29tcG9uZW50PXRoaXMuY29tcG9uZW50KSB7XG4gICAgICAgIGxldCBtZSAgICAgPSB0aGlzLFxuICAgICAgICAgICAgY29uZmlnID0ge307XG5cbiAgICAgICAgaWYgKGNvbXBvbmVudC5iaW5kKSB7XG4gICAgICAgICAgICBtZS5jcmVhdGVCaW5kaW5ncyhjb21wb25lbnQpO1xuXG4gICAgICAgICAgICBPYmplY3QuZW50cmllcyhjb21wb25lbnQuYmluZCkuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKE5lby5pc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUua2V5ID0gbWUuZ2V0Rm9ybWF0dGVyVmFyaWFibGVzKHZhbHVlLnZhbHVlKVswXTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS52YWx1ZVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChtZS5pc1N0b3JlVmFsdWUodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lLnJlc29sdmVTdG9yZShjb21wb25lbnQsIGtleSwgdmFsdWUuc3Vic3RyaW5nKDcpKSAvLyByZW1vdmUgdGhlIFwic3RvcmVzLlwiIGF0IHRoZSBzdGFydFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ1trZXldID0gbWUuY2FsbEZvcm1hdHRlcih2YWx1ZSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY29tcG9uZW50LnNldChjb25maWcpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBiaW5kaW5ncyBmb3IgYSBnaXZlbiBjb21wb25lbnQgaWQgaW5zaWRlIHRoaXMgbW9kZWxcbiAgICAgKiBhcyB3ZWxsIGFzIGluc2lkZSBhbGwgcGFyZW50IG1vZGVscy5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gY29tcG9uZW50SWRcbiAgICAgKi9cbiAgICByZW1vdmVCaW5kaW5ncyhjb21wb25lbnRJZCkge1xuICAgICAgICBsZXQgbWUgICAgICAgICAgPSB0aGlzLFxuICAgICAgICAgICAgcGFyZW50TW9kZWwgPSBtZS5nZXRQYXJlbnQoKTtcblxuICAgICAgICBPYmplY3QuZW50cmllcyhtZS5iaW5kaW5ncykuZm9yRWFjaCgoW2RhdGFQcm9wZXJ0eSwgYmluZGluZ10pID0+IHtcbiAgICAgICAgICAgIGRlbGV0ZSBiaW5kaW5nW2NvbXBvbmVudElkXVxuICAgICAgICB9KTtcblxuICAgICAgICBwYXJlbnRNb2RlbD8ucmVtb3ZlQmluZGluZ3MoY29tcG9uZW50SWQpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVzb2x2ZSB0aGUgZm9ybXVsYXMgaW5pdGlhbGx5IGFuZCB1cGRhdGUsIHdoZW4gZGF0YSBjaGFuZ2VcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSBkYXRhIGZyb20gZXZlbnQgb3IgbnVsbCBvbiBpbml0aWFsIGNhbGxcbiAgICAgKi9cbiAgICByZXNvbHZlRm9ybXVsYXMoZGF0YSkge1xuICAgICAgICBsZXQgbWUgICAgICAgICA9IHRoaXMsXG4gICAgICAgICAgICB7Zm9ybXVsYXN9ID0gbWUsXG4gICAgICAgICAgICBpbml0aWFsUnVuID0gIWRhdGEsXG4gICAgICAgICAgICBhZmZlY3RGb3JtdWxhLCBiaW5kT2JqZWN0LCBmbiwga2V5LCByZXN1bHQsIHZhbHVlO1xuXG4gICAgICAgIGlmIChmb3JtdWxhcykge1xuICAgICAgICAgICAgaWYgKCFpbml0aWFsUnVuICYmICghZGF0YS5rZXkgfHwgIWRhdGEudmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdbVmlld01vZGVsOmZvcm11bGFzXSBtaXNzaW5nIGtleSBvciB2YWx1ZScsIGRhdGEua2V5LCBkYXRhLnZhbHVlKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhmb3JtdWxhcykpIHtcbiAgICAgICAgICAgICAgICBhZmZlY3RGb3JtdWxhID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBjaGFuZ2UgYWZmZWN0cyBhIGZvcm11bGFcbiAgICAgICAgICAgICAgICBpZiAoIWluaXRpYWxSdW4pIHtcbiAgICAgICAgICAgICAgICAgICAgYWZmZWN0Rm9ybXVsYSA9IE9iamVjdC52YWx1ZXModmFsdWUuYmluZCkuaW5jbHVkZXMoZGF0YS5rZXkpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGFmZmVjdEZvcm11bGEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ3JlYXRlIEJpbmQtT2JqZWN0IGFuZCBmaWxsIHdpdGggbmV3IHZhbHVlc1xuICAgICAgICAgICAgICAgICAgICBiaW5kT2JqZWN0ID0gTmVvLmNsb25lKHZhbHVlLmJpbmQpO1xuICAgICAgICAgICAgICAgICAgICBmbiAgICAgICAgID0gdmFsdWUuZ2V0O1xuXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKGJpbmRPYmplY3QpLmZvckVhY2goKGtleSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJpbmRPYmplY3Rba2V5XSA9IG1lLmdldERhdGEoYmluZE9iamVjdFtrZXldKVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBDYWxjIHRoZSBmb3JtdWxhXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGZuKGJpbmRPYmplY3QpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEFzc2lnbiBpZiBubyBlcnJvciBvciBudWxsXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc05hTihyZXN1bHQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZS5zZXREYXRhKGtleSwgbnVsbClcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lLnNldERhdGEoa2V5LCByZXN1bHQpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge05lby5jb21wb25lbnQuQmFzZX0gY29tcG9uZW50XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGNvbmZpZ05hbWVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3RvcmVOYW1lXG4gICAgICovXG4gICAgcmVzb2x2ZVN0b3JlKGNvbXBvbmVudCwgY29uZmlnTmFtZSwgc3RvcmVOYW1lKSB7XG4gICAgICAgIGxldCBzdG9yZSA9IHRoaXMuZ2V0U3RvcmUoc3RvcmVOYW1lKTtcblxuICAgICAgICBpZiAoY29tcG9uZW50W2NvbmZpZ05hbWVdICE9PSBzdG9yZSkge1xuICAgICAgICAgICAgY29tcG9uZW50W2NvbmZpZ05hbWVdID0gc3RvcmVcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBtZXRob2Qgd2lsbCBhc3NpZ24gYWxsIHZhbHVlcyB0byB0aGUgY2xvc2VzdCBtb2RlbCB3aGVyZSBpdCBmaW5kcyBhbiBleGlzdGluZyBrZXkuXG4gICAgICogSW4gY2FzZSBubyBtYXRjaCBpcyBmb3VuZCBpbnNpZGUgdGhlIHBhcmVudCBjaGFpbiwgYSBuZXcgZGF0YSBwcm9wZXJ0eSB3aWxsIGdldCBnZW5lcmF0ZWQuXG4gICAgICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBrZXlcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAgICovXG4gICAgc2V0RGF0YShrZXksIHZhbHVlKSB7XG4gICAgICAgIHRoaXMuaW50ZXJuYWxTZXREYXRhKGtleSwgdmFsdWUsIHRoaXMpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlIHRoaXMgbWV0aG9kIGluc3RlYWQgb2Ygc2V0RGF0YSgpIGluIGNhc2UgeW91IHdhbnQgdG8gZW5mb3JjZVxuICAgICAqIHNldHRpbmcgYWxsIGtleXMgb24gdGhpcyBpbnN0YW5jZSBpbnN0ZWFkIG9mIGxvb2tpbmcgZm9yIG1hdGNoZXMgaW5zaWRlIHBhcmVudCBtb2RlbHMuXG4gICAgICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBrZXlcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAgICovXG4gICAgc2V0RGF0YUF0U2FtZUxldmVsKGtleSwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5pbnRlcm5hbFNldERhdGEoa2V5LCB2YWx1ZSlcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE5lby5zZXR1cENsYXNzKENvbXBvbmVudCk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=