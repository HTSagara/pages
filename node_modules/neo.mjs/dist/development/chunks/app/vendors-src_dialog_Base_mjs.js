"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["vendors-src_dialog_Base_mjs"],{

/***/ "./src/dialog/Base.mjs":
/*!*****************************!*\
  !*** ./src/dialog/Base.mjs ***!
  \*****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _util_Array_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/Array.mjs */ "./src/util/Array.mjs");
/* harmony import */ var _container_Panel_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../container/Panel.mjs */ "./src/container/Panel.mjs");
/* harmony import */ var _header_Toolbar_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./header/Toolbar.mjs */ "./src/dialog/header/Toolbar.mjs");
/* harmony import */ var _util_VDom_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/VDom.mjs */ "./src/util/VDom.mjs");





let DragZone;

/**
 * @class Neo.dialog.Base
 * @extends Neo.container.Panel
 */
class Base extends _container_Panel_mjs__WEBPACK_IMPORTED_MODULE_1__["default"] {
    /**
     * Valid values for closeAction
     * @member {String[]} closeActions=['close','hide']
     * @protected
     * @static
     */
    static closeActions = ['close', 'hide']

    static config = {
        /**
         * @member {String} className='Neo.dialog.Base'
         * @protected
         */
        className: 'Neo.dialog.Base',
        /**
         * @member {String} ntype='dialog'
         * @protected
         */
        ntype: 'dialog',
        /**
         * @member {Boolean} animateOnDragEnd=false
         */
        animateOnDragEnd: false,
        /**
         * @member {String|null} animateTargetId_=null
         */
        animateTargetId_: null,
        /**
         * @member {Boolean} autoMount=true
         */
        autoMount: true,
        /**
         * @member {Boolean} autoRender=true
         */
        autoRender: true,
        /**
         * @member {Boolean} autoShow=true
         */
        autoShow: true,
        /**
         * @member {String[]} baseCls=['neo-dialog','neo-panel','neo-container']
         * @protected
         */
        baseCls: ['neo-dialog', 'neo-panel', 'neo-container'],
        /**
         * Either a dom node id, 'document.body' or null
         * @member {String|null} boundaryContainerId='document.body'
         */
        boundaryContainerId: 'document.body',
        /**
         * Define what happens in case you click on the close button
         * close will destroy the instance, hide will keep it for later re-use.
         * Valid values: close, hide
         * @member {String} closeAction='close'
         */
        closeAction: 'close',
        /**
         * @member {Boolean} draggable_=true
         */
        draggable_: true,
        /**
         * @member {Boolean} dragListenersAdded=false
         * @protected
         */
        dragListenersAdded: false,
        /**
         * @member {Neo.draggable.DragZone|null} dragZone=null
         */
        dragZone: null,
        /**
         * @member {Object} dragZoneConfig=null
         */
        dragZoneConfig: null,
        /**
         * @member {Boolean} floating=true
         */
        floating: true,
        /**
         * @member {Object} headerConfig=null
         */
        headerConfig: null,
        /**
         * @member {Neo.toolbar.Base|null} headerToolbar=null
         */
        headerToolbar: null,
        /**
         * @member {Boolean} isDragging=false
         * @protected
         */
        isDragging: false,
        /**
         * @member {String} maximizeCls='far fa-window-maximize'
         */
        maximizeCls: 'far fa-window-maximize',
        /**
         * @member {Boolean} maximized_=false
         */
        maximized_: false,
        /**
         * @member {String} minimizeCls='far fa-window-minimize'
         */
        minimizeCls: 'far fa-window-minimize',
        /**
         * @member {Boolean} modal_=false
         */
        modal_: false,
        /**
         * @member {Boolean} resizable_=true
         */
        resizable_: true,
        /**
         * @member {Object} resizablePluginConfig=null
         */
        resizablePluginConfig: null,
        /**
         * @member {String|null} title_=null
         */
        title_: null,
        /**
         * Set to `true` to have tabbing wrap within this Dialog.
         *
         * Should be used with `modal`.
         * @member {Boolean} trapFocus_=false
         */
        trapFocus_: false,
        /**
         * Set to `true` to have this Dialog centered in the viewport.
         *
         * @member {Boolean} centered_=false
         */
        centered_: false
    }

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);

        let me    = this,
            style = me.style;

        me.createHeader();

        if (!me.animateTargetId && !me.centered) {
            Neo.assignDefaults(style, {
                left     : '50%',
                top      : '50%',
                transform: 'translate(-50%, -50%)',
                width    : '50%'
            });

            me.style = style
        }
    }

    /**
     * Triggered after the animateTargetId config got changed
     * @param {String|null} value
     * @param {String|null} oldValue
     * @protected
     */
    afterSetAnimateTargetId(value, oldValue) {
        this.autoMount  = !value;
        this.autoRender = !value
    }

    /**
     * Triggered after the appName config got changed
     * @param {String|null} value
     * @param {String|null} oldValue
     * @protected
     */
    afterSetAppName(value, oldValue) {
        let me        = this,
            resizable = me.getPlugin({flag: 'resizable'});

        if (me.dragZone) {
            me.dragZone.appName = value
        }

        if (resizable) {
            resizable.appName = value
        }

        super.afterSetAppName(value, oldValue)
    }

    /**
     * Triggered after the centered config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetCentered(value, oldValue) {
        _util_Array_mjs__WEBPACK_IMPORTED_MODULE_0__["default"].toggle(this.vdom.cls, 'neo-centered', value);
        this.update();
    }

    /**
     * Triggered after the draggable config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetDraggable(value, oldValue) {
        let me           = this,
            domListeners = me.domListeners,
            cls;

        if (oldValue !== undefined && me.headerToolbar) {
            cls = me.headerToolbar.cls;
            _util_Array_mjs__WEBPACK_IMPORTED_MODULE_0__["default"][value ? 'add' : 'remove'](cls, 'neo-draggable');
            me.headerToolbar.cls = cls
        }

        value && __webpack_require__.e(/*! import() */ "vendors-src_draggable_DragZone_mjs").then(__webpack_require__.bind(__webpack_require__, /*! ../draggable/DragZone.mjs */ "./src/draggable/DragZone.mjs")).then(module => {
            DragZone = module.default;

            if (!me.dragListenersAdded) {
                domListeners.push(
                    {'drag:end'  : me.onDragEnd,   scope: me, delegate: '.neo-header-toolbar'},
                    {'drag:start': me.onDragStart, scope: me, delegate: '.neo-header-toolbar'}
                );

                if (me.dragZoneConfig?.alwaysFireDragMove) {
                    domListeners.push(
                        {'drag:move': me.onDragMove, scope: me, delegate: '.neo-header-toolbar'}
                    )
                }

                me.domListeners       = domListeners;
                me.dragListenersAdded = true
            }
        })
    }

    /**
     * Triggered after the maximized config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetMaximized(value, oldValue) {
        let me  = this,
            cls = me.vdom.cls; // todo: using wrapperCls

        _util_Array_mjs__WEBPACK_IMPORTED_MODULE_0__["default"].toggle(cls, 'neo-maximized', value);
        me.update()
    }

    /**
     * Triggered after the modal config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetModal(value, oldValue) {
        let me = this;

        _util_Array_mjs__WEBPACK_IMPORTED_MODULE_0__["default"].toggle(me.vdom.cls, 'neo-modal', value);
        me.update();

        me.rendered && me.syncModalMask()
    }

    /**
     * Triggered after the mounted config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetMounted(value, oldValue) {
        super.afterSetMounted(value, oldValue);

        // Ensure focus trapping is up-to-date, enabled or disabled.
        this.syncTrapFocus()
    }

    /**
     * Triggered after the resizable config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetResizable(value, oldValue) {
        value && Promise.all(/*! import() */[__webpack_require__.e("vendors-src_draggable_DragZone_mjs"), __webpack_require__.e("vendors-src_plugin_Resizable_mjs")]).then(__webpack_require__.bind(__webpack_require__, /*! ../plugin/Resizable.mjs */ "./src/plugin/Resizable.mjs")).then(module => {
            let me      = this,
                plugins = me.plugins || [];

            if (!me.getPlugin({flag: 'resizable'})) {
                plugins.push({
                    module       : module.default,
                    appName      : me.appName,
                    delegationCls: 'neo-dialog',
                    flag         : 'resizable',
                    ...me.resizablePluginConfig
                });

                me.plugins = plugins
            }
        })
    }

    /**
     * Triggered after the title config got changed
     * @param {String|null} value
     * @param {String|null} oldValue
     * @protected
     */
    afterSetTitle(value, oldValue) {
        if (this.headerToolbar) {
            this.headerToolbar.title = value
        }
    }

    /**
     * Triggered after the trapFocus config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetTrapFocus(value, oldValue) {
        this.syncTrapFocus()
    }

    /**
     *
     */
    async animateHide() {
        let me      = this,
            appName = me.appName,
            { id }  = me,
            rects   = await me.getDomRect([id, me.animateTargetId]);

        await Neo.applyDeltas(appName, {
            id,
            style: {
                height   : `${rects[0].height}px`,
                left     : `${rects[0].left  }px`,
                top      : `${rects[0].top   }px`,
                transform: 'none',
                width    : `${rects[0].width }px`
            }
        });

        await me.timeout(30);

        await Neo.applyDeltas(appName, {
            id,
            cls: {
                add: ['animated-hiding-showing']
            },
            style: {
                height: `${rects[1].height}px`,
                left  : `${rects[1].left  }px`,
                top   : `${rects[1].top   }px`,
                width : `${rects[1].width }px`
            }
        });

        await me.timeout(250);

        me.closeOrHide(false);

        if (me.closeAction === 'hide') {
            await Neo.applyDeltas(appName, {id, action: 'removeNode'})
        }
    }

    /**
     *
     */
    async animateShow() {
        let me            = this,
            appName       = me.appName,
            { id, style } = me,
            rect          = await me.getDomRect(me.animateTargetId);

        await me.render(true);

        // Move to cover the animation target
        await Neo.applyDeltas(appName, {
            id,
            style : {
                height: `${rect.height}px`,
                left  : `${rect.left  }px`,
                top   : `${rect.top   }px`,
                width : `${rect.width }px`
            }
        });

        // Wait for the element to achieve its initial rectangle
        await me.timeout(50);

        // Expand to final state
        await Neo.applyDeltas(appName, {
            id,
            cls: {
                add: ['animated-hiding-showing']
            },
            style: {
                height   : style?.height    || null, // height will point to the animation origin, so we need a reset
                left     : style?.left      || '50%',
                top      : style?.top       || '50%',
                transform: style?.transform || 'translate(-50%, -50%)',
                width    : style?.width     || '50%'
            }
        });

        await me.timeout(200);

        // Remove the animation class
        await Neo.applyDeltas(appName, {id, cls: {remove: ['animated-hiding-showing']}});

        me.show(false)
    }

    /**
     * Triggered before the closeAction config gets changed
     * @param {String} value
     * @param {String} oldValue
     * @protected
     */
    beforeSetCloseAction(value, oldValue) {
        return this.beforeSetEnumValue(value, oldValue, 'closeAction')
    }

    /**
     * @param {Boolean} animate=!!this.animateTargetId
     */
    close(animate=!!this.animateTargetId) {
        let me = this;

        if (animate) {
            me.animateHide()
        } else {
            me.fire('close');
            me.destroy(true)
        }
    }

    /**
     * @param {Boolean} animate=!!this.animateTargetId
     */
    async closeOrHide(animate=!!this.animateTargetId) {
        let me = this;

        me[me.closeAction](animate);
        await me.timeout(30);
        me.syncModalMask(me.id)
    }

    /**
     * Action when clicking the X button inside the header toolbar.
     * @param {Object} data
     * @protected
     */
    closeOrHideAction(data) {
        this.closeOrHide()
    }

    /**
     *
     */
    createHeader() {
        let me      = this,
            cls     = ['neo-header-toolbar', 'neo-toolbar'],
            headers = me.headers || [];

        me.draggable && cls.push('neo-draggable');

        me.headerToolbar = Neo.create({
            module   : _header_Toolbar_mjs__WEBPACK_IMPORTED_MODULE_2__["default"],
            appName  : me.appName,
            cls,
            dock     : 'top',
            flex     : 'none',
            id       : me.getHeaderToolbarId(),
            listeners: {headerAction: me.executeHeaderAction, scope: me},
            title    : me.title,
            ...me.headerConfig
        });

        headers.unshift(me.headerToolbar);

        me.headers = headers
    }

    /**
     * {Object} data
     */
    executeHeaderAction(data) {
        let me = this,

        map = {
            close   : me.closeOrHideAction,
            maximize: me.maximize
        };

        map[data.action]?.call(me, data);

        me.fire('headerAction', {
            dialog: me,
            ...data
        })
    }

    /**
     * Returns the id of the animation node
     * @returns {String}
     */
    getAnimateTargetId() {
        return this.id + '-animate'
    }

    /**
     * Returns the id of the header toolbar
     * @returns {String}
     */
    getHeaderToolbarId() {
        return this.id + '-header-toolbar'
    }

    /**
     * @returns {Object} vdom
     */
    getProxyVdom() {
        return _util_VDom_mjs__WEBPACK_IMPORTED_MODULE_3__["default"].clone(this.vdom)
    }

    /**
     * @param {Boolean} animate=!!this.animateTargetId
     */
    async hide(animate=!!this.animateTargetId) {
        let me = this;

        if (animate) {
            me.animateHide()
        } else {
            me.unmount();
            me.fire('hide')
        }

        await me.timeout(30);

        me.syncModalMask()
    }

    /**
     *
     */
    init() {
        super.init();

        let me = this;

        if (me.animateTargetId) {
            me.autoShow && me.show()
        } else {
            me.timeout(100).then(() => {
                me.syncModalMask()
            })
        }
    }

    /**
     * @param {Object} [data]
     */
    maximize(data) {
        let me = this;

        data.component.iconCls = me.maximized ? me.maximizeCls : me.minimizeCls;

        me.maximized = !me.maximized
    }

    /**
     *
     */
    onConstructed() {
        super.onConstructed();

        let me = this;

        me.headerToolbar = me.down({
            id: me.getHeaderToolbarId()
        })
    }

    /**
     * @param data
     */
    onDragEnd(data) {
        let me = this,
            initialTransitionProperty, style;

        if (!me.maximized) {
            me.getDomRect(me.dragZone.dragProxy.id).then(rect => {
                style = me.style;

                Object.assign(style, {
                    height   : `${rect.height}px`,
                    left     : `${rect.left}px`,
                    opacity  : 1,
                    top      : `${rect.top}px`,
                    transform: 'none',
                    width    : `${rect.width}px`
                });

                if (!me.animateOnDragEnd) {
                    initialTransitionProperty = style.transitionProperty || null;

                    style.transitionProperty = 'none';

                    setTimeout(() => {
                        style = me.style;

                        style.transitionProperty = initialTransitionProperty;

                        me.style = style
                    }, 50)
                }

                me.style = style;

                me.dragZone.dragEnd(data);

                // we need a reset, otherwise we do not get a change event for the next onDragStart() call
                me.dragZone.boundaryContainerId = null;
                me.isDragging                   = false
            })
        }
    }

    /**
     * This method will only get triggered in case alwaysFireDragMove is included inside the dragZoneConfig
     * @param data
     */
    onDragMove(data) {
        this.dragZone.dragMove(data)
    }

    /**
     * @param data
     */
    onDragStart(data) {
        let me    = this,
            style = me.style || {};

        if (!me.maximized) {
            me.isDragging = true;

            me.getPlugin({flag: 'resizable'})?.removeAllNodes();

            if (!me.dragZone) {
                me.dragZone = Neo.create({
                    module             : DragZone,
                    appName            : me.appName,
                    bodyCursorStyle    : 'move !important',
                    boundaryContainerId: me.boundaryContainerId,
                    dragElement        : me.vdom,
                    dragProxyConfig    : {vdom: me.getProxyVdom()},
                    owner              : me,
                    useProxyWrapper    : false,
                    ...me.dragZoneConfig
                });

                me.fire('dragZoneCreated', {
                    dragZone: me.dragZone,
                    id      : me.id
                })
            } else {
                me.dragZone.boundaryContainerId = me.boundaryContainerId
            }

            me.dragZone.dragStart(data);

            style.opacity = 0.7;

            me.style = style
        }
    }

    /**
     * @param {Boolean} animate=!!this.animateTargetId
     */
    show(animate=!!this.animateTargetId) {
        let me = this;

        if (animate) {
            me.animateShow();
        } else {
            if (!me.rendered) {
                me.render(true)
            }

            me.fire('show')
        }

        me.syncModalMask()
    }

    /**
     * @param {String} id=this.id
     */
    syncModalMask(id=this.id) {
        // This should sync the visibility and position of the modal mask element.
        Neo.main.DomAccess.syncModalMask({ id, modal: this.modal })
    }

    /**
     *
     */
    syncTrapFocus() {
        if (this.mounted) {
            Neo.main.DomAccess.trapFocus({ id: this.id, trap: this.trapFocus })
        }
    }
}

Neo.applyClassConfig(Base);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Base);


/***/ }),

/***/ "./src/dialog/header/Toolbar.mjs":
/*!***************************************!*\
  !*** ./src/dialog/header/Toolbar.mjs ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _toolbar_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../toolbar/Base.mjs */ "./src/toolbar/Base.mjs");


/**
 * @class Neo.dialog.header.Toolbar
 * @extends Neo.toolbar.Base
 */
class Toolbar extends _toolbar_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.dialog.header.Toolbar'
         * @protected
         */
        className: 'Neo.dialog.header.Toolbar',
        /**
         * @member {Object} actionMap
         */
        actionMap: {
            close   : () => ({action: 'close',    iconCls: 'far fa-window-close'}),
            maximize: () => ({action: 'maximize', iconCls: 'far fa-window-maximize'})
        },
        /**
         * You can define the action order and directly add custom actions.
         * @example
         * {
         *     actions: [
         *         'close',
         *         'maximize',
         *         {action: 'help', iconCls: 'far fa-circle-question'}
         *     ]
         * }
         *
         * You can also extend the actionMap if needed.
         * @member {Object[]|String[]|null} actions=['maximize','close']
         */
        actions: ['maximize', 'close'],
        /**
         * @member {String|null} title=null
         */
        title_: null
    }

    /**
     * Triggered after the title config got changed
     * @param {String} value
     * @param {String} oldValue
     * @protected
     */
    afterSetTitle(value, oldValue) {
        this.down({flag: 'title-label'})?.set({
            hidden: !value,
            text  : value
        })
    }

    /**
     *
     */
    createItems() {
        let me      = this,
            handler = me.fireAction.bind(me),
            items   = me.items || [];

        items.push({
            ntype : 'label',
            cls   : ['neo-panel-header-text', 'neo-label'],
            flag  : 'title-label',
            hidden: !me.title,
            text  : me.title
        });

        if (me.actions) {
            items.push('->');

            me.actions.forEach(action => {
                if (Neo.typeOf(action) !== 'Object') {
                    action = me.actionMap[action]()
                }

                items.push({handler, ...action})
            })
        }

        me.items = items;

        super.createItems()
    }

    /**
     * @param {Object} data
     */
    fireAction(data) {
        let component = data.component;

        this.fire('headerAction', {
            action: component.action,
            component,
            scope : this
        })
    }
}

Neo.applyClassConfig(Toolbar);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Toolbar);


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmtzL2FwcC92ZW5kb3JzLXNyY19kaWFsb2dfQmFzZV9tanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBeUM7QUFDSztBQUNGO0FBQ0o7O0FBRXhDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDREQUFLO0FBQ3hCO0FBQ0E7QUFDQSxnQkFBZ0IsVUFBVTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixTQUFTO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixhQUFhO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixTQUFTO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixTQUFTO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixTQUFTO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixVQUFVO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsYUFBYTtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw2QkFBNkI7QUFDakQ7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFNBQVM7QUFDN0I7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHVCQUF1QjtBQUMzQztBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNB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O0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBOztBQUVBLGlFQUFlLE9BQU8sRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL25lby5tanMvLi9zcmMvZGlhbG9nL0Jhc2UubWpzIiwid2VicGFjazovL25lby5tanMvLi9zcmMvZGlhbG9nL2hlYWRlci9Ub29sYmFyLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTmVvQXJyYXkgZnJvbSAnLi4vdXRpbC9BcnJheS5tanMnO1xuaW1wb3J0IFBhbmVsICAgIGZyb20gJy4uL2NvbnRhaW5lci9QYW5lbC5tanMnO1xuaW1wb3J0IFRvb2xiYXIgIGZyb20gJy4vaGVhZGVyL1Rvb2xiYXIubWpzJztcbmltcG9ydCBWRG9tVXRpbCBmcm9tICcuLi91dGlsL1ZEb20ubWpzJztcblxubGV0IERyYWdab25lO1xuXG4vKipcbiAqIEBjbGFzcyBOZW8uZGlhbG9nLkJhc2VcbiAqIEBleHRlbmRzIE5lby5jb250YWluZXIuUGFuZWxcbiAqL1xuY2xhc3MgQmFzZSBleHRlbmRzIFBhbmVsIHtcbiAgICAvKipcbiAgICAgKiBWYWxpZCB2YWx1ZXMgZm9yIGNsb3NlQWN0aW9uXG4gICAgICogQG1lbWJlciB7U3RyaW5nW119IGNsb3NlQWN0aW9ucz1bJ2Nsb3NlJywnaGlkZSddXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBzdGF0aWNcbiAgICAgKi9cbiAgICBzdGF0aWMgY2xvc2VBY3Rpb25zID0gWydjbG9zZScsICdoaWRlJ11cblxuICAgIHN0YXRpYyBjb25maWcgPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IGNsYXNzTmFtZT0nTmVvLmRpYWxvZy5CYXNlJ1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBjbGFzc05hbWU6ICdOZW8uZGlhbG9nLkJhc2UnLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBudHlwZT0nZGlhbG9nJ1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBudHlwZTogJ2RpYWxvZycsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBhbmltYXRlT25EcmFnRW5kPWZhbHNlXG4gICAgICAgICAqL1xuICAgICAgICBhbmltYXRlT25EcmFnRW5kOiBmYWxzZSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ3xudWxsfSBhbmltYXRlVGFyZ2V0SWRfPW51bGxcbiAgICAgICAgICovXG4gICAgICAgIGFuaW1hdGVUYXJnZXRJZF86IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBhdXRvTW91bnQ9dHJ1ZVxuICAgICAgICAgKi9cbiAgICAgICAgYXV0b01vdW50OiB0cnVlLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7Qm9vbGVhbn0gYXV0b1JlbmRlcj10cnVlXG4gICAgICAgICAqL1xuICAgICAgICBhdXRvUmVuZGVyOiB0cnVlLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7Qm9vbGVhbn0gYXV0b1Nob3c9dHJ1ZVxuICAgICAgICAgKi9cbiAgICAgICAgYXV0b1Nob3c6IHRydWUsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmdbXX0gYmFzZUNscz1bJ25lby1kaWFsb2cnLCduZW8tcGFuZWwnLCduZW8tY29udGFpbmVyJ11cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgYmFzZUNsczogWyduZW8tZGlhbG9nJywgJ25lby1wYW5lbCcsICduZW8tY29udGFpbmVyJ10sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFaXRoZXIgYSBkb20gbm9kZSBpZCwgJ2RvY3VtZW50LmJvZHknIG9yIG51bGxcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfG51bGx9IGJvdW5kYXJ5Q29udGFpbmVySWQ9J2RvY3VtZW50LmJvZHknXG4gICAgICAgICAqL1xuICAgICAgICBib3VuZGFyeUNvbnRhaW5lcklkOiAnZG9jdW1lbnQuYm9keScsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWZpbmUgd2hhdCBoYXBwZW5zIGluIGNhc2UgeW91IGNsaWNrIG9uIHRoZSBjbG9zZSBidXR0b25cbiAgICAgICAgICogY2xvc2Ugd2lsbCBkZXN0cm95IHRoZSBpbnN0YW5jZSwgaGlkZSB3aWxsIGtlZXAgaXQgZm9yIGxhdGVyIHJlLXVzZS5cbiAgICAgICAgICogVmFsaWQgdmFsdWVzOiBjbG9zZSwgaGlkZVxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IGNsb3NlQWN0aW9uPSdjbG9zZSdcbiAgICAgICAgICovXG4gICAgICAgIGNsb3NlQWN0aW9uOiAnY2xvc2UnLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7Qm9vbGVhbn0gZHJhZ2dhYmxlXz10cnVlXG4gICAgICAgICAqL1xuICAgICAgICBkcmFnZ2FibGVfOiB0cnVlLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7Qm9vbGVhbn0gZHJhZ0xpc3RlbmVyc0FkZGVkPWZhbHNlXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIGRyYWdMaXN0ZW5lcnNBZGRlZDogZmFsc2UsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtOZW8uZHJhZ2dhYmxlLkRyYWdab25lfG51bGx9IGRyYWdab25lPW51bGxcbiAgICAgICAgICovXG4gICAgICAgIGRyYWdab25lOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7T2JqZWN0fSBkcmFnWm9uZUNvbmZpZz1udWxsXG4gICAgICAgICAqL1xuICAgICAgICBkcmFnWm9uZUNvbmZpZzogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge0Jvb2xlYW59IGZsb2F0aW5nPXRydWVcbiAgICAgICAgICovXG4gICAgICAgIGZsb2F0aW5nOiB0cnVlLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7T2JqZWN0fSBoZWFkZXJDb25maWc9bnVsbFxuICAgICAgICAgKi9cbiAgICAgICAgaGVhZGVyQ29uZmlnOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7TmVvLnRvb2xiYXIuQmFzZXxudWxsfSBoZWFkZXJUb29sYmFyPW51bGxcbiAgICAgICAgICovXG4gICAgICAgIGhlYWRlclRvb2xiYXI6IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBpc0RyYWdnaW5nPWZhbHNlXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIGlzRHJhZ2dpbmc6IGZhbHNlLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBtYXhpbWl6ZUNscz0nZmFyIGZhLXdpbmRvdy1tYXhpbWl6ZSdcbiAgICAgICAgICovXG4gICAgICAgIG1heGltaXplQ2xzOiAnZmFyIGZhLXdpbmRvdy1tYXhpbWl6ZScsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBtYXhpbWl6ZWRfPWZhbHNlXG4gICAgICAgICAqL1xuICAgICAgICBtYXhpbWl6ZWRfOiBmYWxzZSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gbWluaW1pemVDbHM9J2ZhciBmYS13aW5kb3ctbWluaW1pemUnXG4gICAgICAgICAqL1xuICAgICAgICBtaW5pbWl6ZUNsczogJ2ZhciBmYS13aW5kb3ctbWluaW1pemUnLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7Qm9vbGVhbn0gbW9kYWxfPWZhbHNlXG4gICAgICAgICAqL1xuICAgICAgICBtb2RhbF86IGZhbHNlLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7Qm9vbGVhbn0gcmVzaXphYmxlXz10cnVlXG4gICAgICAgICAqL1xuICAgICAgICByZXNpemFibGVfOiB0cnVlLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7T2JqZWN0fSByZXNpemFibGVQbHVnaW5Db25maWc9bnVsbFxuICAgICAgICAgKi9cbiAgICAgICAgcmVzaXphYmxlUGx1Z2luQ29uZmlnOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfG51bGx9IHRpdGxlXz1udWxsXG4gICAgICAgICAqL1xuICAgICAgICB0aXRsZV86IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXQgdG8gYHRydWVgIHRvIGhhdmUgdGFiYmluZyB3cmFwIHdpdGhpbiB0aGlzIERpYWxvZy5cbiAgICAgICAgICpcbiAgICAgICAgICogU2hvdWxkIGJlIHVzZWQgd2l0aCBgbW9kYWxgLlxuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufSB0cmFwRm9jdXNfPWZhbHNlXG4gICAgICAgICAqL1xuICAgICAgICB0cmFwRm9jdXNfOiBmYWxzZSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldCB0byBgdHJ1ZWAgdG8gaGF2ZSB0aGlzIERpYWxvZyBjZW50ZXJlZCBpbiB0aGUgdmlld3BvcnQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge0Jvb2xlYW59IGNlbnRlcmVkXz1mYWxzZVxuICAgICAgICAgKi9cbiAgICAgICAgY2VudGVyZWRfOiBmYWxzZVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3QoY29uZmlnKSB7XG4gICAgICAgIHN1cGVyLmNvbnN0cnVjdChjb25maWcpO1xuXG4gICAgICAgIGxldCBtZSAgICA9IHRoaXMsXG4gICAgICAgICAgICBzdHlsZSA9IG1lLnN0eWxlO1xuXG4gICAgICAgIG1lLmNyZWF0ZUhlYWRlcigpO1xuXG4gICAgICAgIGlmICghbWUuYW5pbWF0ZVRhcmdldElkICYmICFtZS5jZW50ZXJlZCkge1xuICAgICAgICAgICAgTmVvLmFzc2lnbkRlZmF1bHRzKHN0eWxlLCB7XG4gICAgICAgICAgICAgICAgbGVmdCAgICAgOiAnNTAlJyxcbiAgICAgICAgICAgICAgICB0b3AgICAgICA6ICc1MCUnLFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgtNTAlLCAtNTAlKScsXG4gICAgICAgICAgICAgICAgd2lkdGggICAgOiAnNTAlJ1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIG1lLnN0eWxlID0gc3R5bGVcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCBhZnRlciB0aGUgYW5pbWF0ZVRhcmdldElkIGNvbmZpZyBnb3QgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfG51bGx9IHZhbHVlXG4gICAgICogQHBhcmFtIHtTdHJpbmd8bnVsbH0gb2xkVmFsdWVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYWZ0ZXJTZXRBbmltYXRlVGFyZ2V0SWQodmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIHRoaXMuYXV0b01vdW50ICA9ICF2YWx1ZTtcbiAgICAgICAgdGhpcy5hdXRvUmVuZGVyID0gIXZhbHVlXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGFmdGVyIHRoZSBhcHBOYW1lIGNvbmZpZyBnb3QgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfG51bGx9IHZhbHVlXG4gICAgICogQHBhcmFtIHtTdHJpbmd8bnVsbH0gb2xkVmFsdWVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYWZ0ZXJTZXRBcHBOYW1lKHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICBsZXQgbWUgICAgICAgID0gdGhpcyxcbiAgICAgICAgICAgIHJlc2l6YWJsZSA9IG1lLmdldFBsdWdpbih7ZmxhZzogJ3Jlc2l6YWJsZSd9KTtcblxuICAgICAgICBpZiAobWUuZHJhZ1pvbmUpIHtcbiAgICAgICAgICAgIG1lLmRyYWdab25lLmFwcE5hbWUgPSB2YWx1ZVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlc2l6YWJsZSkge1xuICAgICAgICAgICAgcmVzaXphYmxlLmFwcE5hbWUgPSB2YWx1ZVxuICAgICAgICB9XG5cbiAgICAgICAgc3VwZXIuYWZ0ZXJTZXRBcHBOYW1lKHZhbHVlLCBvbGRWYWx1ZSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYWZ0ZXIgdGhlIGNlbnRlcmVkIGNvbmZpZyBnb3QgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gdmFsdWVcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFmdGVyU2V0Q2VudGVyZWQodmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIE5lb0FycmF5LnRvZ2dsZSh0aGlzLnZkb20uY2xzLCAnbmVvLWNlbnRlcmVkJywgdmFsdWUpO1xuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCBhZnRlciB0aGUgZHJhZ2dhYmxlIGNvbmZpZyBnb3QgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gdmFsdWVcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFmdGVyU2V0RHJhZ2dhYmxlKHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICBsZXQgbWUgICAgICAgICAgID0gdGhpcyxcbiAgICAgICAgICAgIGRvbUxpc3RlbmVycyA9IG1lLmRvbUxpc3RlbmVycyxcbiAgICAgICAgICAgIGNscztcblxuICAgICAgICBpZiAob2xkVmFsdWUgIT09IHVuZGVmaW5lZCAmJiBtZS5oZWFkZXJUb29sYmFyKSB7XG4gICAgICAgICAgICBjbHMgPSBtZS5oZWFkZXJUb29sYmFyLmNscztcbiAgICAgICAgICAgIE5lb0FycmF5W3ZhbHVlID8gJ2FkZCcgOiAncmVtb3ZlJ10oY2xzLCAnbmVvLWRyYWdnYWJsZScpO1xuICAgICAgICAgICAgbWUuaGVhZGVyVG9vbGJhci5jbHMgPSBjbHNcbiAgICAgICAgfVxuXG4gICAgICAgIHZhbHVlICYmIGltcG9ydCgnLi4vZHJhZ2dhYmxlL0RyYWdab25lLm1qcycpLnRoZW4obW9kdWxlID0+IHtcbiAgICAgICAgICAgIERyYWdab25lID0gbW9kdWxlLmRlZmF1bHQ7XG5cbiAgICAgICAgICAgIGlmICghbWUuZHJhZ0xpc3RlbmVyc0FkZGVkKSB7XG4gICAgICAgICAgICAgICAgZG9tTGlzdGVuZXJzLnB1c2goXG4gICAgICAgICAgICAgICAgICAgIHsnZHJhZzplbmQnICA6IG1lLm9uRHJhZ0VuZCwgICBzY29wZTogbWUsIGRlbGVnYXRlOiAnLm5lby1oZWFkZXItdG9vbGJhcid9LFxuICAgICAgICAgICAgICAgICAgICB7J2RyYWc6c3RhcnQnOiBtZS5vbkRyYWdTdGFydCwgc2NvcGU6IG1lLCBkZWxlZ2F0ZTogJy5uZW8taGVhZGVyLXRvb2xiYXInfVxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBpZiAobWUuZHJhZ1pvbmVDb25maWc/LmFsd2F5c0ZpcmVEcmFnTW92ZSkge1xuICAgICAgICAgICAgICAgICAgICBkb21MaXN0ZW5lcnMucHVzaChcbiAgICAgICAgICAgICAgICAgICAgICAgIHsnZHJhZzptb3ZlJzogbWUub25EcmFnTW92ZSwgc2NvcGU6IG1lLCBkZWxlZ2F0ZTogJy5uZW8taGVhZGVyLXRvb2xiYXInfVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbWUuZG9tTGlzdGVuZXJzICAgICAgID0gZG9tTGlzdGVuZXJzO1xuICAgICAgICAgICAgICAgIG1lLmRyYWdMaXN0ZW5lcnNBZGRlZCA9IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYWZ0ZXIgdGhlIG1heGltaXplZCBjb25maWcgZ290IGNoYW5nZWRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHZhbHVlXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBvbGRWYWx1ZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBhZnRlclNldE1heGltaXplZCh2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgbGV0IG1lICA9IHRoaXMsXG4gICAgICAgICAgICBjbHMgPSBtZS52ZG9tLmNsczsgLy8gdG9kbzogdXNpbmcgd3JhcHBlckNsc1xuXG4gICAgICAgIE5lb0FycmF5LnRvZ2dsZShjbHMsICduZW8tbWF4aW1pemVkJywgdmFsdWUpO1xuICAgICAgICBtZS51cGRhdGUoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCBhZnRlciB0aGUgbW9kYWwgY29uZmlnIGdvdCBjaGFuZ2VkXG4gICAgICogQHBhcmFtIHtCb29sZWFufSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gb2xkVmFsdWVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYWZ0ZXJTZXRNb2RhbCh2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgbGV0IG1lID0gdGhpcztcblxuICAgICAgICBOZW9BcnJheS50b2dnbGUobWUudmRvbS5jbHMsICduZW8tbW9kYWwnLCB2YWx1ZSk7XG4gICAgICAgIG1lLnVwZGF0ZSgpO1xuXG4gICAgICAgIG1lLnJlbmRlcmVkICYmIG1lLnN5bmNNb2RhbE1hc2soKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCBhZnRlciB0aGUgbW91bnRlZCBjb25maWcgZ290IGNoYW5nZWRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHZhbHVlXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBvbGRWYWx1ZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBhZnRlclNldE1vdW50ZWQodmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIHN1cGVyLmFmdGVyU2V0TW91bnRlZCh2YWx1ZSwgb2xkVmFsdWUpO1xuXG4gICAgICAgIC8vIEVuc3VyZSBmb2N1cyB0cmFwcGluZyBpcyB1cC10by1kYXRlLCBlbmFibGVkIG9yIGRpc2FibGVkLlxuICAgICAgICB0aGlzLnN5bmNUcmFwRm9jdXMoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCBhZnRlciB0aGUgcmVzaXphYmxlIGNvbmZpZyBnb3QgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gdmFsdWVcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFmdGVyU2V0UmVzaXphYmxlKHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICB2YWx1ZSAmJiBpbXBvcnQoJy4uL3BsdWdpbi9SZXNpemFibGUubWpzJykudGhlbihtb2R1bGUgPT4ge1xuICAgICAgICAgICAgbGV0IG1lICAgICAgPSB0aGlzLFxuICAgICAgICAgICAgICAgIHBsdWdpbnMgPSBtZS5wbHVnaW5zIHx8IFtdO1xuXG4gICAgICAgICAgICBpZiAoIW1lLmdldFBsdWdpbih7ZmxhZzogJ3Jlc2l6YWJsZSd9KSkge1xuICAgICAgICAgICAgICAgIHBsdWdpbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZSAgICAgICA6IG1vZHVsZS5kZWZhdWx0LFxuICAgICAgICAgICAgICAgICAgICBhcHBOYW1lICAgICAgOiBtZS5hcHBOYW1lLFxuICAgICAgICAgICAgICAgICAgICBkZWxlZ2F0aW9uQ2xzOiAnbmVvLWRpYWxvZycsXG4gICAgICAgICAgICAgICAgICAgIGZsYWcgICAgICAgICA6ICdyZXNpemFibGUnLFxuICAgICAgICAgICAgICAgICAgICAuLi5tZS5yZXNpemFibGVQbHVnaW5Db25maWdcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIG1lLnBsdWdpbnMgPSBwbHVnaW5zXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGFmdGVyIHRoZSB0aXRsZSBjb25maWcgZ290IGNoYW5nZWRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xudWxsfSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfG51bGx9IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFmdGVyU2V0VGl0bGUodmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmhlYWRlclRvb2xiYXIpIHtcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyVG9vbGJhci50aXRsZSA9IHZhbHVlXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYWZ0ZXIgdGhlIHRyYXBGb2N1cyBjb25maWcgZ290IGNoYW5nZWRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHZhbHVlXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBvbGRWYWx1ZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBhZnRlclNldFRyYXBGb2N1cyh2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgdGhpcy5zeW5jVHJhcEZvY3VzKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIGFzeW5jIGFuaW1hdGVIaWRlKCkge1xuICAgICAgICBsZXQgbWUgICAgICA9IHRoaXMsXG4gICAgICAgICAgICBhcHBOYW1lID0gbWUuYXBwTmFtZSxcbiAgICAgICAgICAgIHsgaWQgfSAgPSBtZSxcbiAgICAgICAgICAgIHJlY3RzICAgPSBhd2FpdCBtZS5nZXREb21SZWN0KFtpZCwgbWUuYW5pbWF0ZVRhcmdldElkXSk7XG5cbiAgICAgICAgYXdhaXQgTmVvLmFwcGx5RGVsdGFzKGFwcE5hbWUsIHtcbiAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICBoZWlnaHQgICA6IGAke3JlY3RzWzBdLmhlaWdodH1weGAsXG4gICAgICAgICAgICAgICAgbGVmdCAgICAgOiBgJHtyZWN0c1swXS5sZWZ0ICB9cHhgLFxuICAgICAgICAgICAgICAgIHRvcCAgICAgIDogYCR7cmVjdHNbMF0udG9wICAgfXB4YCxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06ICdub25lJyxcbiAgICAgICAgICAgICAgICB3aWR0aCAgICA6IGAke3JlY3RzWzBdLndpZHRoIH1weGBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgYXdhaXQgbWUudGltZW91dCgzMCk7XG5cbiAgICAgICAgYXdhaXQgTmVvLmFwcGx5RGVsdGFzKGFwcE5hbWUsIHtcbiAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgY2xzOiB7XG4gICAgICAgICAgICAgICAgYWRkOiBbJ2FuaW1hdGVkLWhpZGluZy1zaG93aW5nJ11cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgIGhlaWdodDogYCR7cmVjdHNbMV0uaGVpZ2h0fXB4YCxcbiAgICAgICAgICAgICAgICBsZWZ0ICA6IGAke3JlY3RzWzFdLmxlZnQgIH1weGAsXG4gICAgICAgICAgICAgICAgdG9wICAgOiBgJHtyZWN0c1sxXS50b3AgICB9cHhgLFxuICAgICAgICAgICAgICAgIHdpZHRoIDogYCR7cmVjdHNbMV0ud2lkdGggfXB4YFxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBhd2FpdCBtZS50aW1lb3V0KDI1MCk7XG5cbiAgICAgICAgbWUuY2xvc2VPckhpZGUoZmFsc2UpO1xuXG4gICAgICAgIGlmIChtZS5jbG9zZUFjdGlvbiA9PT0gJ2hpZGUnKSB7XG4gICAgICAgICAgICBhd2FpdCBOZW8uYXBwbHlEZWx0YXMoYXBwTmFtZSwge2lkLCBhY3Rpb246ICdyZW1vdmVOb2RlJ30pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIGFzeW5jIGFuaW1hdGVTaG93KCkge1xuICAgICAgICBsZXQgbWUgICAgICAgICAgICA9IHRoaXMsXG4gICAgICAgICAgICBhcHBOYW1lICAgICAgID0gbWUuYXBwTmFtZSxcbiAgICAgICAgICAgIHsgaWQsIHN0eWxlIH0gPSBtZSxcbiAgICAgICAgICAgIHJlY3QgICAgICAgICAgPSBhd2FpdCBtZS5nZXREb21SZWN0KG1lLmFuaW1hdGVUYXJnZXRJZCk7XG5cbiAgICAgICAgYXdhaXQgbWUucmVuZGVyKHRydWUpO1xuXG4gICAgICAgIC8vIE1vdmUgdG8gY292ZXIgdGhlIGFuaW1hdGlvbiB0YXJnZXRcbiAgICAgICAgYXdhaXQgTmVvLmFwcGx5RGVsdGFzKGFwcE5hbWUsIHtcbiAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgc3R5bGUgOiB7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBgJHtyZWN0LmhlaWdodH1weGAsXG4gICAgICAgICAgICAgICAgbGVmdCAgOiBgJHtyZWN0LmxlZnQgIH1weGAsXG4gICAgICAgICAgICAgICAgdG9wICAgOiBgJHtyZWN0LnRvcCAgIH1weGAsXG4gICAgICAgICAgICAgICAgd2lkdGggOiBgJHtyZWN0LndpZHRoIH1weGBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gV2FpdCBmb3IgdGhlIGVsZW1lbnQgdG8gYWNoaWV2ZSBpdHMgaW5pdGlhbCByZWN0YW5nbGVcbiAgICAgICAgYXdhaXQgbWUudGltZW91dCg1MCk7XG5cbiAgICAgICAgLy8gRXhwYW5kIHRvIGZpbmFsIHN0YXRlXG4gICAgICAgIGF3YWl0IE5lby5hcHBseURlbHRhcyhhcHBOYW1lLCB7XG4gICAgICAgICAgICBpZCxcbiAgICAgICAgICAgIGNsczoge1xuICAgICAgICAgICAgICAgIGFkZDogWydhbmltYXRlZC1oaWRpbmctc2hvd2luZyddXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICBoZWlnaHQgICA6IHN0eWxlPy5oZWlnaHQgICAgfHwgbnVsbCwgLy8gaGVpZ2h0IHdpbGwgcG9pbnQgdG8gdGhlIGFuaW1hdGlvbiBvcmlnaW4sIHNvIHdlIG5lZWQgYSByZXNldFxuICAgICAgICAgICAgICAgIGxlZnQgICAgIDogc3R5bGU/LmxlZnQgICAgICB8fCAnNTAlJyxcbiAgICAgICAgICAgICAgICB0b3AgICAgICA6IHN0eWxlPy50b3AgICAgICAgfHwgJzUwJScsXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBzdHlsZT8udHJhbnNmb3JtIHx8ICd0cmFuc2xhdGUoLTUwJSwgLTUwJSknLFxuICAgICAgICAgICAgICAgIHdpZHRoICAgIDogc3R5bGU/LndpZHRoICAgICB8fCAnNTAlJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBhd2FpdCBtZS50aW1lb3V0KDIwMCk7XG5cbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBhbmltYXRpb24gY2xhc3NcbiAgICAgICAgYXdhaXQgTmVvLmFwcGx5RGVsdGFzKGFwcE5hbWUsIHtpZCwgY2xzOiB7cmVtb3ZlOiBbJ2FuaW1hdGVkLWhpZGluZy1zaG93aW5nJ119fSk7XG5cbiAgICAgICAgbWUuc2hvdyhmYWxzZSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYmVmb3JlIHRoZSBjbG9zZUFjdGlvbiBjb25maWcgZ2V0cyBjaGFuZ2VkXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGJlZm9yZVNldENsb3NlQWN0aW9uKHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5iZWZvcmVTZXRFbnVtVmFsdWUodmFsdWUsIG9sZFZhbHVlLCAnY2xvc2VBY3Rpb24nKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gYW5pbWF0ZT0hIXRoaXMuYW5pbWF0ZVRhcmdldElkXG4gICAgICovXG4gICAgY2xvc2UoYW5pbWF0ZT0hIXRoaXMuYW5pbWF0ZVRhcmdldElkKSB7XG4gICAgICAgIGxldCBtZSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKGFuaW1hdGUpIHtcbiAgICAgICAgICAgIG1lLmFuaW1hdGVIaWRlKClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1lLmZpcmUoJ2Nsb3NlJyk7XG4gICAgICAgICAgICBtZS5kZXN0cm95KHRydWUpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGFuaW1hdGU9ISF0aGlzLmFuaW1hdGVUYXJnZXRJZFxuICAgICAqL1xuICAgIGFzeW5jIGNsb3NlT3JIaWRlKGFuaW1hdGU9ISF0aGlzLmFuaW1hdGVUYXJnZXRJZCkge1xuICAgICAgICBsZXQgbWUgPSB0aGlzO1xuXG4gICAgICAgIG1lW21lLmNsb3NlQWN0aW9uXShhbmltYXRlKTtcbiAgICAgICAgYXdhaXQgbWUudGltZW91dCgzMCk7XG4gICAgICAgIG1lLnN5bmNNb2RhbE1hc2sobWUuaWQpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWN0aW9uIHdoZW4gY2xpY2tpbmcgdGhlIFggYnV0dG9uIGluc2lkZSB0aGUgaGVhZGVyIHRvb2xiYXIuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgY2xvc2VPckhpZGVBY3Rpb24oZGF0YSkge1xuICAgICAgICB0aGlzLmNsb3NlT3JIaWRlKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIGNyZWF0ZUhlYWRlcigpIHtcbiAgICAgICAgbGV0IG1lICAgICAgPSB0aGlzLFxuICAgICAgICAgICAgY2xzICAgICA9IFsnbmVvLWhlYWRlci10b29sYmFyJywgJ25lby10b29sYmFyJ10sXG4gICAgICAgICAgICBoZWFkZXJzID0gbWUuaGVhZGVycyB8fCBbXTtcblxuICAgICAgICBtZS5kcmFnZ2FibGUgJiYgY2xzLnB1c2goJ25lby1kcmFnZ2FibGUnKTtcblxuICAgICAgICBtZS5oZWFkZXJUb29sYmFyID0gTmVvLmNyZWF0ZSh7XG4gICAgICAgICAgICBtb2R1bGUgICA6IFRvb2xiYXIsXG4gICAgICAgICAgICBhcHBOYW1lICA6IG1lLmFwcE5hbWUsXG4gICAgICAgICAgICBjbHMsXG4gICAgICAgICAgICBkb2NrICAgICA6ICd0b3AnLFxuICAgICAgICAgICAgZmxleCAgICAgOiAnbm9uZScsXG4gICAgICAgICAgICBpZCAgICAgICA6IG1lLmdldEhlYWRlclRvb2xiYXJJZCgpLFxuICAgICAgICAgICAgbGlzdGVuZXJzOiB7aGVhZGVyQWN0aW9uOiBtZS5leGVjdXRlSGVhZGVyQWN0aW9uLCBzY29wZTogbWV9LFxuICAgICAgICAgICAgdGl0bGUgICAgOiBtZS50aXRsZSxcbiAgICAgICAgICAgIC4uLm1lLmhlYWRlckNvbmZpZ1xuICAgICAgICB9KTtcblxuICAgICAgICBoZWFkZXJzLnVuc2hpZnQobWUuaGVhZGVyVG9vbGJhcik7XG5cbiAgICAgICAgbWUuaGVhZGVycyA9IGhlYWRlcnNcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiB7T2JqZWN0fSBkYXRhXG4gICAgICovXG4gICAgZXhlY3V0ZUhlYWRlckFjdGlvbihkYXRhKSB7XG4gICAgICAgIGxldCBtZSA9IHRoaXMsXG5cbiAgICAgICAgbWFwID0ge1xuICAgICAgICAgICAgY2xvc2UgICA6IG1lLmNsb3NlT3JIaWRlQWN0aW9uLFxuICAgICAgICAgICAgbWF4aW1pemU6IG1lLm1heGltaXplXG4gICAgICAgIH07XG5cbiAgICAgICAgbWFwW2RhdGEuYWN0aW9uXT8uY2FsbChtZSwgZGF0YSk7XG5cbiAgICAgICAgbWUuZmlyZSgnaGVhZGVyQWN0aW9uJywge1xuICAgICAgICAgICAgZGlhbG9nOiBtZSxcbiAgICAgICAgICAgIC4uLmRhdGFcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBpZCBvZiB0aGUgYW5pbWF0aW9uIG5vZGVcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxuICAgICAqL1xuICAgIGdldEFuaW1hdGVUYXJnZXRJZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaWQgKyAnLWFuaW1hdGUnXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgaWQgb2YgdGhlIGhlYWRlciB0b29sYmFyXG4gICAgICogQHJldHVybnMge1N0cmluZ31cbiAgICAgKi9cbiAgICBnZXRIZWFkZXJUb29sYmFySWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlkICsgJy1oZWFkZXItdG9vbGJhcidcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSB2ZG9tXG4gICAgICovXG4gICAgZ2V0UHJveHlWZG9tKCkge1xuICAgICAgICByZXR1cm4gVkRvbVV0aWwuY2xvbmUodGhpcy52ZG9tKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gYW5pbWF0ZT0hIXRoaXMuYW5pbWF0ZVRhcmdldElkXG4gICAgICovXG4gICAgYXN5bmMgaGlkZShhbmltYXRlPSEhdGhpcy5hbmltYXRlVGFyZ2V0SWQpIHtcbiAgICAgICAgbGV0IG1lID0gdGhpcztcblxuICAgICAgICBpZiAoYW5pbWF0ZSkge1xuICAgICAgICAgICAgbWUuYW5pbWF0ZUhpZGUoKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWUudW5tb3VudCgpO1xuICAgICAgICAgICAgbWUuZmlyZSgnaGlkZScpXG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCBtZS50aW1lb3V0KDMwKTtcblxuICAgICAgICBtZS5zeW5jTW9kYWxNYXNrKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIGluaXQoKSB7XG4gICAgICAgIHN1cGVyLmluaXQoKTtcblxuICAgICAgICBsZXQgbWUgPSB0aGlzO1xuXG4gICAgICAgIGlmIChtZS5hbmltYXRlVGFyZ2V0SWQpIHtcbiAgICAgICAgICAgIG1lLmF1dG9TaG93ICYmIG1lLnNob3coKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWUudGltZW91dCgxMDApLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIG1lLnN5bmNNb2RhbE1hc2soKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbZGF0YV1cbiAgICAgKi9cbiAgICBtYXhpbWl6ZShkYXRhKSB7XG4gICAgICAgIGxldCBtZSA9IHRoaXM7XG5cbiAgICAgICAgZGF0YS5jb21wb25lbnQuaWNvbkNscyA9IG1lLm1heGltaXplZCA/IG1lLm1heGltaXplQ2xzIDogbWUubWluaW1pemVDbHM7XG5cbiAgICAgICAgbWUubWF4aW1pemVkID0gIW1lLm1heGltaXplZFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgb25Db25zdHJ1Y3RlZCgpIHtcbiAgICAgICAgc3VwZXIub25Db25zdHJ1Y3RlZCgpO1xuXG4gICAgICAgIGxldCBtZSA9IHRoaXM7XG5cbiAgICAgICAgbWUuaGVhZGVyVG9vbGJhciA9IG1lLmRvd24oe1xuICAgICAgICAgICAgaWQ6IG1lLmdldEhlYWRlclRvb2xiYXJJZCgpXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIGRhdGFcbiAgICAgKi9cbiAgICBvbkRyYWdFbmQoZGF0YSkge1xuICAgICAgICBsZXQgbWUgPSB0aGlzLFxuICAgICAgICAgICAgaW5pdGlhbFRyYW5zaXRpb25Qcm9wZXJ0eSwgc3R5bGU7XG5cbiAgICAgICAgaWYgKCFtZS5tYXhpbWl6ZWQpIHtcbiAgICAgICAgICAgIG1lLmdldERvbVJlY3QobWUuZHJhZ1pvbmUuZHJhZ1Byb3h5LmlkKS50aGVuKHJlY3QgPT4ge1xuICAgICAgICAgICAgICAgIHN0eWxlID0gbWUuc3R5bGU7XG5cbiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHN0eWxlLCB7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCAgIDogYCR7cmVjdC5oZWlnaHR9cHhgLFxuICAgICAgICAgICAgICAgICAgICBsZWZ0ICAgICA6IGAke3JlY3QubGVmdH1weGAsXG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHkgIDogMSxcbiAgICAgICAgICAgICAgICAgICAgdG9wICAgICAgOiBgJHtyZWN0LnRvcH1weGAsXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICB3aWR0aCAgICA6IGAke3JlY3Qud2lkdGh9cHhgXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIW1lLmFuaW1hdGVPbkRyYWdFbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFRyYW5zaXRpb25Qcm9wZXJ0eSA9IHN0eWxlLnRyYW5zaXRpb25Qcm9wZXJ0eSB8fCBudWxsO1xuXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlLnRyYW5zaXRpb25Qcm9wZXJ0eSA9ICdub25lJztcblxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlID0gbWUuc3R5bGU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlLnRyYW5zaXRpb25Qcm9wZXJ0eSA9IGluaXRpYWxUcmFuc2l0aW9uUHJvcGVydHk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG1lLnN0eWxlID0gc3R5bGVcbiAgICAgICAgICAgICAgICAgICAgfSwgNTApXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbWUuc3R5bGUgPSBzdHlsZTtcblxuICAgICAgICAgICAgICAgIG1lLmRyYWdab25lLmRyYWdFbmQoZGF0YSk7XG5cbiAgICAgICAgICAgICAgICAvLyB3ZSBuZWVkIGEgcmVzZXQsIG90aGVyd2lzZSB3ZSBkbyBub3QgZ2V0IGEgY2hhbmdlIGV2ZW50IGZvciB0aGUgbmV4dCBvbkRyYWdTdGFydCgpIGNhbGxcbiAgICAgICAgICAgICAgICBtZS5kcmFnWm9uZS5ib3VuZGFyeUNvbnRhaW5lcklkID0gbnVsbDtcbiAgICAgICAgICAgICAgICBtZS5pc0RyYWdnaW5nICAgICAgICAgICAgICAgICAgID0gZmFsc2VcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCB3aWxsIG9ubHkgZ2V0IHRyaWdnZXJlZCBpbiBjYXNlIGFsd2F5c0ZpcmVEcmFnTW92ZSBpcyBpbmNsdWRlZCBpbnNpZGUgdGhlIGRyYWdab25lQ29uZmlnXG4gICAgICogQHBhcmFtIGRhdGFcbiAgICAgKi9cbiAgICBvbkRyYWdNb3ZlKGRhdGEpIHtcbiAgICAgICAgdGhpcy5kcmFnWm9uZS5kcmFnTW92ZShkYXRhKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBkYXRhXG4gICAgICovXG4gICAgb25EcmFnU3RhcnQoZGF0YSkge1xuICAgICAgICBsZXQgbWUgICAgPSB0aGlzLFxuICAgICAgICAgICAgc3R5bGUgPSBtZS5zdHlsZSB8fCB7fTtcblxuICAgICAgICBpZiAoIW1lLm1heGltaXplZCkge1xuICAgICAgICAgICAgbWUuaXNEcmFnZ2luZyA9IHRydWU7XG5cbiAgICAgICAgICAgIG1lLmdldFBsdWdpbih7ZmxhZzogJ3Jlc2l6YWJsZSd9KT8ucmVtb3ZlQWxsTm9kZXMoKTtcblxuICAgICAgICAgICAgaWYgKCFtZS5kcmFnWm9uZSkge1xuICAgICAgICAgICAgICAgIG1lLmRyYWdab25lID0gTmVvLmNyZWF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZSAgICAgICAgICAgICA6IERyYWdab25lLFxuICAgICAgICAgICAgICAgICAgICBhcHBOYW1lICAgICAgICAgICAgOiBtZS5hcHBOYW1lLFxuICAgICAgICAgICAgICAgICAgICBib2R5Q3Vyc29yU3R5bGUgICAgOiAnbW92ZSAhaW1wb3J0YW50JyxcbiAgICAgICAgICAgICAgICAgICAgYm91bmRhcnlDb250YWluZXJJZDogbWUuYm91bmRhcnlDb250YWluZXJJZCxcbiAgICAgICAgICAgICAgICAgICAgZHJhZ0VsZW1lbnQgICAgICAgIDogbWUudmRvbSxcbiAgICAgICAgICAgICAgICAgICAgZHJhZ1Byb3h5Q29uZmlnICAgIDoge3Zkb206IG1lLmdldFByb3h5VmRvbSgpfSxcbiAgICAgICAgICAgICAgICAgICAgb3duZXIgICAgICAgICAgICAgIDogbWUsXG4gICAgICAgICAgICAgICAgICAgIHVzZVByb3h5V3JhcHBlciAgICA6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAuLi5tZS5kcmFnWm9uZUNvbmZpZ1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgbWUuZmlyZSgnZHJhZ1pvbmVDcmVhdGVkJywge1xuICAgICAgICAgICAgICAgICAgICBkcmFnWm9uZTogbWUuZHJhZ1pvbmUsXG4gICAgICAgICAgICAgICAgICAgIGlkICAgICAgOiBtZS5pZFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1lLmRyYWdab25lLmJvdW5kYXJ5Q29udGFpbmVySWQgPSBtZS5ib3VuZGFyeUNvbnRhaW5lcklkXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1lLmRyYWdab25lLmRyYWdTdGFydChkYXRhKTtcblxuICAgICAgICAgICAgc3R5bGUub3BhY2l0eSA9IDAuNztcblxuICAgICAgICAgICAgbWUuc3R5bGUgPSBzdHlsZVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBhbmltYXRlPSEhdGhpcy5hbmltYXRlVGFyZ2V0SWRcbiAgICAgKi9cbiAgICBzaG93KGFuaW1hdGU9ISF0aGlzLmFuaW1hdGVUYXJnZXRJZCkge1xuICAgICAgICBsZXQgbWUgPSB0aGlzO1xuXG4gICAgICAgIGlmIChhbmltYXRlKSB7XG4gICAgICAgICAgICBtZS5hbmltYXRlU2hvdygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFtZS5yZW5kZXJlZCkge1xuICAgICAgICAgICAgICAgIG1lLnJlbmRlcih0cnVlKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBtZS5maXJlKCdzaG93JylcbiAgICAgICAgfVxuXG4gICAgICAgIG1lLnN5bmNNb2RhbE1hc2soKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZD10aGlzLmlkXG4gICAgICovXG4gICAgc3luY01vZGFsTWFzayhpZD10aGlzLmlkKSB7XG4gICAgICAgIC8vIFRoaXMgc2hvdWxkIHN5bmMgdGhlIHZpc2liaWxpdHkgYW5kIHBvc2l0aW9uIG9mIHRoZSBtb2RhbCBtYXNrIGVsZW1lbnQuXG4gICAgICAgIE5lby5tYWluLkRvbUFjY2Vzcy5zeW5jTW9kYWxNYXNrKHsgaWQsIG1vZGFsOiB0aGlzLm1vZGFsIH0pXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBzeW5jVHJhcEZvY3VzKCkge1xuICAgICAgICBpZiAodGhpcy5tb3VudGVkKSB7XG4gICAgICAgICAgICBOZW8ubWFpbi5Eb21BY2Nlc3MudHJhcEZvY3VzKHsgaWQ6IHRoaXMuaWQsIHRyYXA6IHRoaXMudHJhcEZvY3VzIH0pXG4gICAgICAgIH1cbiAgICB9XG59XG5cbk5lby5hcHBseUNsYXNzQ29uZmlnKEJhc2UpO1xuXG5leHBvcnQgZGVmYXVsdCBCYXNlO1xuIiwiaW1wb3J0IEJhc2UgZnJvbSAnLi4vLi4vdG9vbGJhci9CYXNlLm1qcyc7XG5cbi8qKlxuICogQGNsYXNzIE5lby5kaWFsb2cuaGVhZGVyLlRvb2xiYXJcbiAqIEBleHRlbmRzIE5lby50b29sYmFyLkJhc2VcbiAqL1xuY2xhc3MgVG9vbGJhciBleHRlbmRzIEJhc2Uge1xuICAgIHN0YXRpYyBjb25maWcgPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IGNsYXNzTmFtZT0nTmVvLmRpYWxvZy5oZWFkZXIuVG9vbGJhcidcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgY2xhc3NOYW1lOiAnTmVvLmRpYWxvZy5oZWFkZXIuVG9vbGJhcicsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3R9IGFjdGlvbk1hcFxuICAgICAgICAgKi9cbiAgICAgICAgYWN0aW9uTWFwOiB7XG4gICAgICAgICAgICBjbG9zZSAgIDogKCkgPT4gKHthY3Rpb246ICdjbG9zZScsICAgIGljb25DbHM6ICdmYXIgZmEtd2luZG93LWNsb3NlJ30pLFxuICAgICAgICAgICAgbWF4aW1pemU6ICgpID0+ICh7YWN0aW9uOiAnbWF4aW1pemUnLCBpY29uQ2xzOiAnZmFyIGZhLXdpbmRvdy1tYXhpbWl6ZSd9KVxuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogWW91IGNhbiBkZWZpbmUgdGhlIGFjdGlvbiBvcmRlciBhbmQgZGlyZWN0bHkgYWRkIGN1c3RvbSBhY3Rpb25zLlxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiB7XG4gICAgICAgICAqICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAqICAgICAgICAgJ2Nsb3NlJyxcbiAgICAgICAgICogICAgICAgICAnbWF4aW1pemUnLFxuICAgICAgICAgKiAgICAgICAgIHthY3Rpb246ICdoZWxwJywgaWNvbkNsczogJ2ZhciBmYS1jaXJjbGUtcXVlc3Rpb24nfVxuICAgICAgICAgKiAgICAgXVxuICAgICAgICAgKiB9XG4gICAgICAgICAqXG4gICAgICAgICAqIFlvdSBjYW4gYWxzbyBleHRlbmQgdGhlIGFjdGlvbk1hcCBpZiBuZWVkZWQuXG4gICAgICAgICAqIEBtZW1iZXIge09iamVjdFtdfFN0cmluZ1tdfG51bGx9IGFjdGlvbnM9WydtYXhpbWl6ZScsJ2Nsb3NlJ11cbiAgICAgICAgICovXG4gICAgICAgIGFjdGlvbnM6IFsnbWF4aW1pemUnLCAnY2xvc2UnXSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ3xudWxsfSB0aXRsZT1udWxsXG4gICAgICAgICAqL1xuICAgICAgICB0aXRsZV86IG51bGxcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYWZ0ZXIgdGhlIHRpdGxlIGNvbmZpZyBnb3QgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvbGRWYWx1ZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBhZnRlclNldFRpdGxlKHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICB0aGlzLmRvd24oe2ZsYWc6ICd0aXRsZS1sYWJlbCd9KT8uc2V0KHtcbiAgICAgICAgICAgIGhpZGRlbjogIXZhbHVlLFxuICAgICAgICAgICAgdGV4dCAgOiB2YWx1ZVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgY3JlYXRlSXRlbXMoKSB7XG4gICAgICAgIGxldCBtZSAgICAgID0gdGhpcyxcbiAgICAgICAgICAgIGhhbmRsZXIgPSBtZS5maXJlQWN0aW9uLmJpbmQobWUpLFxuICAgICAgICAgICAgaXRlbXMgICA9IG1lLml0ZW1zIHx8IFtdO1xuXG4gICAgICAgIGl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgbnR5cGUgOiAnbGFiZWwnLFxuICAgICAgICAgICAgY2xzICAgOiBbJ25lby1wYW5lbC1oZWFkZXItdGV4dCcsICduZW8tbGFiZWwnXSxcbiAgICAgICAgICAgIGZsYWcgIDogJ3RpdGxlLWxhYmVsJyxcbiAgICAgICAgICAgIGhpZGRlbjogIW1lLnRpdGxlLFxuICAgICAgICAgICAgdGV4dCAgOiBtZS50aXRsZVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAobWUuYWN0aW9ucykge1xuICAgICAgICAgICAgaXRlbXMucHVzaCgnLT4nKTtcblxuICAgICAgICAgICAgbWUuYWN0aW9ucy5mb3JFYWNoKGFjdGlvbiA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKE5lby50eXBlT2YoYWN0aW9uKSAhPT0gJ09iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gbWUuYWN0aW9uTWFwW2FjdGlvbl0oKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goe2hhbmRsZXIsIC4uLmFjdGlvbn0pXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgbWUuaXRlbXMgPSBpdGVtcztcblxuICAgICAgICBzdXBlci5jcmVhdGVJdGVtcygpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKi9cbiAgICBmaXJlQWN0aW9uKGRhdGEpIHtcbiAgICAgICAgbGV0IGNvbXBvbmVudCA9IGRhdGEuY29tcG9uZW50O1xuXG4gICAgICAgIHRoaXMuZmlyZSgnaGVhZGVyQWN0aW9uJywge1xuICAgICAgICAgICAgYWN0aW9uOiBjb21wb25lbnQuYWN0aW9uLFxuICAgICAgICAgICAgY29tcG9uZW50LFxuICAgICAgICAgICAgc2NvcGUgOiB0aGlzXG4gICAgICAgIH0pXG4gICAgfVxufVxuXG5OZW8uYXBwbHlDbGFzc0NvbmZpZyhUb29sYmFyKTtcblxuZXhwb3J0IGRlZmF1bHQgVG9vbGJhcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==