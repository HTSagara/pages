"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["vendors-src_dialog_Base_mjs"],{

/***/ "./src/dialog/Base.mjs":
/*!*****************************!*\
  !*** ./src/dialog/Base.mjs ***!
  \*****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _container_Panel_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../container/Panel.mjs */ "./src/container/Panel.mjs");
/* harmony import */ var _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Array.mjs */ "./src/util/Array.mjs");
/* harmony import */ var _header_Toolbar_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./header/Toolbar.mjs */ "./src/dialog/header/Toolbar.mjs");
/* harmony import */ var _util_VDom_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/VDom.mjs */ "./src/util/VDom.mjs");





let DragZone;

/**
 * @class Neo.dialog.Base
 * @extends Neo.container.Panel
 */
class Base extends _container_Panel_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    /**
     * Valid values for closeAction
     * @member {String[]} closeActions=['close','hide']
     * @protected
     * @static
     */
    static closeActions = ['close', 'hide']

    static config = {
        /**
         * @member {String} className='Neo.dialog.Base'
         * @protected
         */
        className: 'Neo.dialog.Base',
        /**
         * @member {String} ntype='dialog'
         * @protected
         */
        ntype: 'dialog',
        /**
         * @member {Boolean} animateOnDragEnd=false
         */
        animateOnDragEnd: false,
        /**
         * @member {String|null} animateTargetId_=null
         */
        animateTargetId_: null,
        /**
         * @member {Boolean} autoMount=true
         */
        autoMount: true,
        /**
         * @member {Boolean} autoRender=true
         */
        autoRender: true,
        /**
         * @member {String[]} baseCls=['neo-dialog','neo-panel','neo-container']
         * @protected
         */
        baseCls: ['neo-dialog', 'neo-panel', 'neo-container'],
        /**
         * Either a dom node id, 'document.body' or null
         * @member {String|null} boundaryContainerId='document.body'
         */
        boundaryContainerId: 'document.body',
        /**
         * Define what happens in case you click on the close button
         * close will destroy the instance, hide will keep it for later re-use.
         * Valid values: close, hide
         * @member {String} closeAction='close'
         */
        closeAction: 'close',
        /**
         * @member {Boolean} draggable_=true
         */
        draggable_: true,
        /**
         * @member {Boolean} dragListenersAdded=false
         * @protected
         */
        dragListenersAdded: false,
        /**
         * @member {Neo.draggable.DragZone|null} dragZone=null
         */
        dragZone: null,
        /**
         * @member {Object} dragZoneConfig=null
         */
        dragZoneConfig: null,
        /**
         * @member {Object} headerConfig=null
         */
        headerConfig: null,
        /**
         * @member {Neo.toolbar.Base|null} headerToolbar=null
         */
        headerToolbar: null,
        /**
         * @member {Boolean} isDragging=false
         * @protected
         */
        isDragging: false,
        /**
         * @member {String} maximizeCls='far fa-window-maximize'
         */
        maximizeCls: 'far fa-window-maximize',
        /**
         * @member {Boolean} maximized_=false
         */
        maximized_: false,
        /**
         * @member {String} minimizeCls='far fa-window-minimize'
         */
        minimizeCls: 'far fa-window-minimize',
        /**
         * @member {Boolean} resizable_=true
         */
        resizable_: true,
        /**
         * @member {Object} resizablePluginConfig=null
         */
        resizablePluginConfig: null,
        /**
         * @member {String|null} title_=null
         */
        title_: null,
        /**
         * @member {Object} _vdom
         */
        _vdom:
        {cls: ['neo-dialog-wrapper'], cn: [
            {cn: []}
        ]}
    }

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);

        let me = this;

        me.vdom.id = me.getWrapperId();

        me.createHeader();

        me.animateTargetId && me.animateShow();
    }

    /**
     * Triggered after the animateTargetId config got changed
     * @param {String|null} value
     * @param {String|null} oldValue
     * @protected
     */
    afterSetAnimateTargetId(value, oldValue) {
        this.autoMount  = !value;
        this.autoRender = !value;
    }

    /**
     * Triggered after the appName config got changed
     * @param {String|null} value
     * @param {String|null} oldValue
     * @protected
     */
    afterSetAppName(value, oldValue) {
        let me        = this,
            resizable = me.getPlugin({flag: 'resizable'});

        if (me.dragZone) {
            me.dragZone.appName = value;
        }

        if (resizable) {
            resizable.appName = value;
        }

        super.afterSetAppName(value, oldValue);
    }

    /**
     * Triggered after the draggable config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetDraggable(value, oldValue) {
        let me           = this,
            domListeners = me.domListeners,
            cls;

        if (oldValue !== undefined && me.headerToolbar) {
            cls = me.headerToolbar.cls;
            _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"][value ? 'add' : 'remove'](cls, 'neo-draggable');
            me.headerToolbar.cls = cls;
        }

        value && __webpack_require__.e(/*! import() */ "vendors-src_draggable_DragZone_mjs").then(__webpack_require__.bind(__webpack_require__, /*! ../draggable/DragZone.mjs */ "./src/draggable/DragZone.mjs")).then(module => {
            DragZone = module.default;

            if (!me.dragListenersAdded) {
                domListeners.push(
                    {'drag:end'  : me.onDragEnd,   scope: me, delegate: '.neo-header-toolbar'},
                    {'drag:start': me.onDragStart, scope: me, delegate: '.neo-header-toolbar'}
                );

                if (me.dragZoneConfig?.alwaysFireDragMove) {
                    domListeners.push(
                        {'drag:move': me.onDragMove, scope: me, delegate: '.neo-header-toolbar'}
                    );
                }

                me.domListeners       = domListeners;
                me.dragListenersAdded = true;
            }
        });
    }

    /**
     * Triggered after the maximized config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetMaximized(value, oldValue) {
        let me   = this,
            cls  = me.vdom.cls; // todo: using wrapperCls

        _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"][value ? 'add' : 'remove'](cls, 'neo-maximized');
        me.update();
    }

    /**
     * Triggered after the mounted config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetMounted(value, oldValue) {
        super.afterSetMounted(value, oldValue);

        let me = this;

        if (value && me.animateTargetId) {
            Neo.applyDeltas(me.appName, {
                action: 'removeNode',
                id    : me.getAnimateTargetId()
            })
        }
    }

    /**
     * Triggered after the resizable config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetResizable(value, oldValue) {
        value && Promise.all(/*! import() */[__webpack_require__.e("vendors-src_draggable_DragZone_mjs"), __webpack_require__.e("vendors-src_plugin_Resizable_mjs")]).then(__webpack_require__.bind(__webpack_require__, /*! ../plugin/Resizable.mjs */ "./src/plugin/Resizable.mjs")).then(module => {
            let me      = this,
                plugins = me.plugins || [];

            if (!me.getPlugin({flag: 'resizable'})) {
                plugins.push({
                    module       : module.default,
                    appName      : me.appName,
                    delegationCls: 'neo-dialog',
                    flag         : 'resizable',
                    ...me.resizablePluginConfig
                });

                me.plugins = plugins;
            }
        });
    }

    /**
     * Triggered after the title config got changed
     * @param {String|null} value
     * @param {String|null} oldValue
     * @protected
     */
    afterSetTitle(value, oldValue) {
        if (this.headerToolbar) {
            this.headerToolbar.title = value;
        }
    }

    /**
     *
     */
    async animateHide() {
        let me      = this,
            appName = me.appName,
            id      = me.getAnimateTargetId(),
            rects   = await me.getDomRect([me.id, me.animateTargetId]);

        await Neo.currentWorker.promiseMessage('main', {
            action  : 'mountDom',
            appName,
            html    : `<div id="${id}" class="neo-animate-dialog neo-hide" style="height:${rects[0].height}px;left:${rects[0].left}px;top:${rects[0].top}px;width:${rects[0].width}px;"></div>`,
            parentId: 'document.body'
        });

        me.closeOrHide(false);

        await Neo.timeout(30);

        await Neo.currentWorker.promiseMessage('main', {
            action: 'updateDom',
            appName,
            deltas: [{
                id,
                style: {
                    height: `${rects[1].height}px`,
                    left  : `${rects[1].left  }px`,
                    top   : `${rects[1].top   }px`,
                    width : `${rects[1].width }px`
                }
            }]
        });

        await Neo.timeout(250);

        await Neo.currentWorker.promiseMessage('main', {
            action: 'updateDom',
            appName,
            deltas: [{action: 'removeNode', id}]
        });
    }

    /**
     *
     */
    async animateShow() {
        let me           = this,
            appName      = me.appName,
            id           = me.getAnimateTargetId(),
            wrapperStyle = me.wrapperStyle,
            rect         = await me.getDomRect(me.animateTargetId);

        await Neo.currentWorker.promiseMessage('main', {
            action  : 'mountDom',
            appName,
            html    : `<div id="${id}" class="neo-animate-dialog" style="height:${rect.height}px;left:${rect.left}px;top:${rect.top}px;width:${rect.width}px;"></div>`,
            parentId: 'document.body'
        });

        await Neo.timeout(30);

        await Neo.currentWorker.promiseMessage('main', {
            action: 'updateDom',
            appName,
            deltas: [{
                id,
                style: {
                    height   : wrapperStyle?.height    || '50%',
                    left     : wrapperStyle?.left      || '50%',
                    top      : wrapperStyle?.top       || '50%',
                    transform: wrapperStyle?.transform || 'translate(-50%, -50%)',
                    width    : wrapperStyle?.width     || '50%'
                }
            }]
        });

        await Neo.timeout(200);

        me.show(false);
    }

    /**
     * Triggered before the closeAction config gets changed
     * @param {String} value
     * @param {String} oldValue
     * @protected
     */
    beforeSetCloseAction(value, oldValue) {
        return this.beforeSetEnumValue(value, oldValue, 'closeAction');
    }

    /**
     * @param {Boolean} [animate=!!this.animateTargetId]
     */
    close(animate=!!this.animateTargetId) {
        let me = this;

        if (animate) {
            me.animateHide();
        } else {
            me.fire('close');
            me.destroy(true);
        }
    }

    /**
     * @param {Boolean} [animate=!!this.animateTargetId]
     */
    closeOrHide(animate=!!this.animateTargetId) {
        this[this.closeAction](animate);
    }

    /**
     *
     */
    createHeader() {
        let me      = this,
            cls     = ['neo-header-toolbar', 'neo-toolbar'],
            headers = me.headers || [];

        me.draggable && cls.push('neo-draggable');

        me.headerToolbar = Neo.create({
            module   : _header_Toolbar_mjs__WEBPACK_IMPORTED_MODULE_2__["default"],
            appName  : me.appName,
            cls,
            dock     : 'top',
            flex     : 'none',
            id       : me.getHeaderToolbarId(),
            listeners: {headerAction: me.executeHeaderAction, scope: me},
            title    : me.title,
            ...me.headerConfig
        });

        headers.unshift(me.headerToolbar);

        me.headers = headers;
    }

    /**
     * {Object} data
     */
    executeHeaderAction(data) {
        let me = this,

        map = {
            close   : me.closeOrHide,
            maximize: me.maximize
        };

        map[data.action]?.call(me, data);

        me.fire('headerAction', {
            dialog: me,
            ...data
        })
    }

    /**
     * Returns the id of the animation node
     * @returns {String}
     */
    getAnimateTargetId() {
        return this.id + '-animate';
    }

    /**
     * Returns the id of the header toolbar
     * @returns {String}
     */
    getHeaderToolbarId() {
        return this.id + '-header-toolbar';
    }

    /**
     * @returns {Object} vdom
     */
    getProxyVdom() {
        let vdom = _util_VDom_mjs__WEBPACK_IMPORTED_MODULE_3__["default"].clone(this.vdom);

        // this call expects a fixed dialog structure
        // todo: a panel content container could get a flag which we can query for instead
        vdom.cn[0].cn[1].cn = [];

        return vdom;
    }

    /**
     * @returns {Object} The new vdom root
     */
    getVdomRoot() {
        return this.vdom.cn[0];
    }

    /**
     * @returns {Object} The new vnode root
     */
    getVnodeRoot() {
        return this.vnode.childNodes[0];
    }

    /**
     * Returns the id of the header toolbar
     * @returns {String}
     */
    getWrapperId() {
        return this.id + '-wrapper';
    }

    /**
     * @param {Boolean} [animate=!!this.animateTargetId]
     */
    hide(animate=!!this.animateTargetId) {
        let me = this;

        if (animate) {
            me.animateHide();
        } else {
            me.unmount();
            me.fire('hide');
        }
    }

    /**
     * @param {Object} [data]
     */
    maximize(data) {
        let me = this;

        data.component.iconCls = me.maximized ? me.maximizeCls : me.minimizeCls;

        me.maximized = !me.maximized;
    }

    /**
     *
     */
    onConstructed() {
        super.onConstructed();

        let me = this;

        me.headerToolbar = me.down({
            id: me.getHeaderToolbarId()
        });
    }

    /**
     * @param data
     */
    onDragEnd(data) {
        let me = this,
            initialTransitionProperty, wrapperStyle;

        if (!me.maximized) {
            me.getDomRect(me.dragZone.dragProxy.id).then(rect => {
                wrapperStyle = me.wrapperStyle;

                Object.assign(wrapperStyle, {
                    height   : `${rect.height}px`,
                    left     : `${rect.left}px`,
                    opacity  : 1,
                    top      : `${rect.top}px`,
                    transform: 'none',
                    width    : `${rect.width}px`
                });

                if (!me.animateOnDragEnd) {
                    initialTransitionProperty = wrapperStyle.transitionProperty || null;

                    wrapperStyle.transitionProperty = 'none';

                    setTimeout(() => {
                        wrapperStyle = me.wrapperStyle;

                        wrapperStyle.transitionProperty = initialTransitionProperty;

                        me.wrapperStyle = wrapperStyle;
                    }, 50);
                }

                me.wrapperStyle = wrapperStyle;

                me.dragZone.dragEnd(data);

                // we need a reset, otherwise we do not get a change event for the next onDragStart() call
                me.dragZone.boundaryContainerId = null;
                me.isDragging                   = false;
            });
        }
    }

    /**
     * This method will only get triggered in case alwaysFireDragMove is included inside the dragZoneConfig
     * @param data
     */
    onDragMove(data) {
        this.dragZone.dragMove(data);
    }

    /**
     * @param data
     */
    onDragStart(data) {
        let me           = this,
            wrapperStyle = me.wrapperStyle || {},
            resizablePlugin;

        if (!me.maximized) {
            me.isDragging = true;

            resizablePlugin = me.getPlugin({flag: 'resizable'});

            if (resizablePlugin) {
                resizablePlugin.removeAllNodes();
            }

            if (!me.dragZone) {
                me.dragZone = Neo.create({
                    module             : DragZone,
                    appName            : me.appName,
                    bodyCursorStyle    : 'move !important',
                    boundaryContainerId: me.boundaryContainerId,
                    dragElement        : me.vdom,
                    dragProxyConfig    : {vdom: me.getProxyVdom()},
                    owner              : me,
                    useProxyWrapper    : false,
                    ...me.dragZoneConfig
                });

                me.fire('dragZoneCreated', {
                    dragZone: me.dragZone,
                    id      : me.id
                });
            } else {
                me.dragZone.boundaryContainerId = me.boundaryContainerId;
            }

            me.dragZone.dragStart(data);

            wrapperStyle.opacity = 0.7;

            me.wrapperStyle = wrapperStyle;
        }
    }

    /**
     * @param {Boolean} [animate=!!this.animateTargetId]
     */
    show(animate=!!this.animateTargetId) {
        let me = this;

        if (animate) {
            me.animateShow();
        } else {
            me.render(true);
            me.fire('show');
        }
    }
}

Neo.applyClassConfig(Base);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Base);


/***/ }),

/***/ "./src/dialog/header/Toolbar.mjs":
/*!***************************************!*\
  !*** ./src/dialog/header/Toolbar.mjs ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _toolbar_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../toolbar/Base.mjs */ "./src/toolbar/Base.mjs");


/**
 * @class Neo.dialog.header.Toolbar
 * @extends Neo.toolbar.Base
 */
class Toolbar extends _toolbar_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.dialog.header.Toolbar'
         * @protected
         */
        className: 'Neo.dialog.header.Toolbar',
        /**
         * @member {String|null} title=null
         */
        title_: null
    }

    /**
     * @member {Object} actionMap
     */
    actionMap = {
        close   : () => ({action: 'close',    iconCls: 'far fa-window-close'}),
        maximize: () => ({action: 'maximize', iconCls: 'far fa-window-maximize'})
    }
    /**
     * You can define the action order and directly add custom actions.
     * @example
     * {
     *     actions: [
     *         'close',
     *         'maximize',
     *         {action: 'help', iconCls: 'far fa-circle-question'}
     *     ]
     * }
     *
     * You can also extend the actionMap if needed.
     * @member {Object[]|String[]|null} actions=['maximize','close']
     */
    actions = ['maximize', 'close']

    /**
     * Triggered after the title config got changed
     * @param {String} value
     * @param {String} oldValue
     * @protected
     */
    afterSetTitle(value, oldValue) {
        this.down({flag: 'title-label'})?.set({
            removeDom: !value,
            text     : value
        })
    }

    /**
     *
     */
    createItems() {
        let me      = this,
            handler = me.fireAction.bind(me),
            items   = me.items || [];

        items.push({
            ntype    : 'label',
            cls      : ['neo-panel-header-text', 'neo-label'],
            flag     : 'title-label',
            removeDom: !me.title,
            text     : me.title
        });

        if (me.actions) {
            items.push('->');

            me.actions.forEach(action => {
                if (Neo.typeOf(action) !== 'Object') {
                    action = me.actionMap[action]()
                }

                items.push({handler, ...action})
            })
        }

        me.items = items;

        super.createItems();
    }

    /**
     * @param {Object} data
     */
    fireAction(data) {
        let component = data.component;

        this.fire('headerAction', {
            action: component.action,
            component,
            scope : this
        })
    }
}

Neo.applyClassConfig(Toolbar);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Toolbar);


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmtzL2FwcC92ZW5kb3JzLXNyY19kaWFsb2dfQmFzZV9tanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBOEM7QUFDTDtBQUNHO0FBQ0o7O0FBRXhDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDREQUFLO0FBQ3hCO0FBQ0E7QUFDQSxnQkFBZ0IsVUFBVTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixTQUFTO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixhQUFhO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixTQUFTO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixTQUFTO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixVQUFVO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsYUFBYTtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw2QkFBNkI7QUFDakQ7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHVCQUF1QjtBQUMzQztBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixTQUFTO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNB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QkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isd0JBQXdCO0FBQ3hDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLG9CQUFvQjtBQUN2QztBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw0QkFBNEIsbUJBQW1CO0FBQy9DLGFBQWE7QUFDYjs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBOztBQUVBLGlFQUFlLE9BQU8sRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL25lby5tanMvLi9zcmMvZGlhbG9nL0Jhc2UubWpzIiwid2VicGFjazovL25lby5tanMvLi9zcmMvZGlhbG9nL2hlYWRlci9Ub29sYmFyLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUGFuZWwgICAgZnJvbSAnLi4vY29udGFpbmVyL1BhbmVsLm1qcyc7XG5pbXBvcnQgTmVvQXJyYXkgZnJvbSAnLi4vdXRpbC9BcnJheS5tanMnO1xuaW1wb3J0IFRvb2xiYXIgIGZyb20gJy4vaGVhZGVyL1Rvb2xiYXIubWpzJztcbmltcG9ydCBWRG9tVXRpbCBmcm9tICcuLi91dGlsL1ZEb20ubWpzJztcblxubGV0IERyYWdab25lO1xuXG4vKipcbiAqIEBjbGFzcyBOZW8uZGlhbG9nLkJhc2VcbiAqIEBleHRlbmRzIE5lby5jb250YWluZXIuUGFuZWxcbiAqL1xuY2xhc3MgQmFzZSBleHRlbmRzIFBhbmVsIHtcbiAgICAvKipcbiAgICAgKiBWYWxpZCB2YWx1ZXMgZm9yIGNsb3NlQWN0aW9uXG4gICAgICogQG1lbWJlciB7U3RyaW5nW119IGNsb3NlQWN0aW9ucz1bJ2Nsb3NlJywnaGlkZSddXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBzdGF0aWNcbiAgICAgKi9cbiAgICBzdGF0aWMgY2xvc2VBY3Rpb25zID0gWydjbG9zZScsICdoaWRlJ11cblxuICAgIHN0YXRpYyBjb25maWcgPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IGNsYXNzTmFtZT0nTmVvLmRpYWxvZy5CYXNlJ1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBjbGFzc05hbWU6ICdOZW8uZGlhbG9nLkJhc2UnLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBudHlwZT0nZGlhbG9nJ1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBudHlwZTogJ2RpYWxvZycsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBhbmltYXRlT25EcmFnRW5kPWZhbHNlXG4gICAgICAgICAqL1xuICAgICAgICBhbmltYXRlT25EcmFnRW5kOiBmYWxzZSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ3xudWxsfSBhbmltYXRlVGFyZ2V0SWRfPW51bGxcbiAgICAgICAgICovXG4gICAgICAgIGFuaW1hdGVUYXJnZXRJZF86IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBhdXRvTW91bnQ9dHJ1ZVxuICAgICAgICAgKi9cbiAgICAgICAgYXV0b01vdW50OiB0cnVlLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7Qm9vbGVhbn0gYXV0b1JlbmRlcj10cnVlXG4gICAgICAgICAqL1xuICAgICAgICBhdXRvUmVuZGVyOiB0cnVlLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nW119IGJhc2VDbHM9WyduZW8tZGlhbG9nJywnbmVvLXBhbmVsJywnbmVvLWNvbnRhaW5lciddXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIGJhc2VDbHM6IFsnbmVvLWRpYWxvZycsICduZW8tcGFuZWwnLCAnbmVvLWNvbnRhaW5lciddLFxuICAgICAgICAvKipcbiAgICAgICAgICogRWl0aGVyIGEgZG9tIG5vZGUgaWQsICdkb2N1bWVudC5ib2R5JyBvciBudWxsXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ3xudWxsfSBib3VuZGFyeUNvbnRhaW5lcklkPSdkb2N1bWVudC5ib2R5J1xuICAgICAgICAgKi9cbiAgICAgICAgYm91bmRhcnlDb250YWluZXJJZDogJ2RvY3VtZW50LmJvZHknLFxuICAgICAgICAvKipcbiAgICAgICAgICogRGVmaW5lIHdoYXQgaGFwcGVucyBpbiBjYXNlIHlvdSBjbGljayBvbiB0aGUgY2xvc2UgYnV0dG9uXG4gICAgICAgICAqIGNsb3NlIHdpbGwgZGVzdHJveSB0aGUgaW5zdGFuY2UsIGhpZGUgd2lsbCBrZWVwIGl0IGZvciBsYXRlciByZS11c2UuXG4gICAgICAgICAqIFZhbGlkIHZhbHVlczogY2xvc2UsIGhpZGVcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBjbG9zZUFjdGlvbj0nY2xvc2UnXG4gICAgICAgICAqL1xuICAgICAgICBjbG9zZUFjdGlvbjogJ2Nsb3NlJyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge0Jvb2xlYW59IGRyYWdnYWJsZV89dHJ1ZVxuICAgICAgICAgKi9cbiAgICAgICAgZHJhZ2dhYmxlXzogdHJ1ZSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge0Jvb2xlYW59IGRyYWdMaXN0ZW5lcnNBZGRlZD1mYWxzZVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBkcmFnTGlzdGVuZXJzQWRkZWQ6IGZhbHNlLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7TmVvLmRyYWdnYWJsZS5EcmFnWm9uZXxudWxsfSBkcmFnWm9uZT1udWxsXG4gICAgICAgICAqL1xuICAgICAgICBkcmFnWm9uZTogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge09iamVjdH0gZHJhZ1pvbmVDb25maWc9bnVsbFxuICAgICAgICAgKi9cbiAgICAgICAgZHJhZ1pvbmVDb25maWc6IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3R9IGhlYWRlckNvbmZpZz1udWxsXG4gICAgICAgICAqL1xuICAgICAgICBoZWFkZXJDb25maWc6IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtOZW8udG9vbGJhci5CYXNlfG51bGx9IGhlYWRlclRvb2xiYXI9bnVsbFxuICAgICAgICAgKi9cbiAgICAgICAgaGVhZGVyVG9vbGJhcjogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge0Jvb2xlYW59IGlzRHJhZ2dpbmc9ZmFsc2VcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgaXNEcmFnZ2luZzogZmFsc2UsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IG1heGltaXplQ2xzPSdmYXIgZmEtd2luZG93LW1heGltaXplJ1xuICAgICAgICAgKi9cbiAgICAgICAgbWF4aW1pemVDbHM6ICdmYXIgZmEtd2luZG93LW1heGltaXplJyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge0Jvb2xlYW59IG1heGltaXplZF89ZmFsc2VcbiAgICAgICAgICovXG4gICAgICAgIG1heGltaXplZF86IGZhbHNlLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBtaW5pbWl6ZUNscz0nZmFyIGZhLXdpbmRvdy1taW5pbWl6ZSdcbiAgICAgICAgICovXG4gICAgICAgIG1pbmltaXplQ2xzOiAnZmFyIGZhLXdpbmRvdy1taW5pbWl6ZScsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufSByZXNpemFibGVfPXRydWVcbiAgICAgICAgICovXG4gICAgICAgIHJlc2l6YWJsZV86IHRydWUsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3R9IHJlc2l6YWJsZVBsdWdpbkNvbmZpZz1udWxsXG4gICAgICAgICAqL1xuICAgICAgICByZXNpemFibGVQbHVnaW5Db25maWc6IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd8bnVsbH0gdGl0bGVfPW51bGxcbiAgICAgICAgICovXG4gICAgICAgIHRpdGxlXzogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge09iamVjdH0gX3Zkb21cbiAgICAgICAgICovXG4gICAgICAgIF92ZG9tOlxuICAgICAgICB7Y2xzOiBbJ25lby1kaWFsb2ctd3JhcHBlciddLCBjbjogW1xuICAgICAgICAgICAge2NuOiBbXX1cbiAgICAgICAgXX1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXG4gICAgICovXG4gICAgY29uc3RydWN0KGNvbmZpZykge1xuICAgICAgICBzdXBlci5jb25zdHJ1Y3QoY29uZmlnKTtcblxuICAgICAgICBsZXQgbWUgPSB0aGlzO1xuXG4gICAgICAgIG1lLnZkb20uaWQgPSBtZS5nZXRXcmFwcGVySWQoKTtcblxuICAgICAgICBtZS5jcmVhdGVIZWFkZXIoKTtcblxuICAgICAgICBtZS5hbmltYXRlVGFyZ2V0SWQgJiYgbWUuYW5pbWF0ZVNob3coKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYWZ0ZXIgdGhlIGFuaW1hdGVUYXJnZXRJZCBjb25maWcgZ290IGNoYW5nZWRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xudWxsfSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfG51bGx9IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFmdGVyU2V0QW5pbWF0ZVRhcmdldElkKHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICB0aGlzLmF1dG9Nb3VudCAgPSAhdmFsdWU7XG4gICAgICAgIHRoaXMuYXV0b1JlbmRlciA9ICF2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYWZ0ZXIgdGhlIGFwcE5hbWUgY29uZmlnIGdvdCBjaGFuZ2VkXG4gICAgICogQHBhcmFtIHtTdHJpbmd8bnVsbH0gdmFsdWVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xudWxsfSBvbGRWYWx1ZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBhZnRlclNldEFwcE5hbWUodmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIGxldCBtZSAgICAgICAgPSB0aGlzLFxuICAgICAgICAgICAgcmVzaXphYmxlID0gbWUuZ2V0UGx1Z2luKHtmbGFnOiAncmVzaXphYmxlJ30pO1xuXG4gICAgICAgIGlmIChtZS5kcmFnWm9uZSkge1xuICAgICAgICAgICAgbWUuZHJhZ1pvbmUuYXBwTmFtZSA9IHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlc2l6YWJsZSkge1xuICAgICAgICAgICAgcmVzaXphYmxlLmFwcE5hbWUgPSB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN1cGVyLmFmdGVyU2V0QXBwTmFtZSh2YWx1ZSwgb2xkVmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCBhZnRlciB0aGUgZHJhZ2dhYmxlIGNvbmZpZyBnb3QgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gdmFsdWVcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFmdGVyU2V0RHJhZ2dhYmxlKHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICBsZXQgbWUgICAgICAgICAgID0gdGhpcyxcbiAgICAgICAgICAgIGRvbUxpc3RlbmVycyA9IG1lLmRvbUxpc3RlbmVycyxcbiAgICAgICAgICAgIGNscztcblxuICAgICAgICBpZiAob2xkVmFsdWUgIT09IHVuZGVmaW5lZCAmJiBtZS5oZWFkZXJUb29sYmFyKSB7XG4gICAgICAgICAgICBjbHMgPSBtZS5oZWFkZXJUb29sYmFyLmNscztcbiAgICAgICAgICAgIE5lb0FycmF5W3ZhbHVlID8gJ2FkZCcgOiAncmVtb3ZlJ10oY2xzLCAnbmVvLWRyYWdnYWJsZScpO1xuICAgICAgICAgICAgbWUuaGVhZGVyVG9vbGJhci5jbHMgPSBjbHM7XG4gICAgICAgIH1cblxuICAgICAgICB2YWx1ZSAmJiBpbXBvcnQoJy4uL2RyYWdnYWJsZS9EcmFnWm9uZS5tanMnKS50aGVuKG1vZHVsZSA9PiB7XG4gICAgICAgICAgICBEcmFnWm9uZSA9IG1vZHVsZS5kZWZhdWx0O1xuXG4gICAgICAgICAgICBpZiAoIW1lLmRyYWdMaXN0ZW5lcnNBZGRlZCkge1xuICAgICAgICAgICAgICAgIGRvbUxpc3RlbmVycy5wdXNoKFxuICAgICAgICAgICAgICAgICAgICB7J2RyYWc6ZW5kJyAgOiBtZS5vbkRyYWdFbmQsICAgc2NvcGU6IG1lLCBkZWxlZ2F0ZTogJy5uZW8taGVhZGVyLXRvb2xiYXInfSxcbiAgICAgICAgICAgICAgICAgICAgeydkcmFnOnN0YXJ0JzogbWUub25EcmFnU3RhcnQsIHNjb3BlOiBtZSwgZGVsZWdhdGU6ICcubmVvLWhlYWRlci10b29sYmFyJ31cbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgaWYgKG1lLmRyYWdab25lQ29uZmlnPy5hbHdheXNGaXJlRHJhZ01vdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgZG9tTGlzdGVuZXJzLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICAgICB7J2RyYWc6bW92ZSc6IG1lLm9uRHJhZ01vdmUsIHNjb3BlOiBtZSwgZGVsZWdhdGU6ICcubmVvLWhlYWRlci10b29sYmFyJ31cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBtZS5kb21MaXN0ZW5lcnMgICAgICAgPSBkb21MaXN0ZW5lcnM7XG4gICAgICAgICAgICAgICAgbWUuZHJhZ0xpc3RlbmVyc0FkZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGFmdGVyIHRoZSBtYXhpbWl6ZWQgY29uZmlnIGdvdCBjaGFuZ2VkXG4gICAgICogQHBhcmFtIHtCb29sZWFufSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gb2xkVmFsdWVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYWZ0ZXJTZXRNYXhpbWl6ZWQodmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIGxldCBtZSAgID0gdGhpcyxcbiAgICAgICAgICAgIGNscyAgPSBtZS52ZG9tLmNsczsgLy8gdG9kbzogdXNpbmcgd3JhcHBlckNsc1xuXG4gICAgICAgIE5lb0FycmF5W3ZhbHVlID8gJ2FkZCcgOiAncmVtb3ZlJ10oY2xzLCAnbmVvLW1heGltaXplZCcpO1xuICAgICAgICBtZS51cGRhdGUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYWZ0ZXIgdGhlIG1vdW50ZWQgY29uZmlnIGdvdCBjaGFuZ2VkXG4gICAgICogQHBhcmFtIHtCb29sZWFufSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gb2xkVmFsdWVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYWZ0ZXJTZXRNb3VudGVkKHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICBzdXBlci5hZnRlclNldE1vdW50ZWQodmFsdWUsIG9sZFZhbHVlKTtcblxuICAgICAgICBsZXQgbWUgPSB0aGlzO1xuXG4gICAgICAgIGlmICh2YWx1ZSAmJiBtZS5hbmltYXRlVGFyZ2V0SWQpIHtcbiAgICAgICAgICAgIE5lby5hcHBseURlbHRhcyhtZS5hcHBOYW1lLCB7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiAncmVtb3ZlTm9kZScsXG4gICAgICAgICAgICAgICAgaWQgICAgOiBtZS5nZXRBbmltYXRlVGFyZ2V0SWQoKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCBhZnRlciB0aGUgcmVzaXphYmxlIGNvbmZpZyBnb3QgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gdmFsdWVcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFmdGVyU2V0UmVzaXphYmxlKHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICB2YWx1ZSAmJiBpbXBvcnQoJy4uL3BsdWdpbi9SZXNpemFibGUubWpzJykudGhlbihtb2R1bGUgPT4ge1xuICAgICAgICAgICAgbGV0IG1lICAgICAgPSB0aGlzLFxuICAgICAgICAgICAgICAgIHBsdWdpbnMgPSBtZS5wbHVnaW5zIHx8IFtdO1xuXG4gICAgICAgICAgICBpZiAoIW1lLmdldFBsdWdpbih7ZmxhZzogJ3Jlc2l6YWJsZSd9KSkge1xuICAgICAgICAgICAgICAgIHBsdWdpbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZSAgICAgICA6IG1vZHVsZS5kZWZhdWx0LFxuICAgICAgICAgICAgICAgICAgICBhcHBOYW1lICAgICAgOiBtZS5hcHBOYW1lLFxuICAgICAgICAgICAgICAgICAgICBkZWxlZ2F0aW9uQ2xzOiAnbmVvLWRpYWxvZycsXG4gICAgICAgICAgICAgICAgICAgIGZsYWcgICAgICAgICA6ICdyZXNpemFibGUnLFxuICAgICAgICAgICAgICAgICAgICAuLi5tZS5yZXNpemFibGVQbHVnaW5Db25maWdcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIG1lLnBsdWdpbnMgPSBwbHVnaW5zO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYWZ0ZXIgdGhlIHRpdGxlIGNvbmZpZyBnb3QgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfG51bGx9IHZhbHVlXG4gICAgICogQHBhcmFtIHtTdHJpbmd8bnVsbH0gb2xkVmFsdWVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYWZ0ZXJTZXRUaXRsZSh2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuaGVhZGVyVG9vbGJhcikge1xuICAgICAgICAgICAgdGhpcy5oZWFkZXJUb29sYmFyLnRpdGxlID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIGFzeW5jIGFuaW1hdGVIaWRlKCkge1xuICAgICAgICBsZXQgbWUgICAgICA9IHRoaXMsXG4gICAgICAgICAgICBhcHBOYW1lID0gbWUuYXBwTmFtZSxcbiAgICAgICAgICAgIGlkICAgICAgPSBtZS5nZXRBbmltYXRlVGFyZ2V0SWQoKSxcbiAgICAgICAgICAgIHJlY3RzICAgPSBhd2FpdCBtZS5nZXREb21SZWN0KFttZS5pZCwgbWUuYW5pbWF0ZVRhcmdldElkXSk7XG5cbiAgICAgICAgYXdhaXQgTmVvLmN1cnJlbnRXb3JrZXIucHJvbWlzZU1lc3NhZ2UoJ21haW4nLCB7XG4gICAgICAgICAgICBhY3Rpb24gIDogJ21vdW50RG9tJyxcbiAgICAgICAgICAgIGFwcE5hbWUsXG4gICAgICAgICAgICBodG1sICAgIDogYDxkaXYgaWQ9XCIke2lkfVwiIGNsYXNzPVwibmVvLWFuaW1hdGUtZGlhbG9nIG5lby1oaWRlXCIgc3R5bGU9XCJoZWlnaHQ6JHtyZWN0c1swXS5oZWlnaHR9cHg7bGVmdDoke3JlY3RzWzBdLmxlZnR9cHg7dG9wOiR7cmVjdHNbMF0udG9wfXB4O3dpZHRoOiR7cmVjdHNbMF0ud2lkdGh9cHg7XCI+PC9kaXY+YCxcbiAgICAgICAgICAgIHBhcmVudElkOiAnZG9jdW1lbnQuYm9keSdcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbWUuY2xvc2VPckhpZGUoZmFsc2UpO1xuXG4gICAgICAgIGF3YWl0IE5lby50aW1lb3V0KDMwKTtcblxuICAgICAgICBhd2FpdCBOZW8uY3VycmVudFdvcmtlci5wcm9taXNlTWVzc2FnZSgnbWFpbicsIHtcbiAgICAgICAgICAgIGFjdGlvbjogJ3VwZGF0ZURvbScsXG4gICAgICAgICAgICBhcHBOYW1lLFxuICAgICAgICAgICAgZGVsdGFzOiBbe1xuICAgICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogYCR7cmVjdHNbMV0uaGVpZ2h0fXB4YCxcbiAgICAgICAgICAgICAgICAgICAgbGVmdCAgOiBgJHtyZWN0c1sxXS5sZWZ0ICB9cHhgLFxuICAgICAgICAgICAgICAgICAgICB0b3AgICA6IGAke3JlY3RzWzFdLnRvcCAgIH1weGAsXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoIDogYCR7cmVjdHNbMV0ud2lkdGggfXB4YFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1dXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGF3YWl0IE5lby50aW1lb3V0KDI1MCk7XG5cbiAgICAgICAgYXdhaXQgTmVvLmN1cnJlbnRXb3JrZXIucHJvbWlzZU1lc3NhZ2UoJ21haW4nLCB7XG4gICAgICAgICAgICBhY3Rpb246ICd1cGRhdGVEb20nLFxuICAgICAgICAgICAgYXBwTmFtZSxcbiAgICAgICAgICAgIGRlbHRhczogW3thY3Rpb246ICdyZW1vdmVOb2RlJywgaWR9XVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIGFzeW5jIGFuaW1hdGVTaG93KCkge1xuICAgICAgICBsZXQgbWUgICAgICAgICAgID0gdGhpcyxcbiAgICAgICAgICAgIGFwcE5hbWUgICAgICA9IG1lLmFwcE5hbWUsXG4gICAgICAgICAgICBpZCAgICAgICAgICAgPSBtZS5nZXRBbmltYXRlVGFyZ2V0SWQoKSxcbiAgICAgICAgICAgIHdyYXBwZXJTdHlsZSA9IG1lLndyYXBwZXJTdHlsZSxcbiAgICAgICAgICAgIHJlY3QgICAgICAgICA9IGF3YWl0IG1lLmdldERvbVJlY3QobWUuYW5pbWF0ZVRhcmdldElkKTtcblxuICAgICAgICBhd2FpdCBOZW8uY3VycmVudFdvcmtlci5wcm9taXNlTWVzc2FnZSgnbWFpbicsIHtcbiAgICAgICAgICAgIGFjdGlvbiAgOiAnbW91bnREb20nLFxuICAgICAgICAgICAgYXBwTmFtZSxcbiAgICAgICAgICAgIGh0bWwgICAgOiBgPGRpdiBpZD1cIiR7aWR9XCIgY2xhc3M9XCJuZW8tYW5pbWF0ZS1kaWFsb2dcIiBzdHlsZT1cImhlaWdodDoke3JlY3QuaGVpZ2h0fXB4O2xlZnQ6JHtyZWN0LmxlZnR9cHg7dG9wOiR7cmVjdC50b3B9cHg7d2lkdGg6JHtyZWN0LndpZHRofXB4O1wiPjwvZGl2PmAsXG4gICAgICAgICAgICBwYXJlbnRJZDogJ2RvY3VtZW50LmJvZHknXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGF3YWl0IE5lby50aW1lb3V0KDMwKTtcblxuICAgICAgICBhd2FpdCBOZW8uY3VycmVudFdvcmtlci5wcm9taXNlTWVzc2FnZSgnbWFpbicsIHtcbiAgICAgICAgICAgIGFjdGlvbjogJ3VwZGF0ZURvbScsXG4gICAgICAgICAgICBhcHBOYW1lLFxuICAgICAgICAgICAgZGVsdGFzOiBbe1xuICAgICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCAgIDogd3JhcHBlclN0eWxlPy5oZWlnaHQgICAgfHwgJzUwJScsXG4gICAgICAgICAgICAgICAgICAgIGxlZnQgICAgIDogd3JhcHBlclN0eWxlPy5sZWZ0ICAgICAgfHwgJzUwJScsXG4gICAgICAgICAgICAgICAgICAgIHRvcCAgICAgIDogd3JhcHBlclN0eWxlPy50b3AgICAgICAgfHwgJzUwJScsXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogd3JhcHBlclN0eWxlPy50cmFuc2Zvcm0gfHwgJ3RyYW5zbGF0ZSgtNTAlLCAtNTAlKScsXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoICAgIDogd3JhcHBlclN0eWxlPy53aWR0aCAgICAgfHwgJzUwJSdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XVxuICAgICAgICB9KTtcblxuICAgICAgICBhd2FpdCBOZW8udGltZW91dCgyMDApO1xuXG4gICAgICAgIG1lLnNob3coZmFsc2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCBiZWZvcmUgdGhlIGNsb3NlQWN0aW9uIGNvbmZpZyBnZXRzIGNoYW5nZWRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsdWVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gb2xkVmFsdWVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYmVmb3JlU2V0Q2xvc2VBY3Rpb24odmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJlZm9yZVNldEVudW1WYWx1ZSh2YWx1ZSwgb2xkVmFsdWUsICdjbG9zZUFjdGlvbicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2FuaW1hdGU9ISF0aGlzLmFuaW1hdGVUYXJnZXRJZF1cbiAgICAgKi9cbiAgICBjbG9zZShhbmltYXRlPSEhdGhpcy5hbmltYXRlVGFyZ2V0SWQpIHtcbiAgICAgICAgbGV0IG1lID0gdGhpcztcblxuICAgICAgICBpZiAoYW5pbWF0ZSkge1xuICAgICAgICAgICAgbWUuYW5pbWF0ZUhpZGUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1lLmZpcmUoJ2Nsb3NlJyk7XG4gICAgICAgICAgICBtZS5kZXN0cm95KHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbYW5pbWF0ZT0hIXRoaXMuYW5pbWF0ZVRhcmdldElkXVxuICAgICAqL1xuICAgIGNsb3NlT3JIaWRlKGFuaW1hdGU9ISF0aGlzLmFuaW1hdGVUYXJnZXRJZCkge1xuICAgICAgICB0aGlzW3RoaXMuY2xvc2VBY3Rpb25dKGFuaW1hdGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgY3JlYXRlSGVhZGVyKCkge1xuICAgICAgICBsZXQgbWUgICAgICA9IHRoaXMsXG4gICAgICAgICAgICBjbHMgICAgID0gWyduZW8taGVhZGVyLXRvb2xiYXInLCAnbmVvLXRvb2xiYXInXSxcbiAgICAgICAgICAgIGhlYWRlcnMgPSBtZS5oZWFkZXJzIHx8IFtdO1xuXG4gICAgICAgIG1lLmRyYWdnYWJsZSAmJiBjbHMucHVzaCgnbmVvLWRyYWdnYWJsZScpO1xuXG4gICAgICAgIG1lLmhlYWRlclRvb2xiYXIgPSBOZW8uY3JlYXRlKHtcbiAgICAgICAgICAgIG1vZHVsZSAgIDogVG9vbGJhcixcbiAgICAgICAgICAgIGFwcE5hbWUgIDogbWUuYXBwTmFtZSxcbiAgICAgICAgICAgIGNscyxcbiAgICAgICAgICAgIGRvY2sgICAgIDogJ3RvcCcsXG4gICAgICAgICAgICBmbGV4ICAgICA6ICdub25lJyxcbiAgICAgICAgICAgIGlkICAgICAgIDogbWUuZ2V0SGVhZGVyVG9vbGJhcklkKCksXG4gICAgICAgICAgICBsaXN0ZW5lcnM6IHtoZWFkZXJBY3Rpb246IG1lLmV4ZWN1dGVIZWFkZXJBY3Rpb24sIHNjb3BlOiBtZX0sXG4gICAgICAgICAgICB0aXRsZSAgICA6IG1lLnRpdGxlLFxuICAgICAgICAgICAgLi4ubWUuaGVhZGVyQ29uZmlnXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGhlYWRlcnMudW5zaGlmdChtZS5oZWFkZXJUb29sYmFyKTtcblxuICAgICAgICBtZS5oZWFkZXJzID0gaGVhZGVycztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiB7T2JqZWN0fSBkYXRhXG4gICAgICovXG4gICAgZXhlY3V0ZUhlYWRlckFjdGlvbihkYXRhKSB7XG4gICAgICAgIGxldCBtZSA9IHRoaXMsXG5cbiAgICAgICAgbWFwID0ge1xuICAgICAgICAgICAgY2xvc2UgICA6IG1lLmNsb3NlT3JIaWRlLFxuICAgICAgICAgICAgbWF4aW1pemU6IG1lLm1heGltaXplXG4gICAgICAgIH07XG5cbiAgICAgICAgbWFwW2RhdGEuYWN0aW9uXT8uY2FsbChtZSwgZGF0YSk7XG5cbiAgICAgICAgbWUuZmlyZSgnaGVhZGVyQWN0aW9uJywge1xuICAgICAgICAgICAgZGlhbG9nOiBtZSxcbiAgICAgICAgICAgIC4uLmRhdGFcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBpZCBvZiB0aGUgYW5pbWF0aW9uIG5vZGVcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxuICAgICAqL1xuICAgIGdldEFuaW1hdGVUYXJnZXRJZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaWQgKyAnLWFuaW1hdGUnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGlkIG9mIHRoZSBoZWFkZXIgdG9vbGJhclxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XG4gICAgICovXG4gICAgZ2V0SGVhZGVyVG9vbGJhcklkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pZCArICctaGVhZGVyLXRvb2xiYXInO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IHZkb21cbiAgICAgKi9cbiAgICBnZXRQcm94eVZkb20oKSB7XG4gICAgICAgIGxldCB2ZG9tID0gVkRvbVV0aWwuY2xvbmUodGhpcy52ZG9tKTtcblxuICAgICAgICAvLyB0aGlzIGNhbGwgZXhwZWN0cyBhIGZpeGVkIGRpYWxvZyBzdHJ1Y3R1cmVcbiAgICAgICAgLy8gdG9kbzogYSBwYW5lbCBjb250ZW50IGNvbnRhaW5lciBjb3VsZCBnZXQgYSBmbGFnIHdoaWNoIHdlIGNhbiBxdWVyeSBmb3IgaW5zdGVhZFxuICAgICAgICB2ZG9tLmNuWzBdLmNuWzFdLmNuID0gW107XG5cbiAgICAgICAgcmV0dXJuIHZkb207XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMge09iamVjdH0gVGhlIG5ldyB2ZG9tIHJvb3RcbiAgICAgKi9cbiAgICBnZXRWZG9tUm9vdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmRvbS5jblswXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgbmV3IHZub2RlIHJvb3RcbiAgICAgKi9cbiAgICBnZXRWbm9kZVJvb3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZub2RlLmNoaWxkTm9kZXNbMF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgaWQgb2YgdGhlIGhlYWRlciB0b29sYmFyXG4gICAgICogQHJldHVybnMge1N0cmluZ31cbiAgICAgKi9cbiAgICBnZXRXcmFwcGVySWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlkICsgJy13cmFwcGVyJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFthbmltYXRlPSEhdGhpcy5hbmltYXRlVGFyZ2V0SWRdXG4gICAgICovXG4gICAgaGlkZShhbmltYXRlPSEhdGhpcy5hbmltYXRlVGFyZ2V0SWQpIHtcbiAgICAgICAgbGV0IG1lID0gdGhpcztcblxuICAgICAgICBpZiAoYW5pbWF0ZSkge1xuICAgICAgICAgICAgbWUuYW5pbWF0ZUhpZGUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1lLnVubW91bnQoKTtcbiAgICAgICAgICAgIG1lLmZpcmUoJ2hpZGUnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbZGF0YV1cbiAgICAgKi9cbiAgICBtYXhpbWl6ZShkYXRhKSB7XG4gICAgICAgIGxldCBtZSA9IHRoaXM7XG5cbiAgICAgICAgZGF0YS5jb21wb25lbnQuaWNvbkNscyA9IG1lLm1heGltaXplZCA/IG1lLm1heGltaXplQ2xzIDogbWUubWluaW1pemVDbHM7XG5cbiAgICAgICAgbWUubWF4aW1pemVkID0gIW1lLm1heGltaXplZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIG9uQ29uc3RydWN0ZWQoKSB7XG4gICAgICAgIHN1cGVyLm9uQ29uc3RydWN0ZWQoKTtcblxuICAgICAgICBsZXQgbWUgPSB0aGlzO1xuXG4gICAgICAgIG1lLmhlYWRlclRvb2xiYXIgPSBtZS5kb3duKHtcbiAgICAgICAgICAgIGlkOiBtZS5nZXRIZWFkZXJUb29sYmFySWQoKVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gZGF0YVxuICAgICAqL1xuICAgIG9uRHJhZ0VuZChkYXRhKSB7XG4gICAgICAgIGxldCBtZSA9IHRoaXMsXG4gICAgICAgICAgICBpbml0aWFsVHJhbnNpdGlvblByb3BlcnR5LCB3cmFwcGVyU3R5bGU7XG5cbiAgICAgICAgaWYgKCFtZS5tYXhpbWl6ZWQpIHtcbiAgICAgICAgICAgIG1lLmdldERvbVJlY3QobWUuZHJhZ1pvbmUuZHJhZ1Byb3h5LmlkKS50aGVuKHJlY3QgPT4ge1xuICAgICAgICAgICAgICAgIHdyYXBwZXJTdHlsZSA9IG1lLndyYXBwZXJTdHlsZTtcblxuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24od3JhcHBlclN0eWxlLCB7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCAgIDogYCR7cmVjdC5oZWlnaHR9cHhgLFxuICAgICAgICAgICAgICAgICAgICBsZWZ0ICAgICA6IGAke3JlY3QubGVmdH1weGAsXG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHkgIDogMSxcbiAgICAgICAgICAgICAgICAgICAgdG9wICAgICAgOiBgJHtyZWN0LnRvcH1weGAsXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICB3aWR0aCAgICA6IGAke3JlY3Qud2lkdGh9cHhgXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIW1lLmFuaW1hdGVPbkRyYWdFbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFRyYW5zaXRpb25Qcm9wZXJ0eSA9IHdyYXBwZXJTdHlsZS50cmFuc2l0aW9uUHJvcGVydHkgfHwgbnVsbDtcblxuICAgICAgICAgICAgICAgICAgICB3cmFwcGVyU3R5bGUudHJhbnNpdGlvblByb3BlcnR5ID0gJ25vbmUnO1xuXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgd3JhcHBlclN0eWxlID0gbWUud3JhcHBlclN0eWxlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB3cmFwcGVyU3R5bGUudHJhbnNpdGlvblByb3BlcnR5ID0gaW5pdGlhbFRyYW5zaXRpb25Qcm9wZXJ0eTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgbWUud3JhcHBlclN0eWxlID0gd3JhcHBlclN0eWxlO1xuICAgICAgICAgICAgICAgICAgICB9LCA1MCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbWUud3JhcHBlclN0eWxlID0gd3JhcHBlclN0eWxlO1xuXG4gICAgICAgICAgICAgICAgbWUuZHJhZ1pvbmUuZHJhZ0VuZChkYXRhKTtcblxuICAgICAgICAgICAgICAgIC8vIHdlIG5lZWQgYSByZXNldCwgb3RoZXJ3aXNlIHdlIGRvIG5vdCBnZXQgYSBjaGFuZ2UgZXZlbnQgZm9yIHRoZSBuZXh0IG9uRHJhZ1N0YXJ0KCkgY2FsbFxuICAgICAgICAgICAgICAgIG1lLmRyYWdab25lLmJvdW5kYXJ5Q29udGFpbmVySWQgPSBudWxsO1xuICAgICAgICAgICAgICAgIG1lLmlzRHJhZ2dpbmcgICAgICAgICAgICAgICAgICAgPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2Qgd2lsbCBvbmx5IGdldCB0cmlnZ2VyZWQgaW4gY2FzZSBhbHdheXNGaXJlRHJhZ01vdmUgaXMgaW5jbHVkZWQgaW5zaWRlIHRoZSBkcmFnWm9uZUNvbmZpZ1xuICAgICAqIEBwYXJhbSBkYXRhXG4gICAgICovXG4gICAgb25EcmFnTW92ZShkYXRhKSB7XG4gICAgICAgIHRoaXMuZHJhZ1pvbmUuZHJhZ01vdmUoZGF0YSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIGRhdGFcbiAgICAgKi9cbiAgICBvbkRyYWdTdGFydChkYXRhKSB7XG4gICAgICAgIGxldCBtZSAgICAgICAgICAgPSB0aGlzLFxuICAgICAgICAgICAgd3JhcHBlclN0eWxlID0gbWUud3JhcHBlclN0eWxlIHx8IHt9LFxuICAgICAgICAgICAgcmVzaXphYmxlUGx1Z2luO1xuXG4gICAgICAgIGlmICghbWUubWF4aW1pemVkKSB7XG4gICAgICAgICAgICBtZS5pc0RyYWdnaW5nID0gdHJ1ZTtcblxuICAgICAgICAgICAgcmVzaXphYmxlUGx1Z2luID0gbWUuZ2V0UGx1Z2luKHtmbGFnOiAncmVzaXphYmxlJ30pO1xuXG4gICAgICAgICAgICBpZiAocmVzaXphYmxlUGx1Z2luKSB7XG4gICAgICAgICAgICAgICAgcmVzaXphYmxlUGx1Z2luLnJlbW92ZUFsbE5vZGVzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghbWUuZHJhZ1pvbmUpIHtcbiAgICAgICAgICAgICAgICBtZS5kcmFnWm9uZSA9IE5lby5jcmVhdGUoe1xuICAgICAgICAgICAgICAgICAgICBtb2R1bGUgICAgICAgICAgICAgOiBEcmFnWm9uZSxcbiAgICAgICAgICAgICAgICAgICAgYXBwTmFtZSAgICAgICAgICAgIDogbWUuYXBwTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgYm9keUN1cnNvclN0eWxlICAgIDogJ21vdmUgIWltcG9ydGFudCcsXG4gICAgICAgICAgICAgICAgICAgIGJvdW5kYXJ5Q29udGFpbmVySWQ6IG1lLmJvdW5kYXJ5Q29udGFpbmVySWQsXG4gICAgICAgICAgICAgICAgICAgIGRyYWdFbGVtZW50ICAgICAgICA6IG1lLnZkb20sXG4gICAgICAgICAgICAgICAgICAgIGRyYWdQcm94eUNvbmZpZyAgICA6IHt2ZG9tOiBtZS5nZXRQcm94eVZkb20oKX0sXG4gICAgICAgICAgICAgICAgICAgIG93bmVyICAgICAgICAgICAgICA6IG1lLFxuICAgICAgICAgICAgICAgICAgICB1c2VQcm94eVdyYXBwZXIgICAgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgLi4ubWUuZHJhZ1pvbmVDb25maWdcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIG1lLmZpcmUoJ2RyYWdab25lQ3JlYXRlZCcsIHtcbiAgICAgICAgICAgICAgICAgICAgZHJhZ1pvbmU6IG1lLmRyYWdab25lLFxuICAgICAgICAgICAgICAgICAgICBpZCAgICAgIDogbWUuaWRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbWUuZHJhZ1pvbmUuYm91bmRhcnlDb250YWluZXJJZCA9IG1lLmJvdW5kYXJ5Q29udGFpbmVySWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1lLmRyYWdab25lLmRyYWdTdGFydChkYXRhKTtcblxuICAgICAgICAgICAgd3JhcHBlclN0eWxlLm9wYWNpdHkgPSAwLjc7XG5cbiAgICAgICAgICAgIG1lLndyYXBwZXJTdHlsZSA9IHdyYXBwZXJTdHlsZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2FuaW1hdGU9ISF0aGlzLmFuaW1hdGVUYXJnZXRJZF1cbiAgICAgKi9cbiAgICBzaG93KGFuaW1hdGU9ISF0aGlzLmFuaW1hdGVUYXJnZXRJZCkge1xuICAgICAgICBsZXQgbWUgPSB0aGlzO1xuXG4gICAgICAgIGlmIChhbmltYXRlKSB7XG4gICAgICAgICAgICBtZS5hbmltYXRlU2hvdygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWUucmVuZGVyKHRydWUpO1xuICAgICAgICAgICAgbWUuZmlyZSgnc2hvdycpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5OZW8uYXBwbHlDbGFzc0NvbmZpZyhCYXNlKTtcblxuZXhwb3J0IGRlZmF1bHQgQmFzZTtcbiIsImltcG9ydCBCYXNlIGZyb20gJy4uLy4uL3Rvb2xiYXIvQmFzZS5tanMnO1xuXG4vKipcbiAqIEBjbGFzcyBOZW8uZGlhbG9nLmhlYWRlci5Ub29sYmFyXG4gKiBAZXh0ZW5kcyBOZW8udG9vbGJhci5CYXNlXG4gKi9cbmNsYXNzIFRvb2xiYXIgZXh0ZW5kcyBCYXNlIHtcbiAgICBzdGF0aWMgY29uZmlnID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBjbGFzc05hbWU9J05lby5kaWFsb2cuaGVhZGVyLlRvb2xiYXInXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIGNsYXNzTmFtZTogJ05lby5kaWFsb2cuaGVhZGVyLlRvb2xiYXInLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfG51bGx9IHRpdGxlPW51bGxcbiAgICAgICAgICovXG4gICAgICAgIHRpdGxlXzogbnVsbFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge09iamVjdH0gYWN0aW9uTWFwXG4gICAgICovXG4gICAgYWN0aW9uTWFwID0ge1xuICAgICAgICBjbG9zZSAgIDogKCkgPT4gKHthY3Rpb246ICdjbG9zZScsICAgIGljb25DbHM6ICdmYXIgZmEtd2luZG93LWNsb3NlJ30pLFxuICAgICAgICBtYXhpbWl6ZTogKCkgPT4gKHthY3Rpb246ICdtYXhpbWl6ZScsIGljb25DbHM6ICdmYXIgZmEtd2luZG93LW1heGltaXplJ30pXG4gICAgfVxuICAgIC8qKlxuICAgICAqIFlvdSBjYW4gZGVmaW5lIHRoZSBhY3Rpb24gb3JkZXIgYW5kIGRpcmVjdGx5IGFkZCBjdXN0b20gYWN0aW9ucy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHtcbiAgICAgKiAgICAgYWN0aW9uczogW1xuICAgICAqICAgICAgICAgJ2Nsb3NlJyxcbiAgICAgKiAgICAgICAgICdtYXhpbWl6ZScsXG4gICAgICogICAgICAgICB7YWN0aW9uOiAnaGVscCcsIGljb25DbHM6ICdmYXIgZmEtY2lyY2xlLXF1ZXN0aW9uJ31cbiAgICAgKiAgICAgXVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIFlvdSBjYW4gYWxzbyBleHRlbmQgdGhlIGFjdGlvbk1hcCBpZiBuZWVkZWQuXG4gICAgICogQG1lbWJlciB7T2JqZWN0W118U3RyaW5nW118bnVsbH0gYWN0aW9ucz1bJ21heGltaXplJywnY2xvc2UnXVxuICAgICAqL1xuICAgIGFjdGlvbnMgPSBbJ21heGltaXplJywgJ2Nsb3NlJ11cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCBhZnRlciB0aGUgdGl0bGUgY29uZmlnIGdvdCBjaGFuZ2VkXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFmdGVyU2V0VGl0bGUodmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIHRoaXMuZG93bih7ZmxhZzogJ3RpdGxlLWxhYmVsJ30pPy5zZXQoe1xuICAgICAgICAgICAgcmVtb3ZlRG9tOiAhdmFsdWUsXG4gICAgICAgICAgICB0ZXh0ICAgICA6IHZhbHVlXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBjcmVhdGVJdGVtcygpIHtcbiAgICAgICAgbGV0IG1lICAgICAgPSB0aGlzLFxuICAgICAgICAgICAgaGFuZGxlciA9IG1lLmZpcmVBY3Rpb24uYmluZChtZSksXG4gICAgICAgICAgICBpdGVtcyAgID0gbWUuaXRlbXMgfHwgW107XG5cbiAgICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgICAgICBudHlwZSAgICA6ICdsYWJlbCcsXG4gICAgICAgICAgICBjbHMgICAgICA6IFsnbmVvLXBhbmVsLWhlYWRlci10ZXh0JywgJ25lby1sYWJlbCddLFxuICAgICAgICAgICAgZmxhZyAgICAgOiAndGl0bGUtbGFiZWwnLFxuICAgICAgICAgICAgcmVtb3ZlRG9tOiAhbWUudGl0bGUsXG4gICAgICAgICAgICB0ZXh0ICAgICA6IG1lLnRpdGxlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChtZS5hY3Rpb25zKSB7XG4gICAgICAgICAgICBpdGVtcy5wdXNoKCctPicpO1xuXG4gICAgICAgICAgICBtZS5hY3Rpb25zLmZvckVhY2goYWN0aW9uID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoTmVvLnR5cGVPZihhY3Rpb24pICE9PSAnT2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSBtZS5hY3Rpb25NYXBbYWN0aW9uXSgpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7aGFuZGxlciwgLi4uYWN0aW9ufSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgICBtZS5pdGVtcyA9IGl0ZW1zO1xuXG4gICAgICAgIHN1cGVyLmNyZWF0ZUl0ZW1zKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKi9cbiAgICBmaXJlQWN0aW9uKGRhdGEpIHtcbiAgICAgICAgbGV0IGNvbXBvbmVudCA9IGRhdGEuY29tcG9uZW50O1xuXG4gICAgICAgIHRoaXMuZmlyZSgnaGVhZGVyQWN0aW9uJywge1xuICAgICAgICAgICAgYWN0aW9uOiBjb21wb25lbnQuYWN0aW9uLFxuICAgICAgICAgICAgY29tcG9uZW50LFxuICAgICAgICAgICAgc2NvcGUgOiB0aGlzXG4gICAgICAgIH0pXG4gICAgfVxufVxuXG5OZW8uYXBwbHlDbGFzc0NvbmZpZyhUb29sYmFyKTtcblxuZXhwb3J0IGRlZmF1bHQgVG9vbGJhcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==