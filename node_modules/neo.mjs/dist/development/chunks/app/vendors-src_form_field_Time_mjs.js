"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["vendors-src_form_field_Time_mjs"],{

/***/ "./src/component/Clock.mjs":
/*!*********************************!*\
  !*** ./src/component/Clock.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Base.mjs */ "./src/component/Base.mjs");
/* harmony import */ var _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Array.mjs */ "./src/util/Array.mjs");



/**
 * Simple CSS based clock to get used inside form.field.trigger.Time
 * @class Neo.component.Clock
 * @extends Neo.component.Base
 */
class Clock extends _Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.component.Clock'
         * @protected
         */
        className: 'Neo.component.Clock',
        /**
         * @member {String} ntype='clock'
         * @protected
         */
        ntype: 'clock',
        /**
         * @member {String[]} baseCls=['neo-clock']
         */
        baseCls: ['neo-clock'],
        /**
         * Value in px
         * @member {Number} fontSize_=20
         */
        fontSize_: 20,
        /**
         * Show a small disc on the center of the clock (above the pointers)
         * @member {Boolean} showDisc_=true
         */
        showDisc_: true,
        /**
         * Value in px
         * @member {Number|null} size_=500
         */
        size_: 500,
        /**
         * Format: hh:mm
         * @member {String} time_='10:20'
         */
        time_: '00:00',
        /**
         * @member {Object} _vdom
         */
        _vdom:
        {cn: [
            {cls: ['neo-minutes'], style: {}},
            {cls: ['neo-hours'],   style: {}}
        ]}
    }

    /**
     * Triggered after the fontSize config got changed
     * @param {Number} value
     * @param {Number} oldValue
     * @protected
     */
    afterSetFontSize(value, oldValue) {
        let {style} = this;

        style.fontSize = `${value}px`;
        this.style = style
    }

    /**
     * Triggered after the showDisc config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetShowDisc(value, oldValue) {
        let {cls} = this;

        _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"][value ? 'add' : 'remove'](cls, 'neo-show-disc')
        this.cls = cls
    }

    /**
     * Triggered after the size config got changed
     * @param {Number} value
     * @param {Number} oldValue
     * @protected
     */
    afterSetSize(value, oldValue) {
        let {style} = this;

        if (Neo.isNumber(value)) {
            style.height = `${value}px`;
            style.width  = `${value}px`;
        } else {
            delete style.height;
            delete style.width
        }

        this.style = style
    }

    /**
     * Triggered after the time config got changed
     * @param {String} value
     * @param {String} oldValue
     * @protected
     */
    afterSetTime(value, oldValue) {
        let timeArray    = value.split(':').map(e => Number(e)),
            hoursAngle   = 30 * (timeArray[0] % 12) + .5 * timeArray[1],
            minutesAngle = timeArray[1] * 6,
            vdom         = this.vdom;

        vdom.cn[0].style.transform = `rotate(${minutesAngle}deg)`;
        vdom.cn[1].style.transform = `rotate(${hoursAngle}deg)`;

        this.update()
    }
}

Neo.setupClass(Clock);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Clock);


/***/ }),

/***/ "./src/form/field/Time.mjs":
/*!*********************************!*\
  !*** ./src/form/field/Time.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _collection_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../collection/Base.mjs */ "./src/collection/Base.mjs");
/* harmony import */ var _list_Base_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../list/Base.mjs */ "./src/list/Base.mjs");
/* harmony import */ var _Picker_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Picker.mjs */ "./src/form/field/Picker.mjs");
/* harmony import */ var _trigger_Time_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./trigger/Time.mjs */ "./src/form/field/trigger/Time.mjs");





/**
 *
 * @class Neo.form.field.Time
 * @extends Neo.form.field.Picker
 */
class Time extends _Picker_mjs__WEBPACK_IMPORTED_MODULE_2__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.form.field.Time'
         * @protected
         */
        className: 'Neo.form.field.Time',
        /**
         * @member {String} ntype='timefield'
         * @protected
         */
        ntype: 'timefield',
        /**
         * @member {String[]} baseCls=['neo-timefield','neo-pickerfield','neo-textfield']
         */
        baseCls: ['neo-timefield', 'neo-pickerfield', 'neo-textfield'],
        /**
         * @member {Neo.collection.Base|null} collection=null
         */
        collection: null,
        /**
         * @member {String} inputType='time'
         */
        inputType: 'time',
        /**
         * Additional used keys for the selection model
         * @member {Object} keys
         */
        keys: {
            'Enter' : 'onKeyDownEnter',
            'Escape': 'onKeyDownEscape'
        },
        /**
         * @member {Neo.list.Base} list=null
         * @protected
         */
        list: null,
        /**
         * @member {Object|null} listConfig=null
         */
        listConfig: null,
        /**
         * @member {String} maxValue_='16:00'
         */
        maxValue_: '16:00',
        /**
         * @member {String} minValue_='08:00'
         */
        minValue_: '08:00',
        /**
         * The height of the picker container. Defaults to px.
         * @member {Number|null} pickerHeight=150
         */
        pickerHeight: 150,
        /**
         * Value in seconds, defaults to 5min
         * @member {Number} stepSize_=60*5
         */
        stepSize_: 60 * 5, // 5min
        /**
         * @member {Object|Object[]} triggers=[{module: TimeTrigger}]
         * @protected
         */
        triggers: [{
            module: _trigger_Time_mjs__WEBPACK_IMPORTED_MODULE_3__["default"]
        }],
        /**
         * @member {Intl.DateTimeFormat|null} valueFormat_=null
         * @protected
         */
        valueFormat_: null
    }

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);

        let me           = this,
            clearTrigger = me.getTrigger('clear');

        me.originalConfig.value = me.formatTime(me.value);

        if (clearTrigger) {
            clearTrigger.onFieldChange();
        }

        me.collection = Neo.create({
            module     : _collection_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"],
            items      : me.createCollectionItems(),
            keyProperty: 'value'
        });

        me.list = Neo.create({
            module      : _list_Base_mjs__WEBPACK_IMPORTED_MODULE_1__["default"],
            displayField: 'value',
            store       : me.collection,
            ...me.listConfig
        });

        me.list.keys._keys.push(
            {fn: 'onContainerKeyDownEnter',  key: 'Enter',  scope: me.id},
            {fn: 'onContainerKeyDownEscape', key: 'Escape', scope: me.id}
        );

        me.list.on({
            itemClick   : me.onListItemClick,
            itemNavigate: me.onListItemNavigate,
            scope       : me
        })
    }

    /**
     * Triggered after the maxValue config got changed
     * @param {Text} value
     * @param {Text} oldValue
     * @protected
     */
    afterSetMaxValue(value, oldValue) {
        this.changeInputElKey('max', value);

        if (oldValue !== undefined) {
            this.recreateListItems()
        }
    }

    /**
     * Triggered after the minValue config got changed
     * @param {Text} value
     * @param {Text} oldValue
     * @protected
     */
    afterSetMinValue(value, oldValue) {
        this.changeInputElKey('min', value);

        if (oldValue !== undefined) {
            this.recreateListItems()
        }
    }

    /**
     * Triggered after the pickerIsMounted config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetPickerIsMounted(value, oldValue) {
        if (value) {
            this.selectCurrentListItem()
        }
    }

    /**
     * Triggered after the stepSize config got changed
     * @param {Number} value
     * @param {Number} oldValue
     * @protected
     */
    afterSetStepSize(value, oldValue) {
        this.changeInputElKey('step', value)

        // todo: adjust min & max value => see: form.field.Number
    }

    /**
     * Triggered after the value config got changed
     * @param {String|null} value
     * @param {String|null} oldValue
     * @param {Boolean} [preventListSelect=false]
     * @protected
     */
    afterSetValue(value, oldValue, preventListSelect=false) {
        super.afterSetValue(value, oldValue);

        let me = this;

        me.getTrigger('time').value = value;

        if (me.pickerIsMounted && !preventListSelect) {
            me.selectCurrentListItem(true)
        }
    }

    /**
     * Gets triggered before getting the value of the valueFormat config
     * @param {String} value
     * @param {String} oldValue
     * @protected
     * @returns {String}
     */
    beforeGetValueFormat(value, oldValue) {
        if (!value) {
            this._valueFormat = value = new Intl.DateTimeFormat(Neo.config.locale, {
                hour  : '2-digit',
                minute: '2-digit',
                second: this.stepSize < 60 ? '2-digit' : undefined,
                hour12: false
            })
        }

        return value
    }

    /**
     * Triggered before the maxValue config gets changed
     * @param {String} value
     * @param {String} oldValue
     * @protected
     * @returns {String}
     */
    beforeSetMaxValue(value, oldValue) {
        if (value) {
            if (value.includes('24') || (value.startsWith('12') && value.includes('AM'))) {
                return '23:59:00'
            }
        }

        return this.formatTime(value)
    }

    /**
     * Triggered before the minValue config gets changed
     * @param {String} value
     * @param {String} oldValue
     * @protected
     * @returns {String}
     */
    beforeSetMinValue(value, oldValue) {
        return this.formatTime(value)
    }

    /**
     * Triggered before the value config gets changed
     * @param {String} value
     * @param {String} oldValue
     * @protected
     * @returns {String}
     */
    beforeSetValue(value, oldValue) {
        return this.formatTime(value)
    }

    /**
     * @returns {String[]}
     */
    createCollectionItems() {
        let me          = this,
            currentDate = new Date(),
            end         = me.maxValue.split(':').map(Number),
            endDate     = new Date(),
            start       = me.minValue.split(':').map(Number),
            listItems   = [];

        const dt = new Intl.DateTimeFormat(Neo.config.locale, {
            hour  : '2-digit',
            minute: '2-digit',
            second: me.stepSize < 60 ? '2-digit' : undefined
        });

        currentDate.setHours(...start);
        endDate    .setHours(...end);

        while (currentDate <= endDate) {
            listItems.push({
                value: dt.format(currentDate)
            });

            currentDate.setSeconds(currentDate.getSeconds() + me.stepSize)
        }

        return listItems
    }

    /**
     * @returns {Neo.component.DateSelector}
     */
    createPickerComponent() {
        return this.list
    }

    /**
     * @param {Function} [callback]
     */
    focusInputEl(callback) {
        let me = this;

        Neo.main.DomAccess.focus({
            appName: me.appName,
            id     : me.getInputElId()
        }).then(() => {
            callback?.apply(me)
        })
    }

    /**
     * Transforms AM / PM based times into a 24h format.
     * E.g. "08:00 AM" => "08:00"
     * @param {String|null} value
     * @protected
     * @returns {String|null}
     */
    formatTime(value) {
        if (value) {
            return this.valueFormat.format(new Date(`November 23, 2019  ${value}`))
        }

        return value
    }

    /**
     * @param {Object} data
     * @protected
     */
    onContainerKeyDownEnter(data) {
        this.hidePicker()
    }

    /**
     * @param {Object} data
     * @protected
     */
    onContainerKeyDownEscape(data) {
        this.focusInputEl(this.hidePicker)
    }

    /**
     * @param {Object} data
     * @protected
     */
    onKeyDownEnter(data) {
        let me = this;

        if (me.pickerIsMounted) {
            super.onKeyDownEnter(data);
            me.selectCurrentListItem()
        } else {
            super.onKeyDownEnter(data, me.selectCurrentListItem)
        }
    }

    /**
     * @param {Object} record
     */
    onListItemClick(record) {
        let me       = this,
            oldValue = me.value,
            {value}  = record;

        if (me.value !== value) {
            value = me.formatTime(value);

            me._value = value;
            me.afterSetValue(value, oldValue, true) // prevent the list from getting selected / focused
        }
    }

    /**
     * @param {Object} record
     */
    onListItemNavigate(record) {
        this.onListItemClick(record)
    }

    /**
     *
     */
    recreateListItems() {
        let me = this;

        me.collection.clear();
        me.collection.add(me.createCollectionItems());
        me.list.createItems()
    }

    /**
     * Resets the field to its original value or null depending on the clearToOriginalValue config
     * You can optionally pass a new value, which will adjust the originalConfig.value if needed.
     * @param {String|null} [value]
     */
    reset(value) {
        let me = this;

        if (value && me.clearToOriginalValue) {
            me.originalConfig.value = me.formatTime(value)
        }

        me.value = me.clearToOriginalValue ? me.originalConfig.value : null
    }

    /**
     * @param {Boolean} [preventFocus=false]
     */
    selectCurrentListItem(preventFocus=false) {
        let me     = this,
            {list} = me,
            id     = list.getItemId(me.value);

        list.selectionModel.select(id);

        if (!preventFocus) {
            list.focus(id)
        } else {
            Neo.main.DomAccess.scrollIntoView({
                appName: me.appName,
                id     : id
            })
        }
    }
}

Neo.setupClass(Time);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Time);


/***/ }),

/***/ "./src/form/field/trigger/Time.mjs":
/*!*****************************************!*\
  !*** ./src/form/field/trigger/Time.mjs ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _component_Clock_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../component/Clock.mjs */ "./src/component/Clock.mjs");
/* harmony import */ var _Picker_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Picker.mjs */ "./src/form/field/trigger/Picker.mjs");



/**
 * Used by form.field.Time
 * @class Neo.form.field.trigger.Time
 * @extends Neo.form.field.trigger.Picker
 */
class Time extends _Picker_mjs__WEBPACK_IMPORTED_MODULE_1__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.form.field.trigger.Time'
         * @protected
         */
        className: 'Neo.form.field.trigger.Time',
        /**
         * @member {String} ntype='trigger-time'
         * @protected
         */
        ntype: 'trigger-time',
        /**
         * @member {String[]} baseCls=['neo-timefield-trigger','neo-field-trigger']
         */
        baseCls: ['neo-timefield-trigger', 'neo-field-trigger'],
        /**
         * @member {Neo.component.Clock|null} clock=null
         * @protected
         */
        clock: null,
        /**
         * @member {Object|null} clockConfig=null
         */
        clockConfig: null,
        /**
         * @member {String|null} iconCls=null
         */
        iconCls: null,
        /**
         * Internal flag used by field.getTrigger()
         * @member {String} type='time'
         */
        type: 'time',
        /**
         * Format: hh:mm
         * @member {String|null} value_=null
         */
        value_: null
    }

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);

        let me = this;

        me.clock = Neo.create({
            module  : _component_Clock_mjs__WEBPACK_IMPORTED_MODULE_0__["default"],
            appName : me.appName,
            fontSize: .6,
            parentId: me.id,
            showDisc: false,
            size    : null,
            ...me.clockConfig
        });

        me.vdom.cn = [me.clock.vdom];
        me.update()
    }

    /**
     * Triggered after the appName config got changed
     * @param {String} value
     * @param {String|null} oldValue
     * @protected
     */
    afterSetAppName(value, oldValue) {
        super.afterSetAppName(value, oldValue);

        if (value) {
            this.clock.appName = value
        }
    }

    /**
     * Triggered after the value config got changed
     * @param {String} value
     * @param {String} oldValue
     * @protected
     */
    afterSetValue(value, oldValue) {
        if (value) {
            this.clock.time = value
        }
    }
}

Neo.setupClass(Time);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Time);


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmtzL2FwcC92ZW5kb3JzLXNyY19mb3JtX2ZpZWxkX1RpbWVfbWpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFtQztBQUNPOztBQUUxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGlEQUFTO0FBQzdCO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFVBQVU7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixTQUFTO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGFBQWE7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0EsU0FBUztBQUNULGFBQWEsZ0NBQWdDO0FBQzdDLGFBQWE7QUFDYjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTzs7QUFFcEIsNEJBQTRCLE1BQU07QUFDbEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxTQUFTO0FBQ3hCLGVBQWUsU0FBUztBQUN4QjtBQUNBO0FBQ0E7QUFDQSxhQUFhLEtBQUs7O0FBRWxCLFFBQVEsdURBQVE7QUFDaEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQSxhQUFhLE9BQU87O0FBRXBCO0FBQ0EsOEJBQThCLE1BQU07QUFDcEMsOEJBQThCLE1BQU07QUFDcEMsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FB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QUFDbkI7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBOztBQUVBOztBQUVBLGlFQUFlLElBQUksRUFBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN2YThCO0FBQ2hCOztBQUVsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLG1EQUFNO0FBQ3pCO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFVBQVU7QUFDOUI7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDBCQUEwQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixhQUFhO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixhQUFhO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsYUFBYTtBQUNqQztBQUNBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0Esc0JBQXNCLDREQUFLO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxhQUFhO0FBQzVCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsaUVBQWUsSUFBSSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmVvLm1qcy8uL3NyYy9jb21wb25lbnQvQ2xvY2subWpzIiwid2VicGFjazovL25lby5tanMvLi9zcmMvZm9ybS9maWVsZC9UaW1lLm1qcyIsIndlYnBhY2s6Ly9uZW8ubWpzLy4vc3JjL2Zvcm0vZmllbGQvdHJpZ2dlci9UaW1lLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ29tcG9uZW50IGZyb20gJy4vQmFzZS5tanMnO1xuaW1wb3J0IE5lb0FycmF5ICBmcm9tICcuLi91dGlsL0FycmF5Lm1qcyc7XG5cbi8qKlxuICogU2ltcGxlIENTUyBiYXNlZCBjbG9jayB0byBnZXQgdXNlZCBpbnNpZGUgZm9ybS5maWVsZC50cmlnZ2VyLlRpbWVcbiAqIEBjbGFzcyBOZW8uY29tcG9uZW50LkNsb2NrXG4gKiBAZXh0ZW5kcyBOZW8uY29tcG9uZW50LkJhc2VcbiAqL1xuY2xhc3MgQ2xvY2sgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIHN0YXRpYyBjb25maWcgPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IGNsYXNzTmFtZT0nTmVvLmNvbXBvbmVudC5DbG9jaydcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgY2xhc3NOYW1lOiAnTmVvLmNvbXBvbmVudC5DbG9jaycsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IG50eXBlPSdjbG9jaydcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgbnR5cGU6ICdjbG9jaycsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmdbXX0gYmFzZUNscz1bJ25lby1jbG9jayddXG4gICAgICAgICAqL1xuICAgICAgICBiYXNlQ2xzOiBbJ25lby1jbG9jayddLFxuICAgICAgICAvKipcbiAgICAgICAgICogVmFsdWUgaW4gcHhcbiAgICAgICAgICogQG1lbWJlciB7TnVtYmVyfSBmb250U2l6ZV89MjBcbiAgICAgICAgICovXG4gICAgICAgIGZvbnRTaXplXzogMjAsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTaG93IGEgc21hbGwgZGlzYyBvbiB0aGUgY2VudGVyIG9mIHRoZSBjbG9jayAoYWJvdmUgdGhlIHBvaW50ZXJzKVxuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBzaG93RGlzY189dHJ1ZVxuICAgICAgICAgKi9cbiAgICAgICAgc2hvd0Rpc2NfOiB0cnVlLFxuICAgICAgICAvKipcbiAgICAgICAgICogVmFsdWUgaW4gcHhcbiAgICAgICAgICogQG1lbWJlciB7TnVtYmVyfG51bGx9IHNpemVfPTUwMFxuICAgICAgICAgKi9cbiAgICAgICAgc2l6ZV86IDUwMCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZvcm1hdDogaGg6bW1cbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSB0aW1lXz0nMTA6MjAnXG4gICAgICAgICAqL1xuICAgICAgICB0aW1lXzogJzAwOjAwJyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge09iamVjdH0gX3Zkb21cbiAgICAgICAgICovXG4gICAgICAgIF92ZG9tOlxuICAgICAgICB7Y246IFtcbiAgICAgICAgICAgIHtjbHM6IFsnbmVvLW1pbnV0ZXMnXSwgc3R5bGU6IHt9fSxcbiAgICAgICAgICAgIHtjbHM6IFsnbmVvLWhvdXJzJ10sICAgc3R5bGU6IHt9fVxuICAgICAgICBdfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCBhZnRlciB0aGUgZm9udFNpemUgY29uZmlnIGdvdCBjaGFuZ2VkXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFmdGVyU2V0Rm9udFNpemUodmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIGxldCB7c3R5bGV9ID0gdGhpcztcblxuICAgICAgICBzdHlsZS5mb250U2l6ZSA9IGAke3ZhbHVlfXB4YDtcbiAgICAgICAgdGhpcy5zdHlsZSA9IHN0eWxlXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGFmdGVyIHRoZSBzaG93RGlzYyBjb25maWcgZ290IGNoYW5nZWRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHZhbHVlXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBvbGRWYWx1ZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBhZnRlclNldFNob3dEaXNjKHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICBsZXQge2Nsc30gPSB0aGlzO1xuXG4gICAgICAgIE5lb0FycmF5W3ZhbHVlID8gJ2FkZCcgOiAncmVtb3ZlJ10oY2xzLCAnbmVvLXNob3ctZGlzYycpXG4gICAgICAgIHRoaXMuY2xzID0gY2xzXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGFmdGVyIHRoZSBzaXplIGNvbmZpZyBnb3QgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvbGRWYWx1ZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBhZnRlclNldFNpemUodmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIGxldCB7c3R5bGV9ID0gdGhpcztcblxuICAgICAgICBpZiAoTmVvLmlzTnVtYmVyKHZhbHVlKSkge1xuICAgICAgICAgICAgc3R5bGUuaGVpZ2h0ID0gYCR7dmFsdWV9cHhgO1xuICAgICAgICAgICAgc3R5bGUud2lkdGggID0gYCR7dmFsdWV9cHhgO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVsZXRlIHN0eWxlLmhlaWdodDtcbiAgICAgICAgICAgIGRlbGV0ZSBzdHlsZS53aWR0aFxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zdHlsZSA9IHN0eWxlXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGFmdGVyIHRoZSB0aW1lIGNvbmZpZyBnb3QgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvbGRWYWx1ZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBhZnRlclNldFRpbWUodmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIGxldCB0aW1lQXJyYXkgICAgPSB2YWx1ZS5zcGxpdCgnOicpLm1hcChlID0+IE51bWJlcihlKSksXG4gICAgICAgICAgICBob3Vyc0FuZ2xlICAgPSAzMCAqICh0aW1lQXJyYXlbMF0gJSAxMikgKyAuNSAqIHRpbWVBcnJheVsxXSxcbiAgICAgICAgICAgIG1pbnV0ZXNBbmdsZSA9IHRpbWVBcnJheVsxXSAqIDYsXG4gICAgICAgICAgICB2ZG9tICAgICAgICAgPSB0aGlzLnZkb207XG5cbiAgICAgICAgdmRvbS5jblswXS5zdHlsZS50cmFuc2Zvcm0gPSBgcm90YXRlKCR7bWludXRlc0FuZ2xlfWRlZylgO1xuICAgICAgICB2ZG9tLmNuWzFdLnN0eWxlLnRyYW5zZm9ybSA9IGByb3RhdGUoJHtob3Vyc0FuZ2xlfWRlZylgO1xuXG4gICAgICAgIHRoaXMudXBkYXRlKClcbiAgICB9XG59XG5cbk5lby5zZXR1cENsYXNzKENsb2NrKTtcblxuZXhwb3J0IGRlZmF1bHQgQ2xvY2s7XG4iLCJpbXBvcnQgQ29sbGVjdGlvbiAgZnJvbSAnLi4vLi4vY29sbGVjdGlvbi9CYXNlLm1qcyc7XG5pbXBvcnQgTGlzdCAgICAgICAgZnJvbSAnLi4vLi4vbGlzdC9CYXNlLm1qcyc7XG5pbXBvcnQgUGlja2VyICAgICAgZnJvbSAnLi9QaWNrZXIubWpzJztcbmltcG9ydCBUaW1lVHJpZ2dlciBmcm9tICcuL3RyaWdnZXIvVGltZS5tanMnO1xuXG4vKipcbiAqXG4gKiBAY2xhc3MgTmVvLmZvcm0uZmllbGQuVGltZVxuICogQGV4dGVuZHMgTmVvLmZvcm0uZmllbGQuUGlja2VyXG4gKi9cbmNsYXNzIFRpbWUgZXh0ZW5kcyBQaWNrZXIge1xuICAgIHN0YXRpYyBjb25maWcgPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IGNsYXNzTmFtZT0nTmVvLmZvcm0uZmllbGQuVGltZSdcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgY2xhc3NOYW1lOiAnTmVvLmZvcm0uZmllbGQuVGltZScsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IG50eXBlPSd0aW1lZmllbGQnXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIG50eXBlOiAndGltZWZpZWxkJyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ1tdfSBiYXNlQ2xzPVsnbmVvLXRpbWVmaWVsZCcsJ25lby1waWNrZXJmaWVsZCcsJ25lby10ZXh0ZmllbGQnXVxuICAgICAgICAgKi9cbiAgICAgICAgYmFzZUNsczogWyduZW8tdGltZWZpZWxkJywgJ25lby1waWNrZXJmaWVsZCcsICduZW8tdGV4dGZpZWxkJ10sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtOZW8uY29sbGVjdGlvbi5CYXNlfG51bGx9IGNvbGxlY3Rpb249bnVsbFxuICAgICAgICAgKi9cbiAgICAgICAgY29sbGVjdGlvbjogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gaW5wdXRUeXBlPSd0aW1lJ1xuICAgICAgICAgKi9cbiAgICAgICAgaW5wdXRUeXBlOiAndGltZScsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBZGRpdGlvbmFsIHVzZWQga2V5cyBmb3IgdGhlIHNlbGVjdGlvbiBtb2RlbFxuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3R9IGtleXNcbiAgICAgICAgICovXG4gICAgICAgIGtleXM6IHtcbiAgICAgICAgICAgICdFbnRlcicgOiAnb25LZXlEb3duRW50ZXInLFxuICAgICAgICAgICAgJ0VzY2FwZSc6ICdvbktleURvd25Fc2NhcGUnXG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtOZW8ubGlzdC5CYXNlfSBsaXN0PW51bGxcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgbGlzdDogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge09iamVjdHxudWxsfSBsaXN0Q29uZmlnPW51bGxcbiAgICAgICAgICovXG4gICAgICAgIGxpc3RDb25maWc6IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IG1heFZhbHVlXz0nMTY6MDAnXG4gICAgICAgICAqL1xuICAgICAgICBtYXhWYWx1ZV86ICcxNjowMCcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IG1pblZhbHVlXz0nMDg6MDAnXG4gICAgICAgICAqL1xuICAgICAgICBtaW5WYWx1ZV86ICcwODowMCcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgaGVpZ2h0IG9mIHRoZSBwaWNrZXIgY29udGFpbmVyLiBEZWZhdWx0cyB0byBweC5cbiAgICAgICAgICogQG1lbWJlciB7TnVtYmVyfG51bGx9IHBpY2tlckhlaWdodD0xNTBcbiAgICAgICAgICovXG4gICAgICAgIHBpY2tlckhlaWdodDogMTUwLFxuICAgICAgICAvKipcbiAgICAgICAgICogVmFsdWUgaW4gc2Vjb25kcywgZGVmYXVsdHMgdG8gNW1pblxuICAgICAgICAgKiBAbWVtYmVyIHtOdW1iZXJ9IHN0ZXBTaXplXz02MCo1XG4gICAgICAgICAqL1xuICAgICAgICBzdGVwU2l6ZV86IDYwICogNSwgLy8gNW1pblxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7T2JqZWN0fE9iamVjdFtdfSB0cmlnZ2Vycz1be21vZHVsZTogVGltZVRyaWdnZXJ9XVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICB0cmlnZ2VyczogW3tcbiAgICAgICAgICAgIG1vZHVsZTogVGltZVRyaWdnZXJcbiAgICAgICAgfV0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtJbnRsLkRhdGVUaW1lRm9ybWF0fG51bGx9IHZhbHVlRm9ybWF0Xz1udWxsXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIHZhbHVlRm9ybWF0XzogbnVsbFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3QoY29uZmlnKSB7XG4gICAgICAgIHN1cGVyLmNvbnN0cnVjdChjb25maWcpO1xuXG4gICAgICAgIGxldCBtZSAgICAgICAgICAgPSB0aGlzLFxuICAgICAgICAgICAgY2xlYXJUcmlnZ2VyID0gbWUuZ2V0VHJpZ2dlcignY2xlYXInKTtcblxuICAgICAgICBtZS5vcmlnaW5hbENvbmZpZy52YWx1ZSA9IG1lLmZvcm1hdFRpbWUobWUudmFsdWUpO1xuXG4gICAgICAgIGlmIChjbGVhclRyaWdnZXIpIHtcbiAgICAgICAgICAgIGNsZWFyVHJpZ2dlci5vbkZpZWxkQ2hhbmdlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBtZS5jb2xsZWN0aW9uID0gTmVvLmNyZWF0ZSh7XG4gICAgICAgICAgICBtb2R1bGUgICAgIDogQ29sbGVjdGlvbixcbiAgICAgICAgICAgIGl0ZW1zICAgICAgOiBtZS5jcmVhdGVDb2xsZWN0aW9uSXRlbXMoKSxcbiAgICAgICAgICAgIGtleVByb3BlcnR5OiAndmFsdWUnXG4gICAgICAgIH0pO1xuXG4gICAgICAgIG1lLmxpc3QgPSBOZW8uY3JlYXRlKHtcbiAgICAgICAgICAgIG1vZHVsZSAgICAgIDogTGlzdCxcbiAgICAgICAgICAgIGRpc3BsYXlGaWVsZDogJ3ZhbHVlJyxcbiAgICAgICAgICAgIHN0b3JlICAgICAgIDogbWUuY29sbGVjdGlvbixcbiAgICAgICAgICAgIC4uLm1lLmxpc3RDb25maWdcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbWUubGlzdC5rZXlzLl9rZXlzLnB1c2goXG4gICAgICAgICAgICB7Zm46ICdvbkNvbnRhaW5lcktleURvd25FbnRlcicsICBrZXk6ICdFbnRlcicsICBzY29wZTogbWUuaWR9LFxuICAgICAgICAgICAge2ZuOiAnb25Db250YWluZXJLZXlEb3duRXNjYXBlJywga2V5OiAnRXNjYXBlJywgc2NvcGU6IG1lLmlkfVxuICAgICAgICApO1xuXG4gICAgICAgIG1lLmxpc3Qub24oe1xuICAgICAgICAgICAgaXRlbUNsaWNrICAgOiBtZS5vbkxpc3RJdGVtQ2xpY2ssXG4gICAgICAgICAgICBpdGVtTmF2aWdhdGU6IG1lLm9uTGlzdEl0ZW1OYXZpZ2F0ZSxcbiAgICAgICAgICAgIHNjb3BlICAgICAgIDogbWVcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYWZ0ZXIgdGhlIG1heFZhbHVlIGNvbmZpZyBnb3QgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7VGV4dH0gdmFsdWVcbiAgICAgKiBAcGFyYW0ge1RleHR9IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFmdGVyU2V0TWF4VmFsdWUodmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIHRoaXMuY2hhbmdlSW5wdXRFbEtleSgnbWF4JywgdmFsdWUpO1xuXG4gICAgICAgIGlmIChvbGRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnJlY3JlYXRlTGlzdEl0ZW1zKClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCBhZnRlciB0aGUgbWluVmFsdWUgY29uZmlnIGdvdCBjaGFuZ2VkXG4gICAgICogQHBhcmFtIHtUZXh0fSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7VGV4dH0gb2xkVmFsdWVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYWZ0ZXJTZXRNaW5WYWx1ZSh2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgdGhpcy5jaGFuZ2VJbnB1dEVsS2V5KCdtaW4nLCB2YWx1ZSk7XG5cbiAgICAgICAgaWYgKG9sZFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMucmVjcmVhdGVMaXN0SXRlbXMoKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGFmdGVyIHRoZSBwaWNrZXJJc01vdW50ZWQgY29uZmlnIGdvdCBjaGFuZ2VkXG4gICAgICogQHBhcmFtIHtCb29sZWFufSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gb2xkVmFsdWVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYWZ0ZXJTZXRQaWNrZXJJc01vdW50ZWQodmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RDdXJyZW50TGlzdEl0ZW0oKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGFmdGVyIHRoZSBzdGVwU2l6ZSBjb25maWcgZ290IGNoYW5nZWRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdmFsdWVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb2xkVmFsdWVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYWZ0ZXJTZXRTdGVwU2l6ZSh2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgdGhpcy5jaGFuZ2VJbnB1dEVsS2V5KCdzdGVwJywgdmFsdWUpXG5cbiAgICAgICAgLy8gdG9kbzogYWRqdXN0IG1pbiAmIG1heCB2YWx1ZSA9PiBzZWU6IGZvcm0uZmllbGQuTnVtYmVyXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGFmdGVyIHRoZSB2YWx1ZSBjb25maWcgZ290IGNoYW5nZWRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xudWxsfSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfG51bGx9IG9sZFZhbHVlXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbcHJldmVudExpc3RTZWxlY3Q9ZmFsc2VdXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFmdGVyU2V0VmFsdWUodmFsdWUsIG9sZFZhbHVlLCBwcmV2ZW50TGlzdFNlbGVjdD1mYWxzZSkge1xuICAgICAgICBzdXBlci5hZnRlclNldFZhbHVlKHZhbHVlLCBvbGRWYWx1ZSk7XG5cbiAgICAgICAgbGV0IG1lID0gdGhpcztcblxuICAgICAgICBtZS5nZXRUcmlnZ2VyKCd0aW1lJykudmFsdWUgPSB2YWx1ZTtcblxuICAgICAgICBpZiAobWUucGlja2VySXNNb3VudGVkICYmICFwcmV2ZW50TGlzdFNlbGVjdCkge1xuICAgICAgICAgICAgbWUuc2VsZWN0Q3VycmVudExpc3RJdGVtKHRydWUpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRyaWdnZXJlZCBiZWZvcmUgZ2V0dGluZyB0aGUgdmFsdWUgb2YgdGhlIHZhbHVlRm9ybWF0IGNvbmZpZ1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvbGRWYWx1ZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxuICAgICAqL1xuICAgIGJlZm9yZUdldFZhbHVlRm9ybWF0KHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl92YWx1ZUZvcm1hdCA9IHZhbHVlID0gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQoTmVvLmNvbmZpZy5sb2NhbGUsIHtcbiAgICAgICAgICAgICAgICBob3VyICA6ICcyLWRpZ2l0JyxcbiAgICAgICAgICAgICAgICBtaW51dGU6ICcyLWRpZ2l0JyxcbiAgICAgICAgICAgICAgICBzZWNvbmQ6IHRoaXMuc3RlcFNpemUgPCA2MCA/ICcyLWRpZ2l0JyA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBob3VyMTI6IGZhbHNlXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGJlZm9yZSB0aGUgbWF4VmFsdWUgY29uZmlnIGdldHMgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvbGRWYWx1ZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxuICAgICAqL1xuICAgIGJlZm9yZVNldE1heFZhbHVlKHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5pbmNsdWRlcygnMjQnKSB8fCAodmFsdWUuc3RhcnRzV2l0aCgnMTInKSAmJiB2YWx1ZS5pbmNsdWRlcygnQU0nKSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJzIzOjU5OjAwJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0VGltZSh2YWx1ZSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYmVmb3JlIHRoZSBtaW5WYWx1ZSBjb25maWcgZ2V0cyBjaGFuZ2VkXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XG4gICAgICovXG4gICAgYmVmb3JlU2V0TWluVmFsdWUodmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1hdFRpbWUodmFsdWUpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGJlZm9yZSB0aGUgdmFsdWUgY29uZmlnIGdldHMgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvbGRWYWx1ZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxuICAgICAqL1xuICAgIGJlZm9yZVNldFZhbHVlKHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXRUaW1lKHZhbHVlKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHtTdHJpbmdbXX1cbiAgICAgKi9cbiAgICBjcmVhdGVDb2xsZWN0aW9uSXRlbXMoKSB7XG4gICAgICAgIGxldCBtZSAgICAgICAgICA9IHRoaXMsXG4gICAgICAgICAgICBjdXJyZW50RGF0ZSA9IG5ldyBEYXRlKCksXG4gICAgICAgICAgICBlbmQgICAgICAgICA9IG1lLm1heFZhbHVlLnNwbGl0KCc6JykubWFwKE51bWJlciksXG4gICAgICAgICAgICBlbmREYXRlICAgICA9IG5ldyBEYXRlKCksXG4gICAgICAgICAgICBzdGFydCAgICAgICA9IG1lLm1pblZhbHVlLnNwbGl0KCc6JykubWFwKE51bWJlciksXG4gICAgICAgICAgICBsaXN0SXRlbXMgICA9IFtdO1xuXG4gICAgICAgIGNvbnN0IGR0ID0gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQoTmVvLmNvbmZpZy5sb2NhbGUsIHtcbiAgICAgICAgICAgIGhvdXIgIDogJzItZGlnaXQnLFxuICAgICAgICAgICAgbWludXRlOiAnMi1kaWdpdCcsXG4gICAgICAgICAgICBzZWNvbmQ6IG1lLnN0ZXBTaXplIDwgNjAgPyAnMi1kaWdpdCcgOiB1bmRlZmluZWRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY3VycmVudERhdGUuc2V0SG91cnMoLi4uc3RhcnQpO1xuICAgICAgICBlbmREYXRlICAgIC5zZXRIb3VycyguLi5lbmQpO1xuXG4gICAgICAgIHdoaWxlIChjdXJyZW50RGF0ZSA8PSBlbmREYXRlKSB7XG4gICAgICAgICAgICBsaXN0SXRlbXMucHVzaCh7XG4gICAgICAgICAgICAgICAgdmFsdWU6IGR0LmZvcm1hdChjdXJyZW50RGF0ZSlcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjdXJyZW50RGF0ZS5zZXRTZWNvbmRzKGN1cnJlbnREYXRlLmdldFNlY29uZHMoKSArIG1lLnN0ZXBTaXplKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxpc3RJdGVtc1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHtOZW8uY29tcG9uZW50LkRhdGVTZWxlY3Rvcn1cbiAgICAgKi9cbiAgICBjcmVhdGVQaWNrZXJDb21wb25lbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxpc3RcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdXG4gICAgICovXG4gICAgZm9jdXNJbnB1dEVsKGNhbGxiYWNrKSB7XG4gICAgICAgIGxldCBtZSA9IHRoaXM7XG5cbiAgICAgICAgTmVvLm1haW4uRG9tQWNjZXNzLmZvY3VzKHtcbiAgICAgICAgICAgIGFwcE5hbWU6IG1lLmFwcE5hbWUsXG4gICAgICAgICAgICBpZCAgICAgOiBtZS5nZXRJbnB1dEVsSWQoKVxuICAgICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIGNhbGxiYWNrPy5hcHBseShtZSlcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2Zvcm1zIEFNIC8gUE0gYmFzZWQgdGltZXMgaW50byBhIDI0aCBmb3JtYXQuXG4gICAgICogRS5nLiBcIjA4OjAwIEFNXCIgPT4gXCIwODowMFwiXG4gICAgICogQHBhcmFtIHtTdHJpbmd8bnVsbH0gdmFsdWVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHJldHVybnMge1N0cmluZ3xudWxsfVxuICAgICAqL1xuICAgIGZvcm1hdFRpbWUodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZUZvcm1hdC5mb3JtYXQobmV3IERhdGUoYE5vdmVtYmVyIDIzLCAyMDE5ICAke3ZhbHVlfWApKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgb25Db250YWluZXJLZXlEb3duRW50ZXIoZGF0YSkge1xuICAgICAgICB0aGlzLmhpZGVQaWNrZXIoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIG9uQ29udGFpbmVyS2V5RG93bkVzY2FwZShkYXRhKSB7XG4gICAgICAgIHRoaXMuZm9jdXNJbnB1dEVsKHRoaXMuaGlkZVBpY2tlcilcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBvbktleURvd25FbnRlcihkYXRhKSB7XG4gICAgICAgIGxldCBtZSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKG1lLnBpY2tlcklzTW91bnRlZCkge1xuICAgICAgICAgICAgc3VwZXIub25LZXlEb3duRW50ZXIoZGF0YSk7XG4gICAgICAgICAgICBtZS5zZWxlY3RDdXJyZW50TGlzdEl0ZW0oKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3VwZXIub25LZXlEb3duRW50ZXIoZGF0YSwgbWUuc2VsZWN0Q3VycmVudExpc3RJdGVtKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHJlY29yZFxuICAgICAqL1xuICAgIG9uTGlzdEl0ZW1DbGljayhyZWNvcmQpIHtcbiAgICAgICAgbGV0IG1lICAgICAgID0gdGhpcyxcbiAgICAgICAgICAgIG9sZFZhbHVlID0gbWUudmFsdWUsXG4gICAgICAgICAgICB7dmFsdWV9ICA9IHJlY29yZDtcblxuICAgICAgICBpZiAobWUudmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IG1lLmZvcm1hdFRpbWUodmFsdWUpO1xuXG4gICAgICAgICAgICBtZS5fdmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIG1lLmFmdGVyU2V0VmFsdWUodmFsdWUsIG9sZFZhbHVlLCB0cnVlKSAvLyBwcmV2ZW50IHRoZSBsaXN0IGZyb20gZ2V0dGluZyBzZWxlY3RlZCAvIGZvY3VzZWRcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZWNvcmRcbiAgICAgKi9cbiAgICBvbkxpc3RJdGVtTmF2aWdhdGUocmVjb3JkKSB7XG4gICAgICAgIHRoaXMub25MaXN0SXRlbUNsaWNrKHJlY29yZClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIHJlY3JlYXRlTGlzdEl0ZW1zKCkge1xuICAgICAgICBsZXQgbWUgPSB0aGlzO1xuXG4gICAgICAgIG1lLmNvbGxlY3Rpb24uY2xlYXIoKTtcbiAgICAgICAgbWUuY29sbGVjdGlvbi5hZGQobWUuY3JlYXRlQ29sbGVjdGlvbkl0ZW1zKCkpO1xuICAgICAgICBtZS5saXN0LmNyZWF0ZUl0ZW1zKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXNldHMgdGhlIGZpZWxkIHRvIGl0cyBvcmlnaW5hbCB2YWx1ZSBvciBudWxsIGRlcGVuZGluZyBvbiB0aGUgY2xlYXJUb09yaWdpbmFsVmFsdWUgY29uZmlnXG4gICAgICogWW91IGNhbiBvcHRpb25hbGx5IHBhc3MgYSBuZXcgdmFsdWUsIHdoaWNoIHdpbGwgYWRqdXN0IHRoZSBvcmlnaW5hbENvbmZpZy52YWx1ZSBpZiBuZWVkZWQuXG4gICAgICogQHBhcmFtIHtTdHJpbmd8bnVsbH0gW3ZhbHVlXVxuICAgICAqL1xuICAgIHJlc2V0KHZhbHVlKSB7XG4gICAgICAgIGxldCBtZSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHZhbHVlICYmIG1lLmNsZWFyVG9PcmlnaW5hbFZhbHVlKSB7XG4gICAgICAgICAgICBtZS5vcmlnaW5hbENvbmZpZy52YWx1ZSA9IG1lLmZvcm1hdFRpbWUodmFsdWUpXG4gICAgICAgIH1cblxuICAgICAgICBtZS52YWx1ZSA9IG1lLmNsZWFyVG9PcmlnaW5hbFZhbHVlID8gbWUub3JpZ2luYWxDb25maWcudmFsdWUgOiBudWxsXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbcHJldmVudEZvY3VzPWZhbHNlXVxuICAgICAqL1xuICAgIHNlbGVjdEN1cnJlbnRMaXN0SXRlbShwcmV2ZW50Rm9jdXM9ZmFsc2UpIHtcbiAgICAgICAgbGV0IG1lICAgICA9IHRoaXMsXG4gICAgICAgICAgICB7bGlzdH0gPSBtZSxcbiAgICAgICAgICAgIGlkICAgICA9IGxpc3QuZ2V0SXRlbUlkKG1lLnZhbHVlKTtcblxuICAgICAgICBsaXN0LnNlbGVjdGlvbk1vZGVsLnNlbGVjdChpZCk7XG5cbiAgICAgICAgaWYgKCFwcmV2ZW50Rm9jdXMpIHtcbiAgICAgICAgICAgIGxpc3QuZm9jdXMoaWQpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBOZW8ubWFpbi5Eb21BY2Nlc3Muc2Nyb2xsSW50b1ZpZXcoe1xuICAgICAgICAgICAgICAgIGFwcE5hbWU6IG1lLmFwcE5hbWUsXG4gICAgICAgICAgICAgICAgaWQgICAgIDogaWRcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG59XG5cbk5lby5zZXR1cENsYXNzKFRpbWUpO1xuXG5leHBvcnQgZGVmYXVsdCBUaW1lO1xuIiwiaW1wb3J0IENsb2NrICBmcm9tICcuLi8uLi8uLi9jb21wb25lbnQvQ2xvY2subWpzJztcbmltcG9ydCBQaWNrZXIgZnJvbSAnLi9QaWNrZXIubWpzJztcblxuLyoqXG4gKiBVc2VkIGJ5IGZvcm0uZmllbGQuVGltZVxuICogQGNsYXNzIE5lby5mb3JtLmZpZWxkLnRyaWdnZXIuVGltZVxuICogQGV4dGVuZHMgTmVvLmZvcm0uZmllbGQudHJpZ2dlci5QaWNrZXJcbiAqL1xuY2xhc3MgVGltZSBleHRlbmRzIFBpY2tlciB7XG4gICAgc3RhdGljIGNvbmZpZyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gY2xhc3NOYW1lPSdOZW8uZm9ybS5maWVsZC50cmlnZ2VyLlRpbWUnXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIGNsYXNzTmFtZTogJ05lby5mb3JtLmZpZWxkLnRyaWdnZXIuVGltZScsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IG50eXBlPSd0cmlnZ2VyLXRpbWUnXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIG50eXBlOiAndHJpZ2dlci10aW1lJyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ1tdfSBiYXNlQ2xzPVsnbmVvLXRpbWVmaWVsZC10cmlnZ2VyJywnbmVvLWZpZWxkLXRyaWdnZXInXVxuICAgICAgICAgKi9cbiAgICAgICAgYmFzZUNsczogWyduZW8tdGltZWZpZWxkLXRyaWdnZXInLCAnbmVvLWZpZWxkLXRyaWdnZXInXSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge05lby5jb21wb25lbnQuQ2xvY2t8bnVsbH0gY2xvY2s9bnVsbFxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBjbG9jazogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge09iamVjdHxudWxsfSBjbG9ja0NvbmZpZz1udWxsXG4gICAgICAgICAqL1xuICAgICAgICBjbG9ja0NvbmZpZzogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ3xudWxsfSBpY29uQ2xzPW51bGxcbiAgICAgICAgICovXG4gICAgICAgIGljb25DbHM6IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbnRlcm5hbCBmbGFnIHVzZWQgYnkgZmllbGQuZ2V0VHJpZ2dlcigpXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gdHlwZT0ndGltZSdcbiAgICAgICAgICovXG4gICAgICAgIHR5cGU6ICd0aW1lJyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZvcm1hdDogaGg6bW1cbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfG51bGx9IHZhbHVlXz1udWxsXG4gICAgICAgICAqL1xuICAgICAgICB2YWx1ZV86IG51bGxcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXG4gICAgICovXG4gICAgY29uc3RydWN0KGNvbmZpZykge1xuICAgICAgICBzdXBlci5jb25zdHJ1Y3QoY29uZmlnKTtcblxuICAgICAgICBsZXQgbWUgPSB0aGlzO1xuXG4gICAgICAgIG1lLmNsb2NrID0gTmVvLmNyZWF0ZSh7XG4gICAgICAgICAgICBtb2R1bGUgIDogQ2xvY2ssXG4gICAgICAgICAgICBhcHBOYW1lIDogbWUuYXBwTmFtZSxcbiAgICAgICAgICAgIGZvbnRTaXplOiAuNixcbiAgICAgICAgICAgIHBhcmVudElkOiBtZS5pZCxcbiAgICAgICAgICAgIHNob3dEaXNjOiBmYWxzZSxcbiAgICAgICAgICAgIHNpemUgICAgOiBudWxsLFxuICAgICAgICAgICAgLi4ubWUuY2xvY2tDb25maWdcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbWUudmRvbS5jbiA9IFttZS5jbG9jay52ZG9tXTtcbiAgICAgICAgbWUudXBkYXRlKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYWZ0ZXIgdGhlIGFwcE5hbWUgY29uZmlnIGdvdCBjaGFuZ2VkXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlXG4gICAgICogQHBhcmFtIHtTdHJpbmd8bnVsbH0gb2xkVmFsdWVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYWZ0ZXJTZXRBcHBOYW1lKHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICBzdXBlci5hZnRlclNldEFwcE5hbWUodmFsdWUsIG9sZFZhbHVlKTtcblxuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuY2xvY2suYXBwTmFtZSA9IHZhbHVlXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYWZ0ZXIgdGhlIHZhbHVlIGNvbmZpZyBnb3QgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvbGRWYWx1ZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBhZnRlclNldFZhbHVlKHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuY2xvY2sudGltZSA9IHZhbHVlXG4gICAgICAgIH1cbiAgICB9XG59XG5cbk5lby5zZXR1cENsYXNzKFRpbWUpO1xuXG5leHBvcnQgZGVmYXVsdCBUaW1lO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9