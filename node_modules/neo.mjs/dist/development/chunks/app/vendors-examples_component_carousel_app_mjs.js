"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["vendors-examples_component_carousel_app_mjs"],{

/***/ "./examples/component/carousel/MainContainer.mjs":
/*!*******************************************************!*\
  !*** ./examples/component/carousel/MainContainer.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _src_form_field_CheckBox_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../src/form/field/CheckBox.mjs */ "./src/form/field/CheckBox.mjs");
/* harmony import */ var _src_component_Carousel_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../src/component/Carousel.mjs */ "./src/component/Carousel.mjs");
/* harmony import */ var _ConfigurationViewport_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../ConfigurationViewport.mjs */ "./examples/ConfigurationViewport.mjs");
/* harmony import */ var _src_form_field_Range_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../src/form/field/Range.mjs */ "./src/form/field/Range.mjs");





/**
 * @class Neo.examples.component.carousel.MainContainer
 * @extends Neo.examples.ConfigurationViewport
 */
class MainContainer extends _ConfigurationViewport_mjs__WEBPACK_IMPORTED_MODULE_2__["default"] {
    static config = {
        className: 'Neo.examples.component.carousel.MainContainer',
        layout   : {ntype: 'hbox', align: 'stretch'}
    }

    createConfigurationComponents() {
        let me = this;

        return [{
            module   : _src_form_field_CheckBox_mjs__WEBPACK_IMPORTED_MODULE_0__["default"],
            checked  : me.exampleComponent.autoRun,
            labelText: 'autoRun',
            listeners: {change: me.onConfigChange.bind(me, 'autoRun')}
        }, {
            module    :  _src_form_field_Range_mjs__WEBPACK_IMPORTED_MODULE_3__["default"],
            labelText : 'height',
            listeners : {change: me.onConfigChange.bind(me, 'height')},
            maxValue  : 800,
            minValue  : 200,
            stepSize  : 1,
            value     : me.exampleComponent.height
        }, {
            module    :  _src_form_field_Range_mjs__WEBPACK_IMPORTED_MODULE_3__["default"],
            labelText : 'width',
            listeners : {change: me.onConfigChange.bind(me, 'width')},
            maxValue  : 800,
            minValue  : 200,
            stepSize  : 1,
            value     : me.exampleComponent.width
        }];
    }

    createExampleComponent() {
        return Neo.create(_src_component_Carousel_mjs__WEBPACK_IMPORTED_MODULE_1__["default"], {
            height: 500,
            width : 500,
            // will automatically change to the next extry every 5500 ms
            // if not set or 0, this will show arrows to navigate
            // cannot be changed after created
            autoRun: 5500,
            store: {
                data: [{
                    "quote": "We love the German inspired dishes on the menu",
                    "publisher": "Trip Advisor",
                    "date": "Dezember 2020"
                },{
                    "quote": "Everything about this place was excellent, from start to finish",
                    "publisher": "Trip Advisor",
                    "date": "Dezember 2021"
                },{
                    "quote": "We had three courses and everything was great",
                    "publisher": "Trip Advisor",
                    "date": "September 2020"
                },{
                    "quote": "Excellent Food, Wine and Service",
                    "publisher": "Best Food",
                    "date": "August 2020"
                }]
            },
            // custom item cls
            itemCls: 'example-carousel-item',
            // each item will be created like the itemTpl structure
            itemTpl: data => [{
                cls: 'example-quote',
                html: data.quote
            }, {
                cls: 'example-details',
                html: `${data.publisher} - ${data.date}`
            }]
        });
    }
}

Neo.applyClassConfig(MainContainer);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MainContainer);


/***/ }),

/***/ "./examples/component/carousel/app.mjs":
/*!*********************************************!*\
  !*** ./examples/component/carousel/app.mjs ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   onStart: () => (/* binding */ onStart)
/* harmony export */ });
/* harmony import */ var _MainContainer_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MainContainer.mjs */ "./examples/component/carousel/MainContainer.mjs");


const onStart = () => Neo.app({
    mainView: _MainContainer_mjs__WEBPACK_IMPORTED_MODULE_0__["default"],
    name    : 'Neo.examples.component.carousel'
});


/***/ }),

/***/ "./src/component/Carousel.mjs":
/*!************************************!*\
  !*** ./src/component/Carousel.mjs ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _util_ClassSystem_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/ClassSystem.mjs */ "./src/util/ClassSystem.mjs");
/* harmony import */ var _Base_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Base.mjs */ "./src/component/Base.mjs");
/* harmony import */ var _data_Store_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../data/Store.mjs */ "./src/data/Store.mjs");
/* harmony import */ var _manager_Task_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../manager/Task.mjs */ "./src/manager/Task.mjs");





/**
 * @class Neo.component.Carousel
 * @extends Neo.component.Base
 */
class Carousel extends _Base_mjs__WEBPACK_IMPORTED_MODULE_1__["default"] {
    /**
     * Defines the currently visible item in the middle
     * This gets updated everytime a button is clicked to reflect the current order
     * @member {Number} itemIndex=1
     */
    itemIndex = 1
    /**
     * Defines the order of the item in the carousel
     * This gets updated everytime a button is clicked to reflect the current order
     * @member {String[]} positionArray
     */
    positionArray = ['neo-carousel--translate-x-full', 'neo-carousel-translate-x-0', 'neo-carousel-translate-x-full']
    /**
     * keeps track of the data for the onClickEvent
     * @type {null}
     */
    itemData = {}

    static config = {
        /**
         * @member {String} className='Neo.component.Carousel'
         * @protected
         */
        className: 'Neo.component.Carousel',
        /**
         * @member {String} ntype='carousel'
         * @protected
         */
        ntype: 'carousel',
        /**
         * autoRun allows to run through the all items timebased
         * 0 means it is turned off. Other values are the timer in ms,
         * which will hide the arrows.
         *
         * @member {int} autoRun=0
         */
        autoRun_: 0,
        /**
         * @member {String[]} baseCls=['neo-carousel']
         */
        baseCls: ['neo-carousel'],
        /**
         * Custom cls added to each item
         * This is only a single string
         *
         * @member {String|null} itemCls=null
         */
        itemCls: null,
        /**
         * Template for each item
         * The format is the same as for literals,
         * but it is a string instead of surrounding "`"
         * @member {String|null} tpl=null
         * @example
         *      record = {foo: ... , bar: ...}
         *      data => [{
         *          cls: 'css-foo-class',
         *          html: data.foo
         *      },
         *      {
         *          html: data.baa
         *      }]"
         */
        itemTpl_: null,
        /**
         * Store to be used.
         *
         * @member {Neo.data.Store|null} store=null
         */
        store_: null,
        /**
         * @member {Object} _vdom
         */
        _vdom:
        {cn: [
            {cls: ['neo-carousel'], cn: [
                {cls: ['neo-carousel-btn-bar'], cn: [
                    {tag: 'a', 'data-carouselaction': 'back',    cls: ['neo-carousel-btn', 'fa', 'fa-chevron-left']},
                    {tag: 'a', 'data-carouselaction': 'forward', cls: ['neo-carousel-btn', 'fa', 'fa-chevron-right']}
                ]},
                {cls: ['neo-carousel-inner'], cn: []}
            ]}
        ]}
    }

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);

        let me = this;

        me.addDomListeners([
            {click: me.onCarouselBtnClick, delegate: '.neo-carousel-btn',  scope: me},
            {click: me.onClick,            delegate: '.neo-carousel-item', scope: me}
        ]);
    }

    /**
     * Triggered after autoRun config got changed
     * @param {Boolean|Number} value
     * @param {Boolean|Number} oldValue
     * @protected
     */
    afterSetAutoRun(value, oldValue) {
        if (value) {
            let me = this;

            _manager_Task_mjs__WEBPACK_IMPORTED_MODULE_3__["default"].start({
                id      : me.id,
                interval: value,
                run     : function () {
                    me.onCarouselBtnClick('forward');
                }
            });

            me.vdom.cn[0].cn[0].removeDom = true;
            me.update();
        }
    }

    /**
     * Triggered after the store config got changed
     * @param {Neo.data.Store|Object|null} value
     * @param {Neo.data.Store|null} oldValue
     * @protected
     */
    afterSetStore(value, oldValue) {
        let me = this;

        value?.on({
            load : 'onStoreLoad',
            scope: me
        });

        value?.getCount() > 0 && me.onStoreLoad();
    }

    /**
     * Triggered before the store config gets changed.
     * @param {Neo.data.Store|Object|null} value
     * @param {Neo.data.Store|null} oldValue
     * @returns {Neo.data.Store}
     * @protected
     */
    beforeSetStore(value, oldValue) {
        oldValue?.destroy();
        return _util_ClassSystem_mjs__WEBPACK_IMPORTED_MODULE_0__["default"].beforeSetInstance(value, _data_Store_mjs__WEBPACK_IMPORTED_MODULE_2__["default"]);
    }

    /**
     * Create the initial three items and add them to the vdom
     */
    createBaseItems() {
        let me       = this,
            itemRoot = me.#getItemRoot(),
            items    = [],
            i        = 0;

        for (i; i < 3; i++) {
            items.push(me.createItem(i, i));
        }

        itemRoot.cn = items;
        me.update();
    }

    /**
     * Everytime we rotate we create items
     * @param {Number} recordIndex   - index inside store
     * @param {Number} positionIndex - based on positionArray
     * @returns {Object}
     */
    createItem(recordIndex, positionIndex) {
        let me            = this,
            itemCls       = me.itemCls,
            positionArray = me.positionArray,
            store         = me.store,
            data          = store.getAt(recordIndex),
            cn            = me.itemTpl(data),

        newItem = {
            cls: [positionArray[positionIndex], 'neo-carousel-item'],
            cn,
            recordIndex
        };

        itemCls && newItem.cls.push(itemCls);

        me.itemData[positionIndex] = data;

        return newItem;
    }

    /**
     * Rotate the three items and fill in a new record
     * @param {Object} event
     * @param {Object} event.target - clicked button
     */
    onCarouselBtnClick(event) {
        let me            = this,
            action        = (typeof event === 'string') ? event : event.target.data.carouselaction,
            store         = me.store,
            countItems    = store.getCount(),
            index         = me.itemIndex,
            positionArray = me.positionArray,
            root          = me.#getItemRoot(),
            newRecordIndex, positionCls, recordIndex, vdomCls;

        if (action === 'forward') {
            vdomCls        = 'neo-carousel-translate-x-full';
            index          = index + 2
            newRecordIndex = index % countItems;

            me.itemIndex = newRecordIndex - 1;
            positionArray = me.#arrayRotate(positionArray, -1);
        } else {
            vdomCls        = 'neo-carousel--translate-x-full';
            index          = index - 2;
            newRecordIndex = index < 0 ? (countItems + index) : index;

            me.itemIndex = newRecordIndex + 1;
            positionArray = me.#arrayRotate(positionArray, 1);
        }

        me.positionArray = positionArray;

        root.cn = root.cn.map(function(cn, mappingIndex) {
            positionCls = positionArray[mappingIndex];
            recordIndex = cn.recordIndex;

            cn.cls.shift();
            cn.cls.unshift(positionCls);

            // Update new Record
            if (positionCls === vdomCls) {
                recordIndex = newRecordIndex;
                cn          = me.createItem(recordIndex, mappingIndex);
            }

            return cn;
        })

        me.update();
    }

    /**
     * Check if the user clicked an item or the container
     * @param data
     */
    onClick(data) {
        let me = this,
            item;

        if (data.path[0].id === me.id) {
            me.onContainerClick(data);
        } else {
            for (item of data.path) {
                if (item.cls.includes(me.itemCls)) {
                    me.onItemClick(item, data);
                    break;
                }
            }
        }
    }

    /**
     * If the user wants to listen for the container click
     * @param {Object} data
     */
    onContainerClick(data){}

    /**
     * @param {Object} node
     * @param {Object} data
     */
    onItemClick(node, data) {
        let me = this;

        /**
         * The itemClick event fires when a click occurs on a list item
         * @event itemClick
         * @param {String} id the record matching the list item
         * @returns {Object}
         */
        me.fire('itemClick', me.itemData[me.itemIndex]);
    }

    /**
     * As soon as the store is loaded we want to
     * - create the three items
     * - fill the first three records
     */
    onStoreLoad() {
        this.createBaseItems();
    }

    /**
     * HELPERS
     */
    #getItemRoot() {
        return this.vdom.cn[0].cn[1];
    }

    #arrayRotate(arr, n) {
        return n ? [...arr.slice(n, arr.length), ...arr.slice(0, n)] : arr;
    }
}

Neo.applyClassConfig(Carousel);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Carousel);


/***/ }),

/***/ "./src/form/field/Range.mjs":
/*!**********************************!*\
  !*** ./src/form/field/Range.mjs ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Number_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Number.mjs */ "./src/form/field/Number.mjs");


/**
 * @class Neo.form.field.Range
 * @extends Neo.form.field.Number
 */
class Range extends _Number_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.form.field.Range'
         * @protected
         */
        className: 'Neo.form.field.Range',
        /**
         * @member {String} ntype='rangefield'
         * @protected
         */
        ntype: 'rangefield',
        /**
         * @member {String[]} baseCls=['neo-rangefield','neo-textfield']
         */
        baseCls: ['neo-rangefield', 'neo-textfield'],
        /**
         * True shows a clear trigger in case the field has a non empty value.
         * @member {Boolean} clearable=false
         */
        clearable: false,
        /**
         * Value for the inputType_ textfield config
         * @member {String} inputType='range'
         */
        inputType: 'range',
        /**
         * @member {Array} tickmarks_=[]
         */
        tickmarks_: [],
        /**
         * @member {Boolean} useInputEvent=false
         */
        useInputEvent : false,
        /**
         * Disables the field.Number buttons
         * @member {Boolean} useInputEvent=false
         */
        useSpinButtons: false
    }

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);

        let me      = this,
            inputEl = me.vdom.cn[2];

        if (me.useInputEvent) {
            me.addDomListeners({
                input: {
                    fn    : me.onInputValueChange,
                    id    : me.vdom.cn[2].id,
                    scope : me
                }
            });
        }

        inputEl.cls = ['neo-rangefield-input']; // replace neo-textfield-input
    }

    /**
     * Triggered after the tickmarks config got changed
     * @param {Array} value
     * @param {Array} oldValue
     * @protected
     */
    afterSetTickmarks(value, oldValue) {
        // todo
    }
}

Neo.applyClassConfig(Range);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Range);


/***/ }),

/***/ "./src/manager/Task.mjs":
/*!******************************!*\
  !*** ./src/manager/Task.mjs ***!
  \******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Base.mjs */ "./src/manager/Base.mjs");


/**
 * @class Neo.manager.Task
 * @extends Neo.manager.Base
 * @singleton
 *
 * @example
 *     import TaskManager from '../../../node_modules/neo.mjs/src/manager/Task.mjs';
 *
 *     task = {
 *         args: [clockDom],           // arguments passed into the run fn
 *         addCountToArgs: true,       // adds the count to the arguments
 *         fireOnStart: false          // run before the first interval
 *         id: 'clockcounter',         // id for the task or autocreated
 *         interval: 1000,             // in ms
 *         onError: function(){},      // runs in case an error occurred
 *         repeat: 10,                 // stopAfterTenTimes
 *         run: function(clock) {      // function to run
 *             clock.setHtml(new Date());
 *         },
 *         scope: this                 // scope of the function
 *     };
 *
 *     TaskManager.start(task); // or taskId if exists
 *     TaskManager.stop('clockcounter', remove); // false to not remove it from the TaskManager
 *     TaskManager.stopAll(remove);
 *
 *     TaskManager.createTask(task);
 *     TaskManager.remove(taskId);
 *
 *     TaskManager.run(taskId);
 *     TaskManager.get(taskId).repeat = 20;
 */
class Task extends _Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.manager.Task'
         * @protected
         */
        className: 'Neo.manager.Task',
        /**
         * @member {Boolean} singleton=true
         * @protected
         */
        singleton: true
    }

    /**
     * Adds a task to collection.
     * Typically used via `start(task)`
     * @param {Object} task
     * @returns {Object}
     */
    createTask(task) {
        let me = this;

        if (!task.id) {
            task.id = Neo.core.IdGenerator.getId('task');
        }

        task.scope          && task.run.bind(task.scope);
        task.addCountToArgs && task.args.push(0);

        task = {
            args      : [],
            isRunning : false,
            onError   : Neo.emptyFn,
            runCount  : 0,
            runner    : null,
            runOnStart: false,
            ...task
        };

        me.register(task);

        return task;
    }

    /**
     * Removes a task from collection.
     * @param {String} taskId
     */
    removeTask(taskId) {
        this.unregister(taskId);
    }

    /**
     * Runs a task from collection.
     * @param {String} taskId
     */
    run(taskId) {
        let me   = this,
            task = me.get(taskId);

        if (task.isRunning) {
            Neo.logError('[Neo.util.TaskManager] Task is already running');
            return task;
        }

        try {
            let fn = function(task) {
                task.runCount++;

                if (task.addCountToArgs) {
                    task.args[task.args.length - 1] = task.runCount;
                }

                if (task.repeat && task.runCount === task.repeat) {
                    me.stop(task.id);
                }

                task.run(...task.args);
            };

            task.isRunning = true;
            task.runner    = setInterval(fn, task.interval, task);
        } catch (taskError) {
            Neo.logError('[Neo.util.TaskManager] Error while running task ' + task.id);
            task.onError(taskError);
            task.isRunning = false;
        }
    }

    /**
     * Adds a task and runs it.
     * @param {Object|String} task or taskId
     * @returns {Object}
     */
    start(task) {
        let me = this;

        if (Neo.isString(task)) {
            task = me.get(task);
            !task && Neo.logError('[Neo.util.TaskManager] You passed a taskId which does not exits');
        } else if (!task.id || !me.get(task.id)){
            task = me.createTask(task);
        }

        if (task.isRunning) {
            Neo.logError('[Neo.util.TaskManager] Task is already running');
            return task;
        }

        if (task.runOnStart) {
            task.runCount++;
            task.run(...task.args);
        }

        me.run(task.id);

        return task;
    }

    /**
     * Stops a task and resets configs.
     * If remove is true it will remove the task from the collection
     * @param {String} taskId
     * @param {Boolean} remove
     */
    stop(taskId, remove) {
        let task = this.get(taskId);

        task.isRunning && clearInterval(task.runner);

        if (remove) {
            this.removeTask(task);
        } else {
            task.isRunning = false;
            task.runCount  = 0;
            task.runner    = null;

            if (task.addCountToArgs) {
                task.args[task.args.length - 1] = 0;
            }
        }
    }

    /**
     * Stops all running tasks from collection.
     * If remove is true, it will remove all tasks from Manager
     * @param {Boolean} remove
     */
    stopAll(remove) {
        Object.keys(this.map).forEach(key => {
            this.stop(key, remove);
        });
    }
}

let instance = Neo.applyClassConfig(Task);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (instance);


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,