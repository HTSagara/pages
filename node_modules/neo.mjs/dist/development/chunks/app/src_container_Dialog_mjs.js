"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["src_container_Dialog_mjs"],{

/***/ "./src/container/Dialog.mjs":
/*!**********************************!*\
  !*** ./src/container/Dialog.mjs ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _container_Panel_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../container/Panel.mjs */ "./src/container/Panel.mjs");
/* harmony import */ var _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Array.mjs */ "./src/util/Array.mjs");
/* harmony import */ var _dialog_header_Toolbar_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dialog/header/Toolbar.mjs */ "./src/dialog/header/Toolbar.mjs");




/**
 * Lightweight implementation using the dialog tag.
 * See: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog
 * @class Neo.container.Dialog
 * @extends Neo.container.Panel
 */
class Dialog extends _container_Panel_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.container.Dialog'
         * @protected
         */
        className: 'Neo.container.Dialog',
        /**
         * @member {String} ntype='container-dialog'
         * @protected
         */
        ntype: 'container-dialog',
        /**
         * @member {Boolean} autoMount=true
         */
        autoMount: true,
        /**
         * @member {Boolean} autoRender=true
         */
        autoRender: true,
        /**
         * @member {String[]} baseCls=['neo-container-dialog', 'neo-panel', 'neo-container']
         * @protected
         */
        baseCls: ['neo-container-dialog', 'neo-panel', 'neo-container'],
        /**
         * @member {Object} headerConfig=null
         */
        headerConfig: null,
        /**
         * @member {Neo.toolbar.Base|null} headerToolbar=null
         */
        headerToolbar: null,
        /**
         * The CSS class to use for an icon, e.g. ['fa', 'fa-home']
         * @member {String[]} [iconCls_=null]
         */
        iconCls_: null,
        /**
         * @member {Object} itemDefaults
         */
        itemDefaults: {
            baseCls: ['neo-dialog-content']
        },
        /**
         * @member {Object[]} items
         */
        items: [],
        /**
         * @member {String} title=null
         */
        title_: null,
        /**
         * @member {Object} _vdom={tag: 'dialog', cn: []}
         */
        _vdom:
        {tag: 'dialog', cn: []}
    }

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);
        this.createHeader();
    }

    /**
     * Triggered after the iconCls config got changed
     * @param {String} value
     * @param {String} oldValue
     * @protected
     */
    afterSetIconCls(value, oldValue) {
        if (!this.headers) { return }
        let iconNode    = this.headers.down({flag: 'dialog-header-icon'}),
            iconNodeCls = [...iconNode.cls];

        _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].remove(iconNodeCls, oldValue);
        _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].add(   iconNodeCls, value);

        iconNode.cls = iconNodeCls;

        iconNode.removeDom = !value || value === '';
        this.update();
    }

    /**
     * Triggered after the title config got changed
     * @param {String} value
     * @param {String} oldValue
     * @protected
     */
    afterSetTitle(value, oldValue) {
        this.headerToolbar?.down({flag: 'panel-header-title'}).set({
            text: value
        })
    }

    /**
     * close the dialog in main thread
     */
    close() {
        let me = this;

        Neo.main.addon.Dialog.close({
            appName: me.appName,
            id     : me.id
        })
    }

    /**
     * @protected
     */
    createHeader() {
        let me               = this,
            cls              = ['neo-header-toolbar', 'neo-toolbar'],
            headers          = me.headers || [],
            headerConfigCopy = {...me.headerConfig};
        delete headerConfigCopy.items;

        me.headerToolbar = Neo.create({
            module   : _dialog_header_Toolbar_mjs__WEBPACK_IMPORTED_MODULE_2__["default"],
            actions  : [{action: 'close', iconCls: 'fa-solid fa-xmark'}],
            appName  : me.appName,
            cls,
            dock     : 'top',
            flex     : 'none',
            id       : me.getHeaderToolbarId(),
            listeners: {headerAction: me.executeHeaderAction, scope: me},
            items    : [{
                ntype: '',
                cls  : ['neo-dialog-header-icon', ...me.iconCls],
                flag : 'dialog-header-icon',
            }, {
                ntype : 'label',
                cls   : ['neo-panel-header-text', 'neo-label'],
                flag  : 'panel-header-title',
                hidden: !me.title,
                text  : me.title
            }, ...me.headerConfig.items || []],

            ...headerConfigCopy
        });

        headers.unshift(me.headerToolbar);

        me.headers = headers;
    }

    /**
     * {Object} data
     */
    executeHeaderAction(data) {
        let me = this,

        map = {
            close: me.close
        };

        map[data.action]?.call(me, data);

        me.fire('headerAction', {
            dialog: me,
            ...data
        })
    }

    /**
     * Returns the id of the header toolbar
     * @returns {String}
     */
    getHeaderToolbarId() {
        return this.id + '-header-toolbar';
    }

    /**
     * Shows the dialog (with / without Modal) in main thread
     * @param {Boolean} modal
     */
    async show(modal = true) {
        let me = this;

        await me.timeout(20);

        Neo.main.addon.Dialog[modal ? 'showModal': 'show']({
            appName: me.appName,
            id     : me.id
        });
    }
}

Neo.applyClassConfig(Dialog);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Dialog);


/***/ }),

/***/ "./src/dialog/header/Toolbar.mjs":
/*!***************************************!*\
  !*** ./src/dialog/header/Toolbar.mjs ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _toolbar_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../toolbar/Base.mjs */ "./src/toolbar/Base.mjs");


/**
 * @class Neo.dialog.header.Toolbar
 * @extends Neo.toolbar.Base
 */
class Toolbar extends _toolbar_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.dialog.header.Toolbar'
         * @protected
         */
        className: 'Neo.dialog.header.Toolbar',
        /**
         * @member {Object} actionMap
         */
        actionMap: {
            close   : () => ({action: 'close',    iconCls: 'far fa-window-close'}),
            maximize: () => ({action: 'maximize', iconCls: 'far fa-window-maximize'})
        },
        /**
         * You can define the action order and directly add custom actions.
         * @example
         * {
         *     actions: [
         *         'close',
         *         'maximize',
         *         {action: 'help', iconCls: 'far fa-circle-question'}
         *     ]
         * }
         *
         * You can also extend the actionMap if needed.
         * @member {Object[]|String[]|null} actions=['maximize','close']
         */
        actions: ['maximize', 'close'],
        /**
         * @member {String|null} title=null
         */
        title_: null
    }

    /**
     * Triggered after the title config got changed
     * @param {String} value
     * @param {String} oldValue
     * @protected
     */
    afterSetTitle(value, oldValue) {
        this.down({flag: 'title-label'})?.set({
            hidden: !value,
            text  : value
        })
    }

    /**
     *
     */
    createItems() {
        let me      = this,
            handler = me.fireAction.bind(me),
            items   = me.items || [];

        items.push({
            ntype : 'label',
            cls   : ['neo-panel-header-text', 'neo-label'],
            flag  : 'title-label',
            hidden: !me.title,
            text  : me.title
        });

        if (me.actions) {
            items.push('->');

            me.actions.forEach(action => {
                if (Neo.typeOf(action) !== 'Object') {
                    action = me.actionMap[action]()
                }

                items.push({handler, ...action})
            })
        }

        me.items = items;

        super.createItems()
    }

    /**
     * @param {Object} data
     */
    fireAction(data) {
        let component = data.component;

        this.fire('headerAction', {
            action: component.action,
            component,
            scope : this
        })
    }
}

Neo.applyClassConfig(Toolbar);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Toolbar);


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,