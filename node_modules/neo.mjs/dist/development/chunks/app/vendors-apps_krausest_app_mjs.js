"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["vendors-apps_krausest_app_mjs"],{

/***/ "./apps/krausest/TableCollection.mjs":
/*!*******************************************!*\
  !*** ./apps/krausest/TableCollection.mjs ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _src_collection_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../src/collection/Base.mjs */ "./src/collection/Base.mjs");


function _random(max) {
    return Math.round(Math.random()*1000)%max;
}

/**
 * @class NeoApp.TableCollection
 * @extends Neo.collection.Base
 */
class TableCollection extends _src_collection_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='NeoApp.TableCollection'
         * @protected
         */
        className: 'NeoApp.TableCollection',
        /**
         * @member {Number} idCounter=1
         */
        idCounter: 1
    }

    /**
     * @param {Number} count
     * @returns {Object[]}
     */
    buildData(count=1000) {
        let adjectives = ['pretty', 'large', 'big', 'small', 'tall', 'short', 'long', 'handsome', 'plain', 'quaint', 'clean', 'elegant', 'easy', 'angry', 'crazy', 'helpful', 'mushy', 'odd', 'unsightly', 'adorable', 'important', 'inexpensive', 'cheap', 'expensive', 'fancy'],
            colours    = ['red', 'yellow', 'blue', 'green', 'pink', 'brown', 'purple', 'brown', 'white', 'black', 'orange'],
            nouns      = ['table', 'chair', 'house', 'bbq', 'desk', 'car', 'pony', 'cookie', 'sandwich', 'burger', 'pizza', 'mouse', 'keyboard'],
            data       = [],
            i          = 0;

        for (; i < count; i++) {
            data.push({
                id   : this.idCounter++,
                label: adjectives[_random(adjectives.length)] + ' ' + colours[_random(colours.length)] + ' ' + nouns[_random(nouns.length)]
            });
        }

        return data;
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(TableCollection));;


/***/ }),

/***/ "./apps/krausest/app.mjs":
/*!*******************************!*\
  !*** ./apps/krausest/app.mjs ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   onStart: () => (/* binding */ onStart)
/* harmony export */ });
/* harmony import */ var _view_MainComponent_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./view/MainComponent.mjs */ "./apps/krausest/view/MainComponent.mjs");


const onStart = () => Neo.app({
    appPath : 'apps/neoapp/',
    mainView: _view_MainComponent_mjs__WEBPACK_IMPORTED_MODULE_0__["default"],
    name    : 'NeoApp',
    parentId: 'main'
});


/***/ }),

/***/ "./apps/krausest/view/MainComponent.mjs":
/*!**********************************************!*\
  !*** ./apps/krausest/view/MainComponent.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _src_component_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../src/component/Base.mjs */ "./src/component/Base.mjs");
/* harmony import */ var _MainComponentController_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MainComponentController.mjs */ "./apps/krausest/view/MainComponentController.mjs");
/* harmony import */ var _TableComponent_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TableComponent.mjs */ "./apps/krausest/view/TableComponent.mjs");
/* harmony import */ var _src_util_VDom_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../src/util/VDom.mjs */ "./src/util/VDom.mjs");





/**
 * @class NeoApp.view.MainComponent
 * @extends Neo.component.Base
 */
class MainComponent extends _src_component_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='NeoApp.view.MainComponent'
         * @protected
         */
        className: 'NeoApp.view.MainComponent',
        /**
         * True automatically mounts a component after being rendered.
         * @member {Boolean} autoMount=true
         */
        autoMount: true,
        /**
         * @member {String[]} baseCls=['container']
         */
        baseCls: ['container'],
        /**
         * @member {Neo.controller.Component} controller=MainComponentController
         */
        controller: _MainComponentController_mjs__WEBPACK_IMPORTED_MODULE_1__["default"],
        /**
         * @member {Object[]} domListeners
         * @protected
         */
        domListeners: [{
            click   : 'onButtonClick',
            delegate: '.btn'
        }],
        /**
         * @member {NeoApp.view.TableComponent|null} table=null
         */
        table: null,
        /**
         * @member {Object} _vdom
         */
        _vdom:
        {cls: ['container'], cn: [
            {cls: ['jumbotron'], cn: [
                {cls: ['row'], cn: [
                    {cls: ['col-md-6'], cn: [
                        {cls: ['row'], cn: [
                            {tag: 'h1', html: 'neo.mjs'}
                        ]}
                    ]},
                    {cls: ['col-md-6'], cn: [
                        {cls: ['row'], flag: 'row', cn: []}
                    ]}
                ]}
            ]},
            {tag: 'span', cls: ['preloadicon', 'glyphicon', 'glyphicon-remove'], 'aria-hidden': true}
        ]}
    }

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);

        this.createColumns(); // silent vdom update
        this.createTable();
    }

    /**
     *
     */
    createColumns() {
        let me   = this,
            vdom = me.vdom,
            row  = _src_util_VDom_mjs__WEBPACK_IMPORTED_MODULE_3__["default"].getByFlag(vdom, 'row'),
            i    = 0,
            item,

            map = [
                {id: 'run',      html: 'Create 1,000 rows'},
                {id: 'runlots',  html: 'Create 10,000 rows'},
                {id: 'add',      html: 'Append 1,000 rows'},
                {id: 'update',   html: 'Update every 10th row'},
                {id: 'clear',    html: 'Clear'},
                {id: 'swaprows', html: 'Swap Rows'}
            ];

        for (; i < 6; i++) {
            item = map[i];

            row.cn.push(
                {cls: ['col-sm-6 smallpad'], cn: [
                    {tag: 'button', type: 'button', cls: ['btn', 'btn-primary', 'btn-block'], id: item.id, html: item.html}
                ]}
            );
        }
    }

    /**
     *
     */
    createTable() {
        let me = this;

        me.table = Neo.create({
            module   : _TableComponent_mjs__WEBPACK_IMPORTED_MODULE_2__["default"],
            appName  : me.appName,
            parentId : me.id,
            reference: 'table'
        });

        me.vdom.cn.splice(1, 0, me.table.vdom);

        me.update();
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(MainComponent));


/***/ }),

/***/ "./apps/krausest/view/MainComponentController.mjs":
/*!********************************************************!*\
  !*** ./apps/krausest/view/MainComponentController.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _src_controller_Component_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../src/controller/Component.mjs */ "./src/controller/Component.mjs");


/**
 * @class NeoApp.view.MainComponentController
 * @extends Neo.controller.Component
 */
class MainComponentController extends _src_controller_Component_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='NeoApp.view.MainComponentController'
         * @protected
         */
        className: 'NeoApp.view.MainComponentController'
    }

    /**
     * @param {Object} data
     */
    onButtonClick(data) {
        let me    = this,
            table = me.getReference('table');

        switch (data.path[0].id) {
            case 'add'    : table.add();     break;
            case 'clear'  : table.clear();   break;
            case 'runlots': table.runlots(); break;
        }

        // console.log(data.path[0].id);
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(MainComponentController));


/***/ }),

/***/ "./apps/krausest/view/TableComponent.mjs":
/*!***********************************************!*\
  !*** ./apps/krausest/view/TableComponent.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _src_component_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../src/component/Base.mjs */ "./src/component/Base.mjs");
/* harmony import */ var _src_util_ClassSystem_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../src/util/ClassSystem.mjs */ "./src/util/ClassSystem.mjs");
/* harmony import */ var _TableCollection_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../TableCollection.mjs */ "./apps/krausest/TableCollection.mjs");




function _random(max) {
    return Math.round(Math.random()*1000)%max;
}

/**
 * @class NeoApp.view.TableComponent
 * @extends Neo.component.Base
 */
class TableComponent extends _src_component_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='NeoApp.view.TableComponent'
         * @protected
         */
        className: 'NeoApp.view.TableComponent',
        /**
         * @member {String[]} baseCls=['table','table-hover','table-striped','test-data']
         */
        baseCls: ['table', 'table-hover', 'table-striped', 'test-data'],
        /**
         * @member {NeoApp.TableCollection|null} store_=TableCollection
         */
        store_: _TableCollection_mjs__WEBPACK_IMPORTED_MODULE_2__["default"],
        /**
         * @member {Object} _vdom
         */
        _vdom:
        {tag: 'table', cn: [
            {tag: 'tbody', id: 'tbody', cn: []}
        ]}
    }

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);

        Neo.main.addon.CloneNode.createNode({
            id  : this.id,
            tag : 'tr',
            html: [
                '<td class="col-md-1"></td>',
                '<td class="col-md-4"><a class="lbl"></a></td>',
                '<td class="col-md-1"><a class="remove"><span class="remove glyphicon glyphicon-remove" aria-hidden="true"></span></a></td>',
                '<td class="col-md-6"></td>'
            ].join(''),
            paths: {
                id   : '0',
                label: '1/0'
            }
        });
    }

    /**
     *
      */
    add() {
        let me    = this,
            store = me.store,
            items = store.buildData();

        store.add(items);

        Neo.main.addon.CloneNode.applyClones({
            data    : items,
            id      : me.id,
            parentId: 'tbody'
        });

        // this works pretty fast as well
        /*items.forEach(item => {
            me.vdom.cn[0].cn.push(me.createTableRow(item));
        });

        me.update();*/
    }

    /**
     * Triggered before the store config gets changed.
     * @param {Object|Neo.data.Store} value
     * @param {Object|Neo.data.Store} oldValue
     * @returns {Neo.data.Store}
     * @protected
     */
    beforeSetStore(value, oldValue) {
        oldValue && oldValue.destroy();
        return _src_util_ClassSystem_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].beforeSetInstance(value);
    }

    /**
     *
     */
    clear() {
        let me    = this,
            store = me.store;

        if (store.getCount() > 0) {
            store.clear();
            Neo.applyDeltas(me.appName, {
                action: 'setTextContent',
                id    : 'tbody',
                value : ''
            });
        }
    }

    /**
     * @param {Object} data
     * @param {Number} data.id
     * @param {String} data.label
     * @returns {Object}
     */
    createTableRow(data) {
        return {tag: 'tr', cn: [
            {tag: 'td', cls: ['col-md-1'], html: data.id},
            {tag: 'td', cls: ['col-md-4'], cn: [
                {tag: 'a', cls: ['lbl'], html: data.label}
            ]},
            {tag: 'td', cls: ['col-md-1'], cn: [
                {tag: 'a', cls: ['remove'], cn: [
                    {tag: 'span', cls: ['remove', 'glyphicon', 'glyphicon-remove'], 'aria-hidden': true}
                ]}
            ]},
            {tag: 'td', cls: ['col-md-6']}
        ]};
    }

    /**
     *
     */
    runlots() {
        let me    = this,
            store = me.store,
            items = store.buildData(10000);

        me.clear();
        store.add(items);

        Neo.main.addon.CloneNode.applyClones({
            data    : items,
            id      : me.id,
            parentId: 'tbody'
        });
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(TableComponent));


/***/ }),

/***/ "./src/controller/Component.mjs":
/*!**************************************!*\
  !*** ./src/controller/Component.mjs ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Base.mjs */ "./src/controller/Base.mjs");
/* harmony import */ var _util_Logger_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Logger.mjs */ "./src/util/Logger.mjs");



/**
 * @class Neo.controller.Component
 * @extends Neo.controller.Base
 */
class Component extends _Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.controller.Component'
         * @protected
         */
        className: 'Neo.controller.Component',
        /**
         * @member {String} ntype='component-controller'
         * @protected
         */
        ntype: 'component-controller',
        /**
         * @member {Neo.component.Base|null} component=null
         * @protected
         */
        component: null,
        /**
         * @member {Neo.controller.Component|null} parent_=null
         */
        parent_: null,
        /**
         * @member {Object} references=null
         * @protected
         */
        references: null,
        /**
         * @member {Number|null} windowId=null
         */
        windowId: null
    }

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);

        let me          = this,
            {component} = me,
            listenerId;

        me.references = {};

        if (component.isConstructed) {
            me.onComponentConstructed()
        } else {
            listenerId = component.on('constructed', () => {
                component.un('constructed', listenerId);
                me.onComponentConstructed()
            })
        }
    }

    /**
     * Triggered before the parent config gets changed
     * @param {Neo.controller.Component|null} value
     * @param {Neo.controller.Component|null} oldValue
     * @protected
     */
    beforeSetParent(value, oldValue) {
        return value || this.getParent()
    }

    /**
     * @param {String} handlerName
     * @param {Neo.component.Base} component
     * @returns {Neo.controller.Component|Boolean|null}
     */
    getHandlerScope(handlerName, component) {
        let me       = this,
            {parent} = me;

        if (component) {
            // Look for ths function *name* first in the Component itself.
            // If we find it, return true so calling code knows not to continue to search.
            const handlerCb = component.resolveCallback(handlerName, component);

            // Handler fn is resolved in the Component or its own parent chain.
            // Return a status indicating that we do not need an early binding
            if (handlerCb.fn) {
                return true
            }
        }

        return Neo.isFunction(me[handlerName]) ?
            me : parent ?
            parent.getHandlerScope(handlerName) : null
    }

    /**
     * sameLevelOnly=false will return the closest VM inside the component parent tree,
     * in case there is none on the same level.
     * @param {Boolean} [sameLevelOnly=false]
     */
    getModel(sameLevelOnly=false) {
        let {component} = this;
        return sameLevelOnly ? component.model : component.getModel()
    }

    /**
     * Get the closest controller inside the components parent tree
     * @returns {Neo.controller.Component|null}
     */
    getParent() {
        let me       = this,
            {parent} = me;

        if (parent) {
            return parent;
        }

        return me.component.parent?.getController() || null
    }

    /**
     * todo: update changed references (e.g. container.remove() then container.add() using the same key)
     * @param {String} name
     * @returns {*}
     */
    getReference(name) {
        let me        = this,
            component = me.references[name];

        if (!component) {
            component = me.component.down({reference: name});

            if (component) {
                me.references[name] = component
            }
        }

        return component || null
    }

    /**
     * Convenience shortcut for accessing model.Component based data.Stores
     * @param {String} key
     * @returns {Neo.data.Store}
     */
    getStore(key) {
        return this.getModel().getStore(key)
    }

    /**
     * Override this method inside your view controllers as a starting point in case you need references
     * (instead of using onConstructed() inside your controller)
     */
    onComponentConstructed() {}

    /**
     * @param {Neo.component.Base} component=this.component
     */
    parseConfig(component=this.component) {
        let me = this,
            {handler, listeners, reference, validator} = component,
            eventHandler, handlerScope;

        if (handler && typeof handler === 'string') {
            handlerScope = me.getHandlerScope(handler, component);

            // If the handler name was not resolved in the Component itself, bind it
            if (handlerScope !== true) {
                component.handler = handlerScope[handler].bind(component.handlerScope || handlerScope);
            }
        }

        listeners && Object.entries(listeners).forEach(([key, value]) => {
            if (key !== 'scope' && key !== 'delegate') {
                if (Neo.isString(value)) {
                    eventHandler = value;
                    handlerScope = me.getHandlerScope(eventHandler, component);

                    if (!handlerScope) {
                        _util_Logger_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].logError('Unknown event handler for', eventHandler, component)
                    } else if (handlerScope !== true) {
                        listeners[key] = {};
                        listeners[key].fn = handlerScope[eventHandler].bind(handlerScope)
                    }
                } else {
                    value.forEach(listener => {
                        if (Neo.isObject(listener) && listener.hasOwnProperty('fn') && Neo.isString(listener.fn)) {
                            eventHandler = listener.fn;
                            handlerScope = me.getHandlerScope(eventHandler, component);

                            if (!handlerScope) {
                                console.error('Unknown event handler for', eventHandler, component)
                            } else if (handlerScope !== true) {
                                listener.fn = handlerScope[eventHandler].bind(handlerScope)
                            }
                        }
                    })
                }
            }
        });

        if (Neo.isString(validator)) {
            handlerScope = me.getHandlerScope(validator);

            if (!handlerScope) {
                _util_Logger_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].logError('Unknown validator for', component.id, component)
            } else {
                component.validator = handlerScope[validator].bind(handlerScope)
            }
        }

        if (reference) {
            me.references[reference] = component
        }
    }

    /**
     * @param {Neo.component.Base} component=this.component
     */
    parseDomListeners(component=this.component) {
        let me             = this,
            {domListeners} = component,
            eventHandler, scope;

        domListeners?.forEach(domListener => {
            Object.entries(domListener).forEach(([key, value]) => {
                eventHandler = null;

                if (key !== 'scope' && key !== 'delegate') {
                    if (Neo.isString(value)) {
                        eventHandler = value;
                    } else if (Neo.isObject(value) && value.hasOwnProperty('fn') && Neo.isString(value.fn)) {
                        eventHandler = value.fn;
                    }

                    if (eventHandler) {
                        scope = me.getHandlerScope(eventHandler);

                        if (!scope) {
                            _util_Logger_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].logError('Unknown domEvent handler for', eventHandler, component)
                        } else {
                            domListener[key] = scope[eventHandler].bind(scope)
                        }
                    }
                }
            })
        })
    }

    /**
     * Will get called by component.Base: destroy() in case the component has a reference config
     * @param {Neo.component.Base} component
     */
    removeReference(component) {
        let me           = this,
            {references} = me,
            key;

        for (key in references) {
            if (component === references[key]) {
                delete references[key];
                break
            }
        }

        me.getParent()?.removeReference(component)
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(Component));


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,