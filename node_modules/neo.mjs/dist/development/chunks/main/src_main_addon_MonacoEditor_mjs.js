"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["src_main_addon_MonacoEditor_mjs"],{

/***/ "./src/main/addon/Base.mjs":
/*!*********************************!*\
  !*** ./src/main/addon/Base.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/Base.mjs */ "./src/core/Base.mjs");


/**
 * Base class for main thread addons
 * @class Neo.main.addon.Base
 * @extends Neo.core.Base
 */
class Base extends _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.main.addon.Base'
         * @protected
         */
        className: 'Neo.main.addon.Base',
        /**
         * An identifier for core.Base to get handled like singletons for remote method access
         * @member {Boolean} isMainThreadAddon=true
         * @protected
         */
        isMainThreadAddon: true,
        /**
         * Will get set to true once all addon related files got loaded (if there is a need to load)
         * @member {Boolean} isReady_=false
         * @protected
         */
        isReady_: false,
        /**
         * Amount in ms to delay the loading of library files, unless remote method access happens
         * Change the value to false in case you don't want an automated preloading
         * @member {Boolean|Number} preloadFilesDelay=5000
         * @protected
         */
        preloadFilesDelay: 5000,
    }

    /**
     * @member {Object[]} cache=[]
     */
    cache = []
    /**
     * Will get set to true once we start loading Monaco related files
     * @member {Boolean} isLoading=false
     */
    isLoading = false
    /**
     * Internal flag to store the setTimeout() id for loading external files
     * @member {Number|null} loadingTimeoutId=null
     */
    loadingTimeoutId = null

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);

        let me = this;

        if (me.loadFiles) {
            if (me.preloadFilesDelay === 0) {
                me.loadFiles()
            } else if (Neo.isNumber(me.preloadFilesDelay)) {
                me.loadingTimeoutId = setTimeout(() => {
                    me.loadFiles()
                }, me.preloadFilesDelay)
            }
        }
    }

    /**
     * Triggered after the isReady config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetIsReady(value, oldValue) {
        if (value) {
            let me = this,
                returnValue;

            me.cache.forEach(item => {
                returnValue = me[item.fn](item.data);
                item.resolve(returnValue)
            });

            me.cache = []
        }
    }

    /**
     * Internally caches call when isReady===false
     * Loads the library files in case this is not already happening
     * @param item
     * @returns {Promise<unknown>}
     */
    cacheMethodCall(item) {
        let me = this;

        if (!me.isLoading) {
            me.loadingTimeoutId && clearTimeout(me.loadingTimeoutId);
            me.loadingTimeoutId = null;
            me.loadFiles()
        }

        return new Promise((resolve, reject) => {
            me.cache.push({...item, resolve})
        })
    }
}

Neo.setupClass(Base);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Base);


/***/ }),

/***/ "./src/main/addon/MonacoEditor.mjs":
/*!*****************************************!*\
  !*** ./src/main/addon/MonacoEditor.mjs ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Base.mjs */ "./src/main/addon/Base.mjs");
/* harmony import */ var _DomAccess_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../DomAccess.mjs */ "./src/main/DomAccess.mjs");
/* harmony import */ var _DomEvents_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../DomEvents.mjs */ "./src/main/DomEvents.mjs");




/**
 * Adds support for using the Monaco Code Editor within neo.
 * Repository: https://github.com/microsoft/monaco-editor
 * API: https://microsoft.github.io/monaco-editor/typedoc/index.html
 * @class Neo.main.addon.MonacoEditor
 * @extends Neo.main.addon.Base
 */
class MonacoEditor extends _Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.main.addon.MonacoEditor'
         * @protected
         */
        className: 'Neo.main.addon.MonacoEditor',
        /**
         * @member {String} libraryBasePath='../../node_modules/monaco-editor/min/vs'
         */
        libraryBasePath: Neo.config.basePath + 'node_modules/monaco-editor/min/vs',
        /**
         * Remote method access for other workers
         * @member {Object} remote
         * @protected
         */
        remote: {
            app: [
                'createInstance',
                'destroyInstance',
                'getValue',
                'layoutEditor',
                'setLanguage',
                'setTheme',
                'setValue',
                'updateOptions'
            ]
        }
    }

    /**
     * Stores component DOM ids as keys and editor instances as values
     * @member {Object} map={}
     */
    map = {}

    /**
     * For a complete list of options see:
     * https://microsoft.github.io/monaco-editor/typedoc/interfaces/editor.IEditorOptions.html
     * @param {Object} data
     */
    createInstance(data) {
        let me   = this,
            {id} = data,
            editor;

        if (!me.isReady) {
            return me.cacheMethodCall({fn: 'createInstance', data})
        } else {
            delete data.appName;
            delete data.id;

            editor = me.map[id] = monaco.editor.create(_DomAccess_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].getElement(id), data);

            editor.getModel().onDidChangeContent(me.onContentChange.bind(me, id))
        }
    }

    /**
     * @param {Object} data
     * @param {String} data.id
     */
    destroyInstance(data) {
        let me = this;

        if (!me.isReady) {
            return me.cacheMethodCall({fn: 'destroyInstance', data})
        } else {
            // todo: destroy the editor instance if possible
            delete this.map[data.id]
        }
    }

    /**
     * @param {Object} data
     * @param {String} data.id
     * @returns {Object}
     */
    getValue(data) {
        let me = this;

        if (!me.isReady) {
            return me.cacheMethodCall({fn: 'getValue', data})
        } else {
            return me.map[data.id].getModel().getValue()
        }
    }

    /**
     * Changing the size of the parent container will only get honored when re-triggering an editor layout
     * @param {Object} data
     * @param {String} data.id
     */
    layoutEditor(data) {
        this.isReady && this.map[data.id].layout()
    }

    /**
     *
     */
    async loadFiles() {
        let me   = this,
            path = me.libraryBasePath;

        me.isLoading = true;

        window.require = {paths: {vs: path}};

        await Promise.all([
            _DomAccess_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].loadStylesheet(path + '/editor/editor.main.css', {name: 'vs/editor/editor.main'}),
            _DomAccess_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].loadScript(path + '/loader.js'),
            _DomAccess_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].loadScript(path + '/editor/editor.main.nls.js'),
            _DomAccess_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].loadScript(path + '/editor/editor.main.js')
        ])

        me.isLoading = false;
        me.isReady   = true
    }

    /**
     * Forwards content changes as DOM change events to the app-worker.
     * @param {String} id
     * @param {Object} event
     */
    onContentChange(id, event) {
        let node = _DomAccess_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].getElement(id),
            path = _DomEvents_mjs__WEBPACK_IMPORTED_MODULE_2__["default"].getPathFromElement(node).map(e => _DomEvents_mjs__WEBPACK_IMPORTED_MODULE_2__["default"].getTargetData(e));

        _DomEvents_mjs__WEBPACK_IMPORTED_MODULE_2__["default"].sendMessageToApp({
            event,
            id,
            path,
            type : 'editorChange', // we must not use "change", since the editor contains a textarea tag which also fires change.
            value: this.map[id].getModel().getValue()
        })
    }

    /**
     * @param {Object} data
     * @param {String} data.id
     * @param {String} data.value
     */
    setLanguage(data) {
        let me = this;

        if (!me.isReady) {
            return me.cacheMethodCall({fn: 'setLanguage', data})
        } else {
            me.map[data.id].getModel().setLanguage(data.value)
        }
    }

    /**
     * @param {Object} data
     * @param {String} data.id
     * @param {String} data.value
     */
    setTheme(data) {
        let me = this;

        if (!me.isReady) {
            return me.cacheMethodCall({fn: 'setTheme', data})
        } else {
            me.map[data.id]._themeService.setTheme(data.value)
        }
    }

    /**
     * @param {Object} data
     * @param {String} data.id
     * @param {String} data.value
     */
    setValue(data) {
        let me = this;

        if (!me.isReady) {
            return me.cacheMethodCall({fn: 'setValue', data})
        } else {
            me.map[data.id].getModel().setValue(data.value)
        }
    }

    /**
     * @param {Object} data
     * @param {String} data.id
     * @param {Object} data.options
     */
    updateOptions(data) {
        let me = this;

        if (!me.isReady) {
            return me.cacheMethodCall({fn: 'updateOptions', data})
        } else {
            me.map[data.id].updateOptions(data.options)
        }
    }
}

Neo.setupClass(MonacoEditor);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MonacoEditor);


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,