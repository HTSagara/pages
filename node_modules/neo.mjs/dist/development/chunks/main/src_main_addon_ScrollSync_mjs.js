"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["src_main_addon_ScrollSync_mjs"],{

/***/ "./src/main/addon/ScrollSync.mjs":
/*!***************************************!*\
  !*** ./src/main/addon/ScrollSync.mjs ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/Base.mjs */ "./src/core/Base.mjs");
/* harmony import */ var _DomEvents_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../DomEvents.mjs */ "./src/main/DomEvents.mjs");



/**
 * This addon keeps the position of overlays in sync with an anchor element,
 * when scrolling inside any parent node.
 * A prominent use case is Neo.form.field.Picker.
 * @class Neo.main.addon.ScrollSync
 * @extends Neo.core.Base
 * @singleton
 */
class ScrollSync extends _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.main.addon.ScrollSync'
         * @protected
         */
        className: 'Neo.main.addon.ScrollSync',
        /**
         * Remote method access for other workers
         * @member {Object} remote={app: [//...]}
         * @protected
         */
        remote: {
            app: [
                'register',
                'unregister'
            ]
        },
        /**
         * @member {Boolean} singleton=true
         * @protected
         */
        singleton: true
    }

    /**
     * @member {Object} sourceMap={}
     * @protected
     */
    sourceMap = {}

    /**
     * @param {Object} config
     */
    construct(config = {}) {
        super.construct(config);

        document.addEventListener('scroll', this.onDocumentScroll.bind(this), true)
    }

    /**
     * @param {Event} event
     */
    onDocumentScroll(event) {
        let me         = this,
            scrollNode = event.target,
            sourceRect, targetNode;

        me.sourceMap[scrollNode.id]?.forEach(item => {
            sourceRect = document.getElementById(item.sourceId).getBoundingClientRect();
            targetNode = document.getElementById(item.targetId)

            targetNode.style.left = `${sourceRect.x + item.deltaX}px`;
            targetNode.style.top  = `${sourceRect.y + item.deltaY}px`
        })
    }

    /**
     * @param {Object} data
     * @param {String} data.sourceId
     * @param {String} data.targetId
     * @returns Promise<Boolean>
     */
    async register(data) {
        // short delay to ensure the target node got mounted
        await Neo.timeout(50)

        let sourceId   = data.sourceId,
            sourceMap  = this.sourceMap,
            sourceNode = document.getElementById(sourceId),
            sourceRect = sourceNode.getBoundingClientRect(),
            parentNode = sourceNode.parentNode,
            targetId   = data.targetId,
            targetRect = document.getElementById(targetId).getBoundingClientRect(),
            deltaX     = targetRect.x - sourceRect.x,
            deltaY     = targetRect.y - sourceRect.y,
            overflowX, overflowY, parentId;

        while (parentNode && parentNode.id) {
            parentId = parentNode.id;

            ({overflowX, overflowY} = getComputedStyle(parentNode))

            if (overflowX === 'auto' || overflowX === 'scroll' || overflowY === 'auto' || overflowY === 'scroll') {
                if (!sourceMap[parentId]) {
                    sourceMap[parentId] = []
                }

                sourceMap[parentId].push({deltaX, deltaY, sourceId, targetId})
            }

            parentNode = parentNode.parentNode
        }

        return true
    }

    /**
     * @param {Object} data
     * @param {String} data.sourceId
     * @param {String} data.targetId
     * @returns {Boolean}
     */
    unregister(data) {
        let sourceId   = data.sourceId,
            sourceMap  = this.sourceMap,
            sourceNode = document.getElementById(sourceId),
            parentNode = sourceNode.parentNode,
            parentId;

        while (parentNode && parentNode.id) {
            parentId = parentNode.id;

            if (sourceMap[parentId]) {
                [...sourceMap[parentId]].forEach((item, index) => {
                    if (item.sourceId === sourceId && item.targetId === data.targetId) {
                        sourceMap[parentId].splice(index, 1)
                    }
                })

                if (sourceMap[parentId].length < 1) {
                    delete sourceMap[parentId]
                }
            }

            parentNode = parentNode.parentNode
        }

        return true
    }
}

let instance = Neo.applyClassConfig(ScrollSync);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (instance);


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmtzL21haW4vc3JjX21haW5fYWRkb25fU2Nyb2xsU3luY19tanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQTRDO0FBQ0o7O0FBRXhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsc0RBQUk7QUFDN0I7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUSxRQUFRO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0Esb0JBQW9CLFNBQVM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQSx5QkFBeUI7QUFDekI7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSx1Q0FBdUMsMkJBQTJCO0FBQ2xFLHVDQUF1QywyQkFBMkI7QUFDbEUsU0FBUztBQUNUOztBQUVBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGNBQWMsc0JBQXNCOztBQUVwQztBQUNBO0FBQ0E7QUFDQTs7QUFFQSwwQ0FBMEMsbUNBQW1DO0FBQzdFOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7O0FBRWpCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBLGlFQUFlLFFBQVEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL25lby5tanMvLi9zcmMvbWFpbi9hZGRvbi9TY3JvbGxTeW5jLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQmFzZSAgICAgIGZyb20gJy4uLy4uL2NvcmUvQmFzZS5tanMnO1xuaW1wb3J0IERvbUV2ZW50cyBmcm9tICcuLi9Eb21FdmVudHMubWpzJ1xuXG4vKipcbiAqIFRoaXMgYWRkb24ga2VlcHMgdGhlIHBvc2l0aW9uIG9mIG92ZXJsYXlzIGluIHN5bmMgd2l0aCBhbiBhbmNob3IgZWxlbWVudCxcbiAqIHdoZW4gc2Nyb2xsaW5nIGluc2lkZSBhbnkgcGFyZW50IG5vZGUuXG4gKiBBIHByb21pbmVudCB1c2UgY2FzZSBpcyBOZW8uZm9ybS5maWVsZC5QaWNrZXIuXG4gKiBAY2xhc3MgTmVvLm1haW4uYWRkb24uU2Nyb2xsU3luY1xuICogQGV4dGVuZHMgTmVvLmNvcmUuQmFzZVxuICogQHNpbmdsZXRvblxuICovXG5jbGFzcyBTY3JvbGxTeW5jIGV4dGVuZHMgQmFzZSB7XG4gICAgc3RhdGljIGNvbmZpZyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gY2xhc3NOYW1lPSdOZW8ubWFpbi5hZGRvbi5TY3JvbGxTeW5jJ1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBjbGFzc05hbWU6ICdOZW8ubWFpbi5hZGRvbi5TY3JvbGxTeW5jJyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlbW90ZSBtZXRob2QgYWNjZXNzIGZvciBvdGhlciB3b3JrZXJzXG4gICAgICAgICAqIEBtZW1iZXIge09iamVjdH0gcmVtb3RlPXthcHA6IFsvLy4uLl19XG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIHJlbW90ZToge1xuICAgICAgICAgICAgYXBwOiBbXG4gICAgICAgICAgICAgICAgJ3JlZ2lzdGVyJyxcbiAgICAgICAgICAgICAgICAndW5yZWdpc3RlcidcbiAgICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge0Jvb2xlYW59IHNpbmdsZXRvbj10cnVlXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIHNpbmdsZXRvbjogdHJ1ZVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge09iamVjdH0gc291cmNlTWFwPXt9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHNvdXJjZU1hcCA9IHt9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXG4gICAgICovXG4gICAgY29uc3RydWN0KGNvbmZpZyA9IHt9KSB7XG4gICAgICAgIHN1cGVyLmNvbnN0cnVjdChjb25maWcpO1xuXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMub25Eb2N1bWVudFNjcm9sbC5iaW5kKHRoaXMpLCB0cnVlKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gICAgICovXG4gICAgb25Eb2N1bWVudFNjcm9sbChldmVudCkge1xuICAgICAgICBsZXQgbWUgICAgICAgICA9IHRoaXMsXG4gICAgICAgICAgICBzY3JvbGxOb2RlID0gZXZlbnQudGFyZ2V0LFxuICAgICAgICAgICAgc291cmNlUmVjdCwgdGFyZ2V0Tm9kZTtcblxuICAgICAgICBtZS5zb3VyY2VNYXBbc2Nyb2xsTm9kZS5pZF0/LmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgICAgICBzb3VyY2VSZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaXRlbS5zb3VyY2VJZCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICB0YXJnZXROb2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaXRlbS50YXJnZXRJZClcblxuICAgICAgICAgICAgdGFyZ2V0Tm9kZS5zdHlsZS5sZWZ0ID0gYCR7c291cmNlUmVjdC54ICsgaXRlbS5kZWx0YVh9cHhgO1xuICAgICAgICAgICAgdGFyZ2V0Tm9kZS5zdHlsZS50b3AgID0gYCR7c291cmNlUmVjdC55ICsgaXRlbS5kZWx0YVl9cHhgXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YS5zb3VyY2VJZFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLnRhcmdldElkXG4gICAgICogQHJldHVybnMgUHJvbWlzZTxCb29sZWFuPlxuICAgICAqL1xuICAgIGFzeW5jIHJlZ2lzdGVyKGRhdGEpIHtcbiAgICAgICAgLy8gc2hvcnQgZGVsYXkgdG8gZW5zdXJlIHRoZSB0YXJnZXQgbm9kZSBnb3QgbW91bnRlZFxuICAgICAgICBhd2FpdCBOZW8udGltZW91dCg1MClcblxuICAgICAgICBsZXQgc291cmNlSWQgICA9IGRhdGEuc291cmNlSWQsXG4gICAgICAgICAgICBzb3VyY2VNYXAgID0gdGhpcy5zb3VyY2VNYXAsXG4gICAgICAgICAgICBzb3VyY2VOb2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoc291cmNlSWQpLFxuICAgICAgICAgICAgc291cmNlUmVjdCA9IHNvdXJjZU5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICAgICAgICBwYXJlbnROb2RlID0gc291cmNlTm9kZS5wYXJlbnROb2RlLFxuICAgICAgICAgICAgdGFyZ2V0SWQgICA9IGRhdGEudGFyZ2V0SWQsXG4gICAgICAgICAgICB0YXJnZXRSZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGFyZ2V0SWQpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgICAgICAgZGVsdGFYICAgICA9IHRhcmdldFJlY3QueCAtIHNvdXJjZVJlY3QueCxcbiAgICAgICAgICAgIGRlbHRhWSAgICAgPSB0YXJnZXRSZWN0LnkgLSBzb3VyY2VSZWN0LnksXG4gICAgICAgICAgICBvdmVyZmxvd1gsIG92ZXJmbG93WSwgcGFyZW50SWQ7XG5cbiAgICAgICAgd2hpbGUgKHBhcmVudE5vZGUgJiYgcGFyZW50Tm9kZS5pZCkge1xuICAgICAgICAgICAgcGFyZW50SWQgPSBwYXJlbnROb2RlLmlkO1xuXG4gICAgICAgICAgICAoe292ZXJmbG93WCwgb3ZlcmZsb3dZfSA9IGdldENvbXB1dGVkU3R5bGUocGFyZW50Tm9kZSkpXG5cbiAgICAgICAgICAgIGlmIChvdmVyZmxvd1ggPT09ICdhdXRvJyB8fCBvdmVyZmxvd1ggPT09ICdzY3JvbGwnIHx8IG92ZXJmbG93WSA9PT0gJ2F1dG8nIHx8IG92ZXJmbG93WSA9PT0gJ3Njcm9sbCcpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXNvdXJjZU1hcFtwYXJlbnRJZF0pIHtcbiAgICAgICAgICAgICAgICAgICAgc291cmNlTWFwW3BhcmVudElkXSA9IFtdXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc291cmNlTWFwW3BhcmVudElkXS5wdXNoKHtkZWx0YVgsIGRlbHRhWSwgc291cmNlSWQsIHRhcmdldElkfSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50Tm9kZVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLnNvdXJjZUlkXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGEudGFyZ2V0SWRcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICB1bnJlZ2lzdGVyKGRhdGEpIHtcbiAgICAgICAgbGV0IHNvdXJjZUlkICAgPSBkYXRhLnNvdXJjZUlkLFxuICAgICAgICAgICAgc291cmNlTWFwICA9IHRoaXMuc291cmNlTWFwLFxuICAgICAgICAgICAgc291cmNlTm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHNvdXJjZUlkKSxcbiAgICAgICAgICAgIHBhcmVudE5vZGUgPSBzb3VyY2VOb2RlLnBhcmVudE5vZGUsXG4gICAgICAgICAgICBwYXJlbnRJZDtcblxuICAgICAgICB3aGlsZSAocGFyZW50Tm9kZSAmJiBwYXJlbnROb2RlLmlkKSB7XG4gICAgICAgICAgICBwYXJlbnRJZCA9IHBhcmVudE5vZGUuaWQ7XG5cbiAgICAgICAgICAgIGlmIChzb3VyY2VNYXBbcGFyZW50SWRdKSB7XG4gICAgICAgICAgICAgICAgWy4uLnNvdXJjZU1hcFtwYXJlbnRJZF1dLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLnNvdXJjZUlkID09PSBzb3VyY2VJZCAmJiBpdGVtLnRhcmdldElkID09PSBkYXRhLnRhcmdldElkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VNYXBbcGFyZW50SWRdLnNwbGljZShpbmRleCwgMSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICBpZiAoc291cmNlTWFwW3BhcmVudElkXS5sZW5ndGggPCAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzb3VyY2VNYXBbcGFyZW50SWRdXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnROb2RlXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbn1cblxubGV0IGluc3RhbmNlID0gTmVvLmFwcGx5Q2xhc3NDb25maWcoU2Nyb2xsU3luYyk7XG5cbmV4cG9ydCBkZWZhdWx0IGluc3RhbmNlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9