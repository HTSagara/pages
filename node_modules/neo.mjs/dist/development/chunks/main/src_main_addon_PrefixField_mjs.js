"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["src_main_addon_PrefixField_mjs"],{

/***/ "./src/main/addon/Base.mjs":
/*!*********************************!*\
  !*** ./src/main/addon/Base.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/Base.mjs */ "./src/core/Base.mjs");


/**
 * Base class for main thread addons
 * @class Neo.main.addon.Base
 * @extends Neo.core.Base
 */
class Base extends _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.main.addon.Base'
         * @protected
         */
        className: 'Neo.main.addon.Base',
        /**
         * An identifier for core.Base to get handled like singletons for remote method access
         * @member {Boolean} isMainThreadAddon=true
         * @protected
         */
        isMainThreadAddon: true
    }
}

Neo.setupClass(Base);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Base);


/***/ }),

/***/ "./src/main/addon/PrefixField.mjs":
/*!****************************************!*\
  !*** ./src/main/addon/PrefixField.mjs ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Base.mjs */ "./src/main/addon/Base.mjs");


/**
 * Helper class to include Google's Material Web Components into your neo.mjs app
 * https://www.amcharts.com/docs/v4/
 * @class Neo.main.addon.PrefixField
 * @extends Neo.main.addon.Base
 */
class PrefixField extends _Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.main.addon.PrefixField'
         * @protected
         */
        className: 'Neo.main.addon.PrefixField',
        /**
         * regex to calculate if entered value is acceptable
         * Preset to numbers only
         *
         * @member {regex|null} accept
         */
        accept_: null,
        /**
         * @member {String} pattern=null
         */
        pattern_: null,
        /**
         * Remote method access for other workers
         * @member {Object} remote
         * @protected
         */
        remote: {
            app: [
                'initialize',
                'destroy',
                'updateAccept',
                'updatePattern',
                'updateSlots',
            ]
        },
        /**
         * Only add a String. A Set will be automatically created
         * @member {String|Set|null} slots=null
         */
        slots_: null
    }

    elIds = new Map()

    prev

    back = false

    destroy() {

    }

    /**
     *
     * @param {Object} data
     * @param {String} data.elId
     * @param {String} data.pattern
     * @param {String} data.slots
     * @param {String} data.accept
     */
    initialize(data) {
        const me = this;

        me.elId     = data.elId;

        const el      = me.el = document.getElementById(data.elId),
              pattern = me.pattern = data.pattern,
              slots = me.slots = new Set(data.slots || "_");

        me.accept = data.accept;
        me.prev   = (j => Array.from(pattern, (c, i) => slots.has(c) ? j = i + 1 : j))(0);
        me.first  = [...pattern].findIndex(c => slots.has(c));

        me.addListeners();
        me.addCss();
    }

    addCss() {
        this.el.classList.add('tiny-prefix-field-input');
    }

    addListeners() {
        const me       = this,
              el       = me.el,
              formatFn = me.format.bind(me);

        el.addEventListener("keypress", me.onKeyDown.bind(me));
        el.addEventListener("input", formatFn);
        el.addEventListener("focusin", formatFn);
        el.addEventListener("focusout", me.onBlur.bind(me));
    }

    onBlur() {
        const pattern = this.pattern,
              el      = this.el;

        return el.value === pattern && (el.value = "");
    }

    onKeyDown(event) {
        this.back = (event.key === "Backspace");
    }

    clean(input) {
        const el      = this.el,
              accept  = new RegExp(this.accept || "\\d", "g"),
              pattern = this.pattern,
              slots   = this.slots;

        input = input.match(accept) || [];

        return Array.from(pattern, c =>
            input[0] === c || slots.has(c) ? input.shift() || c : c
        );
    }

    format() {
        const me    = this,
              el    = this.el,
              prev  = this.prev,
              clean = this.clean.bind(this);
        console.log(el.selectionStart, el.selectionEnd);
        const [i, j] = [el.selectionStart, el.selectionEnd].map(i => {
            i = clean(el.value.slice(0, i)).findIndex(c => me.slots.has(c));
            return i < 0 ? prev[prev.length - 1] : me.back ? prev[i - 1] || me.first : i;
        });

        el.value = clean(el.value).join``;
        el.setSelectionRange(i, j);

        this.back = false;
    }
}

Neo.setupClass(PrefixField);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PrefixField);


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmtzL21haW4vc3JjX21haW5fYWRkb25fUHJlZml4RmllbGRfbWpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQTJDOztBQUUzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHNEQUFRO0FBQzNCO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFNBQVM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxpRUFBZSxJQUFJLEVBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7QUN6QlU7O0FBRTlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixpREFBSTtBQUM5QjtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsWUFBWTtBQUNoQztBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxvQkFBb0IsaUJBQWlCO0FBQ3JDO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxpRUFBZSxXQUFXLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZW8ubWpzLy4vc3JjL21haW4vYWRkb24vQmFzZS5tanMiLCJ3ZWJwYWNrOi8vbmVvLm1qcy8uL3NyYy9tYWluL2FkZG9uL1ByZWZpeEZpZWxkLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ29yZUJhc2UgZnJvbSAnLi4vLi4vY29yZS9CYXNlLm1qcyc7XG5cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgbWFpbiB0aHJlYWQgYWRkb25zXG4gKiBAY2xhc3MgTmVvLm1haW4uYWRkb24uQmFzZVxuICogQGV4dGVuZHMgTmVvLmNvcmUuQmFzZVxuICovXG5jbGFzcyBCYXNlIGV4dGVuZHMgQ29yZUJhc2Uge1xuICAgIHN0YXRpYyBjb25maWcgPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IGNsYXNzTmFtZT0nTmVvLm1haW4uYWRkb24uQmFzZSdcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgY2xhc3NOYW1lOiAnTmVvLm1haW4uYWRkb24uQmFzZScsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbiBpZGVudGlmaWVyIGZvciBjb3JlLkJhc2UgdG8gZ2V0IGhhbmRsZWQgbGlrZSBzaW5nbGV0b25zIGZvciByZW1vdGUgbWV0aG9kIGFjY2Vzc1xuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBpc01haW5UaHJlYWRBZGRvbj10cnVlXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIGlzTWFpblRocmVhZEFkZG9uOiB0cnVlXG4gICAgfVxufVxuXG5OZW8uc2V0dXBDbGFzcyhCYXNlKTtcblxuZXhwb3J0IGRlZmF1bHQgQmFzZTtcbiIsImltcG9ydCBCYXNlIGZyb20gJy4vQmFzZS5tanMnO1xuXG4vKipcbiAqIEhlbHBlciBjbGFzcyB0byBpbmNsdWRlIEdvb2dsZSdzIE1hdGVyaWFsIFdlYiBDb21wb25lbnRzIGludG8geW91ciBuZW8ubWpzIGFwcFxuICogaHR0cHM6Ly93d3cuYW1jaGFydHMuY29tL2RvY3MvdjQvXG4gKiBAY2xhc3MgTmVvLm1haW4uYWRkb24uUHJlZml4RmllbGRcbiAqIEBleHRlbmRzIE5lby5tYWluLmFkZG9uLkJhc2VcbiAqL1xuY2xhc3MgUHJlZml4RmllbGQgZXh0ZW5kcyBCYXNlIHtcbiAgICBzdGF0aWMgY29uZmlnID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBjbGFzc05hbWU9J05lby5tYWluLmFkZG9uLlByZWZpeEZpZWxkJ1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBjbGFzc05hbWU6ICdOZW8ubWFpbi5hZGRvbi5QcmVmaXhGaWVsZCcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiByZWdleCB0byBjYWxjdWxhdGUgaWYgZW50ZXJlZCB2YWx1ZSBpcyBhY2NlcHRhYmxlXG4gICAgICAgICAqIFByZXNldCB0byBudW1iZXJzIG9ubHlcbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7cmVnZXh8bnVsbH0gYWNjZXB0XG4gICAgICAgICAqL1xuICAgICAgICBhY2NlcHRfOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBwYXR0ZXJuPW51bGxcbiAgICAgICAgICovXG4gICAgICAgIHBhdHRlcm5fOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgICogUmVtb3RlIG1ldGhvZCBhY2Nlc3MgZm9yIG90aGVyIHdvcmtlcnNcbiAgICAgICAgICogQG1lbWJlciB7T2JqZWN0fSByZW1vdGVcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgcmVtb3RlOiB7XG4gICAgICAgICAgICBhcHA6IFtcbiAgICAgICAgICAgICAgICAnaW5pdGlhbGl6ZScsXG4gICAgICAgICAgICAgICAgJ2Rlc3Ryb3knLFxuICAgICAgICAgICAgICAgICd1cGRhdGVBY2NlcHQnLFxuICAgICAgICAgICAgICAgICd1cGRhdGVQYXR0ZXJuJyxcbiAgICAgICAgICAgICAgICAndXBkYXRlU2xvdHMnLFxuICAgICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogT25seSBhZGQgYSBTdHJpbmcuIEEgU2V0IHdpbGwgYmUgYXV0b21hdGljYWxseSBjcmVhdGVkXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ3xTZXR8bnVsbH0gc2xvdHM9bnVsbFxuICAgICAgICAgKi9cbiAgICAgICAgc2xvdHNfOiBudWxsXG4gICAgfVxuXG4gICAgZWxJZHMgPSBuZXcgTWFwKClcblxuICAgIHByZXZcblxuICAgIGJhY2sgPSBmYWxzZVxuXG4gICAgZGVzdHJveSgpIHtcblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YS5lbElkXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGEucGF0dGVyblxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLnNsb3RzXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGEuYWNjZXB0XG4gICAgICovXG4gICAgaW5pdGlhbGl6ZShkYXRhKSB7XG4gICAgICAgIGNvbnN0IG1lID0gdGhpcztcblxuICAgICAgICBtZS5lbElkICAgICA9IGRhdGEuZWxJZDtcblxuICAgICAgICBjb25zdCBlbCAgICAgID0gbWUuZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChkYXRhLmVsSWQpLFxuICAgICAgICAgICAgICBwYXR0ZXJuID0gbWUucGF0dGVybiA9IGRhdGEucGF0dGVybixcbiAgICAgICAgICAgICAgc2xvdHMgPSBtZS5zbG90cyA9IG5ldyBTZXQoZGF0YS5zbG90cyB8fCBcIl9cIik7XG5cbiAgICAgICAgbWUuYWNjZXB0ID0gZGF0YS5hY2NlcHQ7XG4gICAgICAgIG1lLnByZXYgICA9IChqID0+IEFycmF5LmZyb20ocGF0dGVybiwgKGMsIGkpID0+IHNsb3RzLmhhcyhjKSA/IGogPSBpICsgMSA6IGopKSgwKTtcbiAgICAgICAgbWUuZmlyc3QgID0gWy4uLnBhdHRlcm5dLmZpbmRJbmRleChjID0+IHNsb3RzLmhhcyhjKSk7XG5cbiAgICAgICAgbWUuYWRkTGlzdGVuZXJzKCk7XG4gICAgICAgIG1lLmFkZENzcygpO1xuICAgIH1cblxuICAgIGFkZENzcygpIHtcbiAgICAgICAgdGhpcy5lbC5jbGFzc0xpc3QuYWRkKCd0aW55LXByZWZpeC1maWVsZC1pbnB1dCcpO1xuICAgIH1cblxuICAgIGFkZExpc3RlbmVycygpIHtcbiAgICAgICAgY29uc3QgbWUgICAgICAgPSB0aGlzLFxuICAgICAgICAgICAgICBlbCAgICAgICA9IG1lLmVsLFxuICAgICAgICAgICAgICBmb3JtYXRGbiA9IG1lLmZvcm1hdC5iaW5kKG1lKTtcblxuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKFwia2V5cHJlc3NcIiwgbWUub25LZXlEb3duLmJpbmQobWUpKTtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIGZvcm1hdEZuKTtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzaW5cIiwgZm9ybWF0Rm4pO1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNvdXRcIiwgbWUub25CbHVyLmJpbmQobWUpKTtcbiAgICB9XG5cbiAgICBvbkJsdXIoKSB7XG4gICAgICAgIGNvbnN0IHBhdHRlcm4gPSB0aGlzLnBhdHRlcm4sXG4gICAgICAgICAgICAgIGVsICAgICAgPSB0aGlzLmVsO1xuXG4gICAgICAgIHJldHVybiBlbC52YWx1ZSA9PT0gcGF0dGVybiAmJiAoZWwudmFsdWUgPSBcIlwiKTtcbiAgICB9XG5cbiAgICBvbktleURvd24oZXZlbnQpIHtcbiAgICAgICAgdGhpcy5iYWNrID0gKGV2ZW50LmtleSA9PT0gXCJCYWNrc3BhY2VcIik7XG4gICAgfVxuXG4gICAgY2xlYW4oaW5wdXQpIHtcbiAgICAgICAgY29uc3QgZWwgICAgICA9IHRoaXMuZWwsXG4gICAgICAgICAgICAgIGFjY2VwdCAgPSBuZXcgUmVnRXhwKHRoaXMuYWNjZXB0IHx8IFwiXFxcXGRcIiwgXCJnXCIpLFxuICAgICAgICAgICAgICBwYXR0ZXJuID0gdGhpcy5wYXR0ZXJuLFxuICAgICAgICAgICAgICBzbG90cyAgID0gdGhpcy5zbG90cztcblxuICAgICAgICBpbnB1dCA9IGlucHV0Lm1hdGNoKGFjY2VwdCkgfHwgW107XG5cbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20ocGF0dGVybiwgYyA9PlxuICAgICAgICAgICAgaW5wdXRbMF0gPT09IGMgfHwgc2xvdHMuaGFzKGMpID8gaW5wdXQuc2hpZnQoKSB8fCBjIDogY1xuICAgICAgICApO1xuICAgIH1cblxuICAgIGZvcm1hdCgpIHtcbiAgICAgICAgY29uc3QgbWUgICAgPSB0aGlzLFxuICAgICAgICAgICAgICBlbCAgICA9IHRoaXMuZWwsXG4gICAgICAgICAgICAgIHByZXYgID0gdGhpcy5wcmV2LFxuICAgICAgICAgICAgICBjbGVhbiA9IHRoaXMuY2xlYW4uYmluZCh0aGlzKTtcbiAgICAgICAgY29uc29sZS5sb2coZWwuc2VsZWN0aW9uU3RhcnQsIGVsLnNlbGVjdGlvbkVuZCk7XG4gICAgICAgIGNvbnN0IFtpLCBqXSA9IFtlbC5zZWxlY3Rpb25TdGFydCwgZWwuc2VsZWN0aW9uRW5kXS5tYXAoaSA9PiB7XG4gICAgICAgICAgICBpID0gY2xlYW4oZWwudmFsdWUuc2xpY2UoMCwgaSkpLmZpbmRJbmRleChjID0+IG1lLnNsb3RzLmhhcyhjKSk7XG4gICAgICAgICAgICByZXR1cm4gaSA8IDAgPyBwcmV2W3ByZXYubGVuZ3RoIC0gMV0gOiBtZS5iYWNrID8gcHJldltpIC0gMV0gfHwgbWUuZmlyc3QgOiBpO1xuICAgICAgICB9KTtcblxuICAgICAgICBlbC52YWx1ZSA9IGNsZWFuKGVsLnZhbHVlKS5qb2luYGA7XG4gICAgICAgIGVsLnNldFNlbGVjdGlvblJhbmdlKGksIGopO1xuXG4gICAgICAgIHRoaXMuYmFjayA9IGZhbHNlO1xuICAgIH1cbn1cblxuTmVvLnNldHVwQ2xhc3MoUHJlZml4RmllbGQpO1xuXG5leHBvcnQgZGVmYXVsdCBQcmVmaXhGaWVsZDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==