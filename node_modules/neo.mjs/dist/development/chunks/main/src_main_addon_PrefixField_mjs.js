"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["src_main_addon_PrefixField_mjs"],{

/***/ "./src/main/addon/PrefixField.mjs":
/*!****************************************!*\
  !*** ./src/main/addon/PrefixField.mjs ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/Base.mjs */ "./src/core/Base.mjs");


/**
 * Helper class to include Google's Material Web Components into your neo.mjs app
 * https://www.amcharts.com/docs/v4/
 * @class Neo.main.addon.PrefixField
 * @extends Neo.core.Base
 * @singleton
 */
class PrefixField extends _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.main.addon.PrefixField'
         * @protected
         */
        className: 'Neo.main.addon.PrefixField',
        /**
         * @member {Boolean} singleton=true
         * @protected
         */
        singleton: true,
        /**
         * Remote method access for other workers
         * @member {Object} remote
         * @protected
         */
        remote: {
            app: [
                'initialize',
                'destroy',
                'updateAccept',
                'updatePattern',
                'updateSlots',
            ]
        },

        /**
         * regex to calculate if entered value is acceptable
         * Preset to numbers only
         *
         * @member {regex|null} accept
         */
        accept_: null,
        /**
         * @member {String} pattern=null
         */
        pattern_: null,
        /**
         * Only add a String. A Set will be automatically created
         * @member {String|Set|null} slots=null
         */
        slots_: null
    }

    destroy() {

    }

    elIds = new Map();

    prev;

    back = false;

    /**
     *
     * @param {Object} data
     * @param {String} data.elId
     * @param {String} data.pattern
     * @param {String} data.slots
     * @param {String} data.accept
     */
    initialize(data) {
        const me = this;

        me.elId     = data.elId;

        const el      = me.el = document.getElementById(data.elId),
              pattern = me.pattern = data.pattern,
              slots = me.slots = new Set(data.slots || "_");

        me.accept = data.accept;
        me.prev   = (j => Array.from(pattern, (c, i) => slots.has(c) ? j = i + 1 : j))(0);
        me.first  = [...pattern].findIndex(c => slots.has(c));

        me.addListeners();
        me.addCss();
    }

    addCss() {
        this.el.classList.add('tiny-prefix-field-input');
    }

    addListeners() {
        const me       = this,
              el       = me.el,
              formatFn = me.format.bind(me);

        el.addEventListener("keypress", me.onKeyDown.bind(me));
        el.addEventListener("input", formatFn);
        el.addEventListener("focusin", formatFn);
        el.addEventListener("focusout", me.onBlur.bind(me));
    }

    onBlur() {
        const pattern = this.pattern,
              el      = this.el;

        return el.value === pattern && (el.value = "");
    }

    onKeyDown(event) {
        this.back = (event.key === "Backspace");
    }

    clean(input) {
        const el      = this.el,
              accept  = new RegExp(this.accept || "\\d", "g"),
              pattern = this.pattern,
              slots   = this.slots;

        input = input.match(accept) || [];

        return Array.from(pattern, c =>
            input[0] === c || slots.has(c) ? input.shift() || c : c
        );
    }

    format() {
        const me    = this,
              el    = this.el,
              prev  = this.prev,
              clean = this.clean.bind(this);
        console.log(el.selectionStart, el.selectionEnd);
        const [i, j] = [el.selectionStart, el.selectionEnd].map(i => {
            i = clean(el.value.slice(0, i)).findIndex(c => me.slots.has(c));
            return i < 0 ? prev[prev.length - 1] : me.back ? prev[i - 1] || me.first : i;
        });

        el.value = clean(el.value).join``;
        el.setSelectionRange(i, j);

        this.back = false;
    }
}

let instance = Neo.applyClassConfig(PrefixField);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (instance);


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmtzL21haW4vc3JjX21haW5fYWRkb25fUHJlZml4RmllbGRfbWpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQXVDOztBQUV2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixzREFBSTtBQUM5QjtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFlBQVk7QUFDaEM7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsaUJBQWlCO0FBQ3JDO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxpRUFBZSxRQUFRLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZW8ubWpzLy4vc3JjL21haW4vYWRkb24vUHJlZml4RmllbGQubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCYXNlIGZyb20gJy4uLy4uL2NvcmUvQmFzZS5tanMnO1xuXG4vKipcbiAqIEhlbHBlciBjbGFzcyB0byBpbmNsdWRlIEdvb2dsZSdzIE1hdGVyaWFsIFdlYiBDb21wb25lbnRzIGludG8geW91ciBuZW8ubWpzIGFwcFxuICogaHR0cHM6Ly93d3cuYW1jaGFydHMuY29tL2RvY3MvdjQvXG4gKiBAY2xhc3MgTmVvLm1haW4uYWRkb24uUHJlZml4RmllbGRcbiAqIEBleHRlbmRzIE5lby5jb3JlLkJhc2VcbiAqIEBzaW5nbGV0b25cbiAqL1xuY2xhc3MgUHJlZml4RmllbGQgZXh0ZW5kcyBCYXNlIHtcbiAgICBzdGF0aWMgY29uZmlnID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBjbGFzc05hbWU9J05lby5tYWluLmFkZG9uLlByZWZpeEZpZWxkJ1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBjbGFzc05hbWU6ICdOZW8ubWFpbi5hZGRvbi5QcmVmaXhGaWVsZCcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBzaW5nbGV0b249dHJ1ZVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBzaW5nbGV0b246IHRydWUsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZW1vdGUgbWV0aG9kIGFjY2VzcyBmb3Igb3RoZXIgd29ya2Vyc1xuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3R9IHJlbW90ZVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICByZW1vdGU6IHtcbiAgICAgICAgICAgIGFwcDogW1xuICAgICAgICAgICAgICAgICdpbml0aWFsaXplJyxcbiAgICAgICAgICAgICAgICAnZGVzdHJveScsXG4gICAgICAgICAgICAgICAgJ3VwZGF0ZUFjY2VwdCcsXG4gICAgICAgICAgICAgICAgJ3VwZGF0ZVBhdHRlcm4nLFxuICAgICAgICAgICAgICAgICd1cGRhdGVTbG90cycsXG4gICAgICAgICAgICBdXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHJlZ2V4IHRvIGNhbGN1bGF0ZSBpZiBlbnRlcmVkIHZhbHVlIGlzIGFjY2VwdGFibGVcbiAgICAgICAgICogUHJlc2V0IHRvIG51bWJlcnMgb25seVxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtyZWdleHxudWxsfSBhY2NlcHRcbiAgICAgICAgICovXG4gICAgICAgIGFjY2VwdF86IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IHBhdHRlcm49bnVsbFxuICAgICAgICAgKi9cbiAgICAgICAgcGF0dGVybl86IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBPbmx5IGFkZCBhIFN0cmluZy4gQSBTZXQgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGNyZWF0ZWRcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfFNldHxudWxsfSBzbG90cz1udWxsXG4gICAgICAgICAqL1xuICAgICAgICBzbG90c186IG51bGxcbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuXG4gICAgfVxuXG4gICAgZWxJZHMgPSBuZXcgTWFwKCk7XG5cbiAgICBwcmV2O1xuXG4gICAgYmFjayA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLmVsSWRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YS5wYXR0ZXJuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGEuc2xvdHNcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YS5hY2NlcHRcbiAgICAgKi9cbiAgICBpbml0aWFsaXplKGRhdGEpIHtcbiAgICAgICAgY29uc3QgbWUgPSB0aGlzO1xuXG4gICAgICAgIG1lLmVsSWQgICAgID0gZGF0YS5lbElkO1xuXG4gICAgICAgIGNvbnN0IGVsICAgICAgPSBtZS5lbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRhdGEuZWxJZCksXG4gICAgICAgICAgICAgIHBhdHRlcm4gPSBtZS5wYXR0ZXJuID0gZGF0YS5wYXR0ZXJuLFxuICAgICAgICAgICAgICBzbG90cyA9IG1lLnNsb3RzID0gbmV3IFNldChkYXRhLnNsb3RzIHx8IFwiX1wiKTtcblxuICAgICAgICBtZS5hY2NlcHQgPSBkYXRhLmFjY2VwdDtcbiAgICAgICAgbWUucHJldiAgID0gKGogPT4gQXJyYXkuZnJvbShwYXR0ZXJuLCAoYywgaSkgPT4gc2xvdHMuaGFzKGMpID8gaiA9IGkgKyAxIDogaikpKDApO1xuICAgICAgICBtZS5maXJzdCAgPSBbLi4ucGF0dGVybl0uZmluZEluZGV4KGMgPT4gc2xvdHMuaGFzKGMpKTtcblxuICAgICAgICBtZS5hZGRMaXN0ZW5lcnMoKTtcbiAgICAgICAgbWUuYWRkQ3NzKCk7XG4gICAgfVxuXG4gICAgYWRkQ3NzKCkge1xuICAgICAgICB0aGlzLmVsLmNsYXNzTGlzdC5hZGQoJ3RpbnktcHJlZml4LWZpZWxkLWlucHV0Jyk7XG4gICAgfVxuXG4gICAgYWRkTGlzdGVuZXJzKCkge1xuICAgICAgICBjb25zdCBtZSAgICAgICA9IHRoaXMsXG4gICAgICAgICAgICAgIGVsICAgICAgID0gbWUuZWwsXG4gICAgICAgICAgICAgIGZvcm1hdEZuID0gbWUuZm9ybWF0LmJpbmQobWUpO1xuXG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlwcmVzc1wiLCBtZS5vbktleURvd24uYmluZChtZSkpO1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgZm9ybWF0Rm4pO1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNpblwiLCBmb3JtYXRGbik7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c291dFwiLCBtZS5vbkJsdXIuYmluZChtZSkpO1xuICAgIH1cblxuICAgIG9uQmx1cigpIHtcbiAgICAgICAgY29uc3QgcGF0dGVybiA9IHRoaXMucGF0dGVybixcbiAgICAgICAgICAgICAgZWwgICAgICA9IHRoaXMuZWw7XG5cbiAgICAgICAgcmV0dXJuIGVsLnZhbHVlID09PSBwYXR0ZXJuICYmIChlbC52YWx1ZSA9IFwiXCIpO1xuICAgIH1cblxuICAgIG9uS2V5RG93bihldmVudCkge1xuICAgICAgICB0aGlzLmJhY2sgPSAoZXZlbnQua2V5ID09PSBcIkJhY2tzcGFjZVwiKTtcbiAgICB9XG5cbiAgICBjbGVhbihpbnB1dCkge1xuICAgICAgICBjb25zdCBlbCAgICAgID0gdGhpcy5lbCxcbiAgICAgICAgICAgICAgYWNjZXB0ICA9IG5ldyBSZWdFeHAodGhpcy5hY2NlcHQgfHwgXCJcXFxcZFwiLCBcImdcIiksXG4gICAgICAgICAgICAgIHBhdHRlcm4gPSB0aGlzLnBhdHRlcm4sXG4gICAgICAgICAgICAgIHNsb3RzICAgPSB0aGlzLnNsb3RzO1xuXG4gICAgICAgIGlucHV0ID0gaW5wdXQubWF0Y2goYWNjZXB0KSB8fCBbXTtcblxuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShwYXR0ZXJuLCBjID0+XG4gICAgICAgICAgICBpbnB1dFswXSA9PT0gYyB8fCBzbG90cy5oYXMoYykgPyBpbnB1dC5zaGlmdCgpIHx8IGMgOiBjXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZm9ybWF0KCkge1xuICAgICAgICBjb25zdCBtZSAgICA9IHRoaXMsXG4gICAgICAgICAgICAgIGVsICAgID0gdGhpcy5lbCxcbiAgICAgICAgICAgICAgcHJldiAgPSB0aGlzLnByZXYsXG4gICAgICAgICAgICAgIGNsZWFuID0gdGhpcy5jbGVhbi5iaW5kKHRoaXMpO1xuICAgICAgICBjb25zb2xlLmxvZyhlbC5zZWxlY3Rpb25TdGFydCwgZWwuc2VsZWN0aW9uRW5kKTtcbiAgICAgICAgY29uc3QgW2ksIGpdID0gW2VsLnNlbGVjdGlvblN0YXJ0LCBlbC5zZWxlY3Rpb25FbmRdLm1hcChpID0+IHtcbiAgICAgICAgICAgIGkgPSBjbGVhbihlbC52YWx1ZS5zbGljZSgwLCBpKSkuZmluZEluZGV4KGMgPT4gbWUuc2xvdHMuaGFzKGMpKTtcbiAgICAgICAgICAgIHJldHVybiBpIDwgMCA/IHByZXZbcHJldi5sZW5ndGggLSAxXSA6IG1lLmJhY2sgPyBwcmV2W2kgLSAxXSB8fCBtZS5maXJzdCA6IGk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGVsLnZhbHVlID0gY2xlYW4oZWwudmFsdWUpLmpvaW5gYDtcbiAgICAgICAgZWwuc2V0U2VsZWN0aW9uUmFuZ2UoaSwgaik7XG5cbiAgICAgICAgdGhpcy5iYWNrID0gZmFsc2U7XG4gICAgfVxufVxuXG5sZXQgaW5zdGFuY2UgPSBOZW8uYXBwbHlDbGFzc0NvbmZpZyhQcmVmaXhGaWVsZCk7XG5cbmV4cG9ydCBkZWZhdWx0IGluc3RhbmNlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9