"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["src_main_addon_ServiceWorker_mjs"],{

/***/ "./src/main/addon/Base.mjs":
/*!*********************************!*\
  !*** ./src/main/addon/Base.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/Base.mjs */ "./src/core/Base.mjs");


/**
 * Base class for main thread addons
 * @class Neo.main.addon.Base
 * @extends Neo.core.Base
 */
class Base extends _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.main.addon.Base'
         * @protected
         */
        className: 'Neo.main.addon.Base',
        /**
         * An identifier for core.Base to get handled like singletons for remote method access
         * @member {Boolean} isMainThreadAddon=true
         * @protected
         */
        isMainThreadAddon: true
    }
}

Neo.setupClass(Base);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Base);


/***/ }),

/***/ "./src/main/addon/ServiceWorker.mjs":
/*!******************************************!*\
  !*** ./src/main/addon/ServiceWorker.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Base.mjs */ "./src/main/addon/Base.mjs");
/* harmony import */ var _worker_Manager_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../worker/Manager.mjs */ "./src/worker/Manager.mjs");



/**
 * Creates a ServiceWorker instance, in case Neo.config.useServiceWorker is set to true
 * @class Neo.main.addon.ServiceWorker
 * @extends Neo.main.addon.Base
 */
class ServiceWorker extends _Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.main.addon.ServiceWorker'
         * @protected
         */
        className: 'Neo.main.addon.ServiceWorker'
    }

    /**
     * @param {Object} config
     */
    construct(config) {
        if ('serviceWorker' in navigator) {
            let me              = this,
                {config}        = Neo,
                devMode         = config.environment === 'development',
                fileName        = devMode ? 'ServiceWorker.mjs' : 'serviceworker.js',
                folder          = window.location.pathname.includes('/examples/') ? 'examples/' : 'apps/',
                opts            = devMode ? {type: 'module'} : {},
                path            = (devMode ? config.basePath : config.workerBasePath) + (devMode ? folder : '') + fileName,
                {serviceWorker} = navigator;

            window.addEventListener('beforeunload', me.onBeforeUnload.bind(me));

            serviceWorker.register(path, opts)
                .then(registration => {
                    serviceWorker.ready.then(() => {
                        serviceWorker.onmessage = _worker_Manager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].onWorkerMessage.bind(_worker_Manager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"]);

                        if (!_worker_Manager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].getWorker('service')) {
                            /*
                             * navigator.serviceWorker.controller can be null in case we load a page for the first time
                             * or in case of a force refresh.
                             * See: https://www.w3.org/TR/service-workers/#navigator-service-worker-controller
                             */
                            _worker_Manager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].serviceWorker = registration.active;
                        }

                        _worker_Manager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].sendMessage('service', {
                            action: 'registerNeoConfig',
                            data  : config
                        })
                    })
                })
        }
    }

    /**
     *
     */
    onBeforeUnload() {
        _worker_Manager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].sendMessage('service', {
            action: 'unregisterPort'
        });
    }
}

Neo.setupClass(ServiceWorker);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ServiceWorker);


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmtzL21haW4vc3JjX21haW5fYWRkb25fU2VydmljZVdvcmtlcl9tanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBMkM7O0FBRTNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsc0RBQVE7QUFDM0I7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLGlFQUFlLElBQUksRUFBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN6Qm1CO0FBQ2M7O0FBRXJEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsaURBQUk7QUFDaEM7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGVBQWU7QUFDaEM7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLGdCQUFnQixJQUFJO0FBQ2pFO0FBQ0EsaUJBQWlCLGVBQWU7O0FBRWhDOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCwyREFBYSxzQkFBc0IsMkRBQWE7O0FBRWxHLDZCQUE2QiwyREFBYTtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDJEQUFhO0FBQ3pDOztBQUVBLHdCQUF3QiwyREFBYTtBQUNyQztBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLHFCQUFxQjtBQUNyQixpQkFBaUI7QUFDakI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsMkRBQWE7QUFDckI7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTs7QUFFQSxpRUFBZSxhQUFhLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZW8ubWpzLy4vc3JjL21haW4vYWRkb24vQmFzZS5tanMiLCJ3ZWJwYWNrOi8vbmVvLm1qcy8uL3NyYy9tYWluL2FkZG9uL1NlcnZpY2VXb3JrZXIubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb3JlQmFzZSBmcm9tICcuLi8uLi9jb3JlL0Jhc2UubWpzJztcblxuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBtYWluIHRocmVhZCBhZGRvbnNcbiAqIEBjbGFzcyBOZW8ubWFpbi5hZGRvbi5CYXNlXG4gKiBAZXh0ZW5kcyBOZW8uY29yZS5CYXNlXG4gKi9cbmNsYXNzIEJhc2UgZXh0ZW5kcyBDb3JlQmFzZSB7XG4gICAgc3RhdGljIGNvbmZpZyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gY2xhc3NOYW1lPSdOZW8ubWFpbi5hZGRvbi5CYXNlJ1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBjbGFzc05hbWU6ICdOZW8ubWFpbi5hZGRvbi5CYXNlJyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIGlkZW50aWZpZXIgZm9yIGNvcmUuQmFzZSB0byBnZXQgaGFuZGxlZCBsaWtlIHNpbmdsZXRvbnMgZm9yIHJlbW90ZSBtZXRob2QgYWNjZXNzXG4gICAgICAgICAqIEBtZW1iZXIge0Jvb2xlYW59IGlzTWFpblRocmVhZEFkZG9uPXRydWVcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgaXNNYWluVGhyZWFkQWRkb246IHRydWVcbiAgICB9XG59XG5cbk5lby5zZXR1cENsYXNzKEJhc2UpO1xuXG5leHBvcnQgZGVmYXVsdCBCYXNlO1xuIiwiaW1wb3J0IEJhc2UgICAgICAgICAgZnJvbSAnLi9CYXNlLm1qcyc7XG5pbXBvcnQgV29ya2VyTWFuYWdlciBmcm9tICcuLi8uLi93b3JrZXIvTWFuYWdlci5tanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBTZXJ2aWNlV29ya2VyIGluc3RhbmNlLCBpbiBjYXNlIE5lby5jb25maWcudXNlU2VydmljZVdvcmtlciBpcyBzZXQgdG8gdHJ1ZVxuICogQGNsYXNzIE5lby5tYWluLmFkZG9uLlNlcnZpY2VXb3JrZXJcbiAqIEBleHRlbmRzIE5lby5tYWluLmFkZG9uLkJhc2VcbiAqL1xuY2xhc3MgU2VydmljZVdvcmtlciBleHRlbmRzIEJhc2Uge1xuICAgIHN0YXRpYyBjb25maWcgPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IGNsYXNzTmFtZT0nTmVvLm1haW4uYWRkb24uU2VydmljZVdvcmtlcidcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgY2xhc3NOYW1lOiAnTmVvLm1haW4uYWRkb24uU2VydmljZVdvcmtlcidcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXG4gICAgICovXG4gICAgY29uc3RydWN0KGNvbmZpZykge1xuICAgICAgICBpZiAoJ3NlcnZpY2VXb3JrZXInIGluIG5hdmlnYXRvcikge1xuICAgICAgICAgICAgbGV0IG1lICAgICAgICAgICAgICA9IHRoaXMsXG4gICAgICAgICAgICAgICAge2NvbmZpZ30gICAgICAgID0gTmVvLFxuICAgICAgICAgICAgICAgIGRldk1vZGUgICAgICAgICA9IGNvbmZpZy5lbnZpcm9ubWVudCA9PT0gJ2RldmVsb3BtZW50JyxcbiAgICAgICAgICAgICAgICBmaWxlTmFtZSAgICAgICAgPSBkZXZNb2RlID8gJ1NlcnZpY2VXb3JrZXIubWpzJyA6ICdzZXJ2aWNld29ya2VyLmpzJyxcbiAgICAgICAgICAgICAgICBmb2xkZXIgICAgICAgICAgPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuaW5jbHVkZXMoJy9leGFtcGxlcy8nKSA/ICdleGFtcGxlcy8nIDogJ2FwcHMvJyxcbiAgICAgICAgICAgICAgICBvcHRzICAgICAgICAgICAgPSBkZXZNb2RlID8ge3R5cGU6ICdtb2R1bGUnfSA6IHt9LFxuICAgICAgICAgICAgICAgIHBhdGggICAgICAgICAgICA9IChkZXZNb2RlID8gY29uZmlnLmJhc2VQYXRoIDogY29uZmlnLndvcmtlckJhc2VQYXRoKSArIChkZXZNb2RlID8gZm9sZGVyIDogJycpICsgZmlsZU5hbWUsXG4gICAgICAgICAgICAgICAge3NlcnZpY2VXb3JrZXJ9ID0gbmF2aWdhdG9yO1xuXG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgbWUub25CZWZvcmVVbmxvYWQuYmluZChtZSkpO1xuXG4gICAgICAgICAgICBzZXJ2aWNlV29ya2VyLnJlZ2lzdGVyKHBhdGgsIG9wdHMpXG4gICAgICAgICAgICAgICAgLnRoZW4ocmVnaXN0cmF0aW9uID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2VydmljZVdvcmtlci5yZWFkeS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VXb3JrZXIub25tZXNzYWdlID0gV29ya2VyTWFuYWdlci5vbldvcmtlck1lc3NhZ2UuYmluZChXb3JrZXJNYW5hZ2VyKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFXb3JrZXJNYW5hZ2VyLmdldFdvcmtlcignc2VydmljZScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5jb250cm9sbGVyIGNhbiBiZSBudWxsIGluIGNhc2Ugd2UgbG9hZCBhIHBhZ2UgZm9yIHRoZSBmaXJzdCB0aW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICogb3IgaW4gY2FzZSBvZiBhIGZvcmNlIHJlZnJlc2guXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICogU2VlOiBodHRwczovL3d3dy53My5vcmcvVFIvc2VydmljZS13b3JrZXJzLyNuYXZpZ2F0b3Itc2VydmljZS13b3JrZXItY29udHJvbGxlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdvcmtlck1hbmFnZXIuc2VydmljZVdvcmtlciA9IHJlZ2lzdHJhdGlvbi5hY3RpdmU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIFdvcmtlck1hbmFnZXIuc2VuZE1lc3NhZ2UoJ3NlcnZpY2UnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAncmVnaXN0ZXJOZW9Db25maWcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgIDogY29uZmlnXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIG9uQmVmb3JlVW5sb2FkKCkge1xuICAgICAgICBXb3JrZXJNYW5hZ2VyLnNlbmRNZXNzYWdlKCdzZXJ2aWNlJywge1xuICAgICAgICAgICAgYWN0aW9uOiAndW5yZWdpc3RlclBvcnQnXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuTmVvLnNldHVwQ2xhc3MoU2VydmljZVdvcmtlcik7XG5cbmV4cG9ydCBkZWZhdWx0IFNlcnZpY2VXb3JrZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=