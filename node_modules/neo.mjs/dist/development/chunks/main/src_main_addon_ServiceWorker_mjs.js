"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["src_main_addon_ServiceWorker_mjs"],{

/***/ "./src/main/addon/ServiceWorker.mjs":
/*!******************************************!*\
  !*** ./src/main/addon/ServiceWorker.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/Base.mjs */ "./src/core/Base.mjs");
/* harmony import */ var _worker_Manager_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../worker/Manager.mjs */ "./src/worker/Manager.mjs");



/**
 * Creates a ServiceWorker instance, in case Neo.config.useServiceWorker is set to true
 * @class Neo.main.addon.ServiceWorker
 * @extends Neo.core.Base
 * @singleton
 */
class ServiceWorker extends _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.main.addon.ServiceWorker'
         * @protected
         */
        className: 'Neo.main.addon.ServiceWorker',
        /**
         * @member {Boolean} singleton=true
         * @protected
         */
        singleton: true
    }

    /**
     * @param {Object} config
     */
    construct(config) {
        if ('serviceWorker' in navigator) {
            let me            = this,
                config        = Neo.config,
                devMode       = config.environment === 'development',
                fileName      = devMode ? 'ServiceWorker.mjs' : 'serviceworker.js',
                folder        = window.location.pathname.includes('/examples/') ? 'examples/' : 'apps/',
                opts          = devMode ? {type: 'module'} : {},
                path          = (devMode ? config.basePath : config.workerBasePath) + (devMode ? folder : '') + fileName,
                serviceWorker = navigator.serviceWorker;

            window.addEventListener('beforeunload', me.onBeforeUnload.bind(me));

            serviceWorker.register(path, opts)
                .then(registration => {
                    serviceWorker.ready.then(() => {
                        serviceWorker.onmessage = _worker_Manager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].onWorkerMessage.bind(_worker_Manager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"]);

                        if (!_worker_Manager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].getWorker('service')) {
                            /*
                             * navigator.serviceWorker.controller can be null in case we load a page for the first time
                             * or in case of a force refresh.
                             * See: https://www.w3.org/TR/service-workers/#navigator-service-worker-controller
                             */
                            _worker_Manager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].serviceWorker = registration.active;
                        }

                        _worker_Manager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].sendMessage('service', {
                            action: 'registerNeoConfig',
                            data  : config
                        })
                    });
                })
        }
    }

    /**
     *
     */
    onBeforeUnload() {
        _worker_Manager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].sendMessage('service', {
            action: 'unregisterPort'
        });
    }
}

let instance = Neo.applyClassConfig(ServiceWorker);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (instance);


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmtzL21haW4vc3JjX21haW5fYWRkb25fU2VydmljZVdvcmtlcl9tanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQWdEO0FBQ0s7O0FBRXJEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixzREFBSTtBQUNoQztBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLGdCQUFnQixJQUFJO0FBQy9EO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELDJEQUFhLHNCQUFzQiwyREFBYTs7QUFFbEcsNkJBQTZCLDJEQUFhO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsMkRBQWE7QUFDekM7O0FBRUEsd0JBQXdCLDJEQUFhO0FBQ3JDO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUNqQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSwyREFBYTtBQUNyQjtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBOztBQUVBLGlFQUFlLFFBQVEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL25lby5tanMvLi9zcmMvbWFpbi9hZGRvbi9TZXJ2aWNlV29ya2VyLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQmFzZSAgICAgICAgICBmcm9tICcuLi8uLi9jb3JlL0Jhc2UubWpzJztcbmltcG9ydCBXb3JrZXJNYW5hZ2VyIGZyb20gJy4uLy4uL3dvcmtlci9NYW5hZ2VyLm1qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIFNlcnZpY2VXb3JrZXIgaW5zdGFuY2UsIGluIGNhc2UgTmVvLmNvbmZpZy51c2VTZXJ2aWNlV29ya2VyIGlzIHNldCB0byB0cnVlXG4gKiBAY2xhc3MgTmVvLm1haW4uYWRkb24uU2VydmljZVdvcmtlclxuICogQGV4dGVuZHMgTmVvLmNvcmUuQmFzZVxuICogQHNpbmdsZXRvblxuICovXG5jbGFzcyBTZXJ2aWNlV29ya2VyIGV4dGVuZHMgQmFzZSB7XG4gICAgc3RhdGljIGNvbmZpZyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gY2xhc3NOYW1lPSdOZW8ubWFpbi5hZGRvbi5TZXJ2aWNlV29ya2VyJ1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBjbGFzc05hbWU6ICdOZW8ubWFpbi5hZGRvbi5TZXJ2aWNlV29ya2VyJyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge0Jvb2xlYW59IHNpbmdsZXRvbj10cnVlXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIHNpbmdsZXRvbjogdHJ1ZVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3QoY29uZmlnKSB7XG4gICAgICAgIGlmICgnc2VydmljZVdvcmtlcicgaW4gbmF2aWdhdG9yKSB7XG4gICAgICAgICAgICBsZXQgbWUgICAgICAgICAgICA9IHRoaXMsXG4gICAgICAgICAgICAgICAgY29uZmlnICAgICAgICA9IE5lby5jb25maWcsXG4gICAgICAgICAgICAgICAgZGV2TW9kZSAgICAgICA9IGNvbmZpZy5lbnZpcm9ubWVudCA9PT0gJ2RldmVsb3BtZW50JyxcbiAgICAgICAgICAgICAgICBmaWxlTmFtZSAgICAgID0gZGV2TW9kZSA/ICdTZXJ2aWNlV29ya2VyLm1qcycgOiAnc2VydmljZXdvcmtlci5qcycsXG4gICAgICAgICAgICAgICAgZm9sZGVyICAgICAgICA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5pbmNsdWRlcygnL2V4YW1wbGVzLycpID8gJ2V4YW1wbGVzLycgOiAnYXBwcy8nLFxuICAgICAgICAgICAgICAgIG9wdHMgICAgICAgICAgPSBkZXZNb2RlID8ge3R5cGU6ICdtb2R1bGUnfSA6IHt9LFxuICAgICAgICAgICAgICAgIHBhdGggICAgICAgICAgPSAoZGV2TW9kZSA/IGNvbmZpZy5iYXNlUGF0aCA6IGNvbmZpZy53b3JrZXJCYXNlUGF0aCkgKyAoZGV2TW9kZSA/IGZvbGRlciA6ICcnKSArIGZpbGVOYW1lLFxuICAgICAgICAgICAgICAgIHNlcnZpY2VXb3JrZXIgPSBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlcjtcblxuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIG1lLm9uQmVmb3JlVW5sb2FkLmJpbmQobWUpKTtcblxuICAgICAgICAgICAgc2VydmljZVdvcmtlci5yZWdpc3RlcihwYXRoLCBvcHRzKVxuICAgICAgICAgICAgICAgIC50aGVuKHJlZ2lzdHJhdGlvbiA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNlcnZpY2VXb3JrZXIucmVhZHkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlV29ya2VyLm9ubWVzc2FnZSA9IFdvcmtlck1hbmFnZXIub25Xb3JrZXJNZXNzYWdlLmJpbmQoV29ya2VyTWFuYWdlcik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghV29ya2VyTWFuYWdlci5nZXRXb3JrZXIoJ3NlcnZpY2UnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICogbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIuY29udHJvbGxlciBjYW4gYmUgbnVsbCBpbiBjYXNlIHdlIGxvYWQgYSBwYWdlIGZvciB0aGUgZmlyc3QgdGltZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIG9yIGluIGNhc2Ugb2YgYSBmb3JjZSByZWZyZXNoLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIFNlZTogaHR0cHM6Ly93d3cudzMub3JnL1RSL3NlcnZpY2Utd29ya2Vycy8jbmF2aWdhdG9yLXNlcnZpY2Utd29ya2VyLWNvbnRyb2xsZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBXb3JrZXJNYW5hZ2VyLnNlcnZpY2VXb3JrZXIgPSByZWdpc3RyYXRpb24uYWN0aXZlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBXb3JrZXJNYW5hZ2VyLnNlbmRNZXNzYWdlKCdzZXJ2aWNlJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ3JlZ2lzdGVyTmVvQ29uZmlnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhICA6IGNvbmZpZ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgb25CZWZvcmVVbmxvYWQoKSB7XG4gICAgICAgIFdvcmtlck1hbmFnZXIuc2VuZE1lc3NhZ2UoJ3NlcnZpY2UnLCB7XG4gICAgICAgICAgICBhY3Rpb246ICd1bnJlZ2lzdGVyUG9ydCdcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5sZXQgaW5zdGFuY2UgPSBOZW8uYXBwbHlDbGFzc0NvbmZpZyhTZXJ2aWNlV29ya2VyKTtcblxuZXhwb3J0IGRlZmF1bHQgaW5zdGFuY2U7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=