"use strict";(self.webpackChunkneo_mjs=self.webpackChunkneo_mjs||[]).push([[666,96],{96:(e,t,s)=>{s.r(t),s.d(t,{default:()=>n});var a=s(162);class o extends a.A{static config={className:"Neo.main.addon.Base",isMainThreadAddon:!0}}Neo.setupClass(o);const n=o},666:(e,t,s)=>{s.r(t),s.d(t,{default:()=>r});var a=s(96),o=s(160);class n extends a.default{static config={className:"Neo.main.addon.IntersectionObserver",remote:{app:["disconnect","observe","register"]}};map={};disconnect(e){this.map[e.id]?.disconnect()}findTopmostItem(e,t){let s,a,n,r,d=this;e.forEach((e=>{r=e.target,s=r.dataset&&{...r.dataset}||null,a=o.A.getPathFromElement(e.target).map((e=>o.A.getTargetData(e))),n=r.getBoundingClientRect(),n.y<200&&(e.isIntersecting,d.sendMessage({data:s,id:t.rootId,isIntersecting:!0,path:a,targetId:r.id}))}))}observe(e){let t=document.querySelectorAll(e.observe),s=this.map[e.id];e.disconnect&&s.disconnect(),t.forEach((e=>{s.observe(e)}))}register(e){let t,s=this,a=e.observe&&document.querySelectorAll(e.observe);s.map[e.id]=t=new IntersectionObserver(s[e.callback].bind(s),{root:document.querySelector(e.root),rootMargin:e.rootMargin||"0px",threshold:e.threshold||0}),t.rootId=e.id,a?.forEach((e=>{t.observe(e)}))}sendMessage(e){Neo.worker.Manager.sendMessage("app",{action:"domEvent",eventName:"intersect",data:e})}}Neo.setupClass(n);const r=n}}]);