{"classData":[{"comment":"/**\n * @class Neo.util.Array\n * @extends Neo.core.Base\n */","meta":{"filename":"Array.mjs","lineno":3,"columnno":0,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/util","code":{}},"kind":"class","name":"Array","augments":["Neo.core.Base"],"memberof":"Neo.util","longname":"Neo.util.Array","scope":"static","$longname":"Neo.util.Array","$kind":"class","id":4568,"neoClassName":"Neo.util.Array"},{"comment":"/**\n         * @member {String} className='Neo.util.Array'\n         * @protected\n         */","meta":{"filename":"Array.mjs","lineno":13,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/util","code":{}},"kind":"member","name":"className","type":{"names":["String"]},"defaultvalue":"'Neo.util.Array'","access":"protected","longname":"className","scope":"global","$longname":"className","$kind":"property","id":4569,"neoClassName":"Neo.util.Array"},{"comment":"/**\n     * Adds an item or Array of items to an array in case it does not already exist.\n     * Only primitive items will get found as duplicates\n     * @param {Array} arr\n     * @param {*} items\n     */","meta":{"range":[505,761],"filename":"Array.mjs","lineno":22,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/util","code":{"id":"astnode100141993","name":"NeoArray.add","type":"MethodDefinition","paramnames":["arr","items"]},"vars":{"":null}},"description":"<p>Adds an item or Array of items to an array in case it does not already exist.\nOnly primitive items will get found as duplicates</p>\n","params":[{"type":{"names":["Array"]},"name":"arr"},{"type":{"names":["*"]},"name":"items"}],"name":"add","longname":"NeoArray.add","kind":"function","memberof":"NeoArray","scope":"static","$longname":"NeoArray.add","$kind":"method","id":4570,"neoClassName":"Neo.util.Array"},{"comment":"/**\n     * Returns an array of items which are present in array1, but not in array2\n     * @param {Array} array1=[]\n     * @param {Array} array2=[]\n     * @returns {Array}\n     */","meta":{"range":[951,1060],"filename":"Array.mjs","lineno":41,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/util","code":{"id":"astnode100142036","name":"NeoArray.difference","type":"MethodDefinition","paramnames":["array1","array2"]},"vars":{"":null}},"description":"<p>Returns an array of items which are present in array1, but not in array2</p>\n","params":[{"type":{"names":["Array"]},"defaultvalue":"[","name":"array1"},{"type":{"names":["Array"]},"defaultvalue":"[","name":"array2"}],"returns":[{"type":{"names":["Array"]}}],"name":"difference","longname":"NeoArray.difference","kind":"function","memberof":"NeoArray","scope":"static","$longname":"NeoArray.difference","$kind":"method","id":4571,"neoClassName":"Neo.util.Array"},{"comment":"/**\n     * Checks if the item is included by reference inside the array\n     * @param {Array} arr\n     * @param {*} item\n     */","meta":{"range":[1199,1267],"filename":"Array.mjs","lineno":50,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/util","code":{"id":"astnode100142059","name":"NeoArray.hasItem","type":"MethodDefinition","paramnames":["arr","item"]},"vars":{"":null}},"description":"<p>Checks if the item is included by reference inside the array</p>\n","params":[{"type":{"names":["Array"]},"name":"arr"},{"type":{"names":["*"]},"name":"item"}],"name":"hasItem","longname":"NeoArray.hasItem","kind":"function","memberof":"NeoArray","scope":"static","$longname":"NeoArray.hasItem","$kind":"method","id":4572,"neoClassName":"Neo.util.Array"},{"comment":"/**\n     * Returns an array of items which are present in array1 and array2\n     * Only supports primitive items\n     * @param {Array} array1=[]\n     * @param {Array} array2=[]\n     * @returns {Array}\n     */","meta":{"range":[1486,1596],"filename":"Array.mjs","lineno":61,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/util","code":{"id":"astnode100142071","name":"NeoArray.intersection","type":"MethodDefinition","paramnames":["array1","array2"]},"vars":{"":null}},"description":"<p>Returns an array of items which are present in array1 and array2\nOnly supports primitive items</p>\n","params":[{"type":{"names":["Array"]},"defaultvalue":"[","name":"array1"},{"type":{"names":["Array"]},"defaultvalue":"[","name":"array2"}],"returns":[{"type":{"names":["Array"]}}],"name":"intersection","longname":"NeoArray.intersection","kind":"function","memberof":"NeoArray","scope":"static","$longname":"NeoArray.intersection","$kind":"method","id":4573,"neoClassName":"Neo.util.Array"},{"comment":"/**\n     * Moves an item inside arr from fromIndex to toIndex\n     * @param {Array} arr\n     * @param {Number} fromIndex\n     * @param {Number} toIndex\n     */","meta":{"range":[1766,2053],"filename":"Array.mjs","lineno":71,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/util","code":{"id":"astnode100142093","name":"NeoArray.move","type":"MethodDefinition","paramnames":["arr","fromIndex","toIndex"]},"vars":{"":null}},"description":"<p>Moves an item inside arr from fromIndex to toIndex</p>\n","params":[{"type":{"names":["Array"]},"name":"arr"},{"type":{"names":["Number"]},"name":"fromIndex"},{"type":{"names":["Number"]},"name":"toIndex"}],"name":"move","longname":"NeoArray.move","kind":"function","memberof":"NeoArray","scope":"static","$longname":"NeoArray.move","$kind":"method","id":4574,"neoClassName":"Neo.util.Array"},{"comment":"/**\n     * Removes an item or array of items from an array. Only primitive items will get found\n     * @param {Array} arr\n     * @param {*} items\n     */","meta":{"range":[2217,2499],"filename":"Array.mjs","lineno":89,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/util","code":{"id":"astnode100142139","name":"NeoArray.remove","type":"MethodDefinition","paramnames":["arr","items"]},"vars":{"":null}},"description":"<p>Removes an item or array of items from an array. Only primitive items will get found</p>\n","params":[{"type":{"names":["Array"]},"name":"arr"},{"type":{"names":["*"]},"name":"items"}],"name":"remove","longname":"NeoArray.remove","kind":"function","memberof":"NeoArray","scope":"static","$longname":"NeoArray.remove","$kind":"method","id":4575,"neoClassName":"Neo.util.Array"},{"comment":"/**\n     * Convenience method to combine add & remove in one call.\n     * You can pass single items or an array of items to add or to remove.\n     * @param {Array} arr\n     * @param {*} removeItems\n     * @param {*} addItems\n     */","meta":{"range":[2742,2873],"filename":"Array.mjs","lineno":111,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/util","code":{"id":"astnode100142191","name":"NeoArray.removeAdd","type":"MethodDefinition","paramnames":["arr","removeItems","addItems"]},"vars":{"":null}},"description":"<p>Convenience method to combine add &amp; remove in one call.\nYou can pass single items or an array of items to add or to remove.</p>\n","params":[{"type":{"names":["Array"]},"name":"arr"},{"type":{"names":["*"]},"name":"removeItems"},{"type":{"names":["*"]},"name":"addItems"}],"name":"removeAdd","longname":"NeoArray.removeAdd","kind":"function","memberof":"NeoArray","scope":"static","$longname":"NeoArray.removeAdd","$kind":"method","id":4576,"neoClassName":"Neo.util.Array"},{"comment":"/**\n     * Removes an item from an array in case it does exist, otherwise adds it\n     * @param {Array} arr\n     * @param {*} item\n     * @param {Boolean} [add]\n     */","meta":{"range":[3052,3172],"filename":"Array.mjs","lineno":122,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/util","code":{"id":"astnode100142212","name":"NeoArray.toggle","type":"MethodDefinition","paramnames":["arr","item","add"]},"vars":{"":null}},"description":"<p>Removes an item from an array in case it does exist, otherwise adds it</p>\n","params":[{"type":{"names":["Array"]},"name":"arr"},{"type":{"names":["*"]},"name":"item"},{"type":{"names":["Boolean"]},"optional":true,"name":"add"}],"name":"toggle","longname":"NeoArray.toggle","kind":"function","memberof":"NeoArray","scope":"static","$longname":"NeoArray.toggle","$kind":"method","id":4577,"neoClassName":"Neo.util.Array"},{"comment":"/**\n     * Returns an array of items which are present in the passed arrays.\n     * Multiple arrays may be passed.\n     * Only supports primitive items\n     * @param {Array} array1\n     * @param {Array} array2\n     * @returns {Array}\n     */","meta":{"range":[3424,3513],"filename":"Array.mjs","lineno":134,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/util","code":{"id":"astnode100142237","name":"NeoArray.union","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Returns an array of items which are present in the passed arrays.\nMultiple arrays may be passed.\nOnly supports primitive items</p>\n","params":[{"type":{"names":["Array"]},"name":"array1"},{"type":{"names":["Array"]},"name":"array2"}],"returns":[{"type":{"names":["Array"]}}],"name":"union","longname":"NeoArray.union","kind":"function","memberof":"NeoArray","scope":"static","$longname":"NeoArray.union","$kind":"method","id":4578,"neoClassName":"Neo.util.Array"},{"comment":"/**\n     * Adds an item or Array of items to an array in case it does not already exist.\n     * Only primitive items will get found as duplicates\n     * @param {Array} arr\n     * @param {*} items\n     */","meta":{"range":[3727,3990],"filename":"Array.mjs","lineno":144,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/util","code":{"id":"astnode100142254","name":"NeoArray.unshift","type":"MethodDefinition","paramnames":["arr","items"]},"vars":{"":null}},"description":"<p>Adds an item or Array of items to an array in case it does not already exist.\nOnly primitive items will get found as duplicates</p>\n","params":[{"type":{"names":["Array"]},"name":"arr"},{"type":{"names":["*"]},"name":"items"}],"name":"unshift","longname":"NeoArray.unshift","kind":"function","memberof":"NeoArray","scope":"static","$longname":"NeoArray.unshift","$kind":"method","id":4579,"neoClassName":"Neo.util.Array"}]}