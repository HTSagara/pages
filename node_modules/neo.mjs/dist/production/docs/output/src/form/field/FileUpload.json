{"classData":[{"comment":"/**\n * An accessible file uploading widget which automatically commences an upload as soon as\n * a file is selected using the UI.\n *\n * The URL to which the file must be uploaded is specified in the {@link config#uploadUrl} property.\n * This service must return a JSON status response in the following form for successful uploads:\n *\n * ```json\n * {\n *     \"success\" : true,\n *     \"documentId\" : 1\n * }\n * ```\n *\n * And the following form for unsuccessful uploads:\n *\n * ```json\n * {\n *     \"success\" : false,\n *     \"message\" : \"Why the upload was rejected\"\n * }\n * ```\n *\n * The name of the `documentId` property is configured in {@link #member-documentIdParameter}.\n * It defaults to `'documentId'`.\n *\n * The `documentId` is used when requesting the document malware scan status, and when requesting\n * that the document be deleted, or downloaded.\n *\n * If the upload is successful, then the {@link #member-documentStatusUrl} is polled until the\n * malware scan. The document id returned from the upload is passed in the parameter named\n * by the {@link #member-documentIdParameter}. It defaults to `'documentId'`.\n *\n * This service must return a JSON status response in the following if the scan is still progressing:\n *\n * ```json\n * {\n *     \"status\" : \"scanning\"\n * }\n * ```\n *\n * And the following form is malware was detected:\n *\n * ```json\n * {\n *     \"status\" : \"scan-failed\"\n * }\n * ```\n *\n * After a successful scan, a document may or may not be downloadable.\n *\n * For a downloadable document, the response must be:\n *\n * ```json\n * {\n *     \"status\" : \"downloadable\"\n * }\n * ```\n *\n * For a non-downloadable document, the response must be:\n *\n * ```json\n * {\n *     \"status\" : \"not-downloadable\"\n * }\n * ```\n * @class Neo.form.field.FileUpload\n * @extends Neo.form.field.Base\n */","meta":{"filename":"FileUpload.mjs","lineno":17,"columnno":0,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"description":"<p>An accessible file uploading widget which automatically commences an upload as soon as\na file is selected using the UI.</p>\n<p>The URL to which the file must be uploaded is specified in the {@link config#uploadUrl} property.\nThis service must return a JSON status response in the following form for successful uploads:</p>\n<pre><code class=\"json language-json\">{\n    \"success\" : true,\n    \"documentId\" : 1\n}\n</code></pre>\n<p>And the following form for unsuccessful uploads:</p>\n<pre><code class=\"json language-json\">{\n    \"success\" : false,\n    \"message\" : \"Why the upload was rejected\"\n}\n</code></pre>\n<p>The name of the <code>documentId</code> property is configured in {@link #member-documentIdParameter}.\nIt defaults to <code>'documentId'</code>.</p>\n<p>The <code>documentId</code> is used when requesting the document malware scan status, and when requesting\nthat the document be deleted, or downloaded.</p>\n<p>If the upload is successful, then the {@link #member-documentStatusUrl} is polled until the\nmalware scan. The document id returned from the upload is passed in the parameter named\nby the {@link #member-documentIdParameter}. It defaults to <code>'documentId'</code>.</p>\n<p>This service must return a JSON status response in the following if the scan is still progressing:</p>\n<pre><code class=\"json language-json\">{\n    \"status\" : \"scanning\"\n}\n</code></pre>\n<p>And the following form is malware was detected:</p>\n<pre><code class=\"json language-json\">{\n    \"status\" : \"scan-failed\"\n}\n</code></pre>\n<p>After a successful scan, a document may or may not be downloadable.</p>\n<p>For a downloadable document, the response must be:</p>\n<pre><code class=\"json language-json\">{\n    \"status\" : \"downloadable\"\n}\n</code></pre>\n<p>For a non-downloadable document, the response must be:</p>\n<pre><code class=\"json language-json\">{\n    \"status\" : \"not-downloadable\"\n}\n</code></pre>","kind":"class","name":"FileUpload","augments":["Neo.form.field.Base"],"memberof":"Neo.form.field","longname":"Neo.form.field.FileUpload","scope":"static","$longname":"Neo.form.field.FileUpload","$kind":"class","id":2284,"neoClassName":"Neo.form.field.FileUpload"},{"comment":"/**\n         * @member {String} className='Neo.form.field.FileUpload'\n         * @protected\n         */","meta":{"filename":"FileUpload.mjs","lineno":92,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"kind":"member","name":"className","type":{"names":["String"]},"defaultvalue":"'Neo.form.field.FileUpload'","access":"protected","longname":"className","scope":"global","$longname":"className","$kind":"property","id":2285,"neoClassName":"Neo.form.field.FileUpload"},{"comment":"/**\n         * @member {String} ntype='file-upload-field'\n         * @protected\n         */","meta":{"filename":"FileUpload.mjs","lineno":97,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"kind":"member","name":"ntype","type":{"names":["String"]},"defaultvalue":"'file-upload-field'","access":"protected","longname":"ntype","scope":"global","$longname":"ntype","$kind":"property","id":2286,"neoClassName":"Neo.form.field.FileUpload"},{"comment":"/**\n         * @member {String[]} baseCls=['neo-file-upload-field']\n         * @protected\n         */","meta":{"filename":"FileUpload.mjs","lineno":102,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"kind":"member","name":"baseCls","type":{"names":["Array.<String>"]},"defaultvalue":"['neo-file-upload-field']","access":"protected","longname":"baseCls","scope":"global","$longname":"baseCls","$kind":"property","id":2287,"neoClassName":"Neo.form.field.FileUpload"},{"comment":"/**\n         * @member {String[]} cls=['neo-field-empty']\n         */","meta":{"filename":"FileUpload.mjs","lineno":106,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"kind":"member","name":"cls","type":{"names":["Array.<String>"]},"defaultvalue":"['neo-field-empty']","longname":"cls","scope":"global","$longname":"cls","$kind":"property","id":2288,"neoClassName":"Neo.form.field.FileUpload"},{"comment":"/**\n         * @member {Object} _vdom\n         */","meta":{"filename":"FileUpload.mjs","lineno":110,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"kind":"member","name":"_vdom","type":{"names":["Object"]},"longname":"_vdom","scope":"global","$longname":"_vdom","$kind":"property","id":2289,"neoClassName":"Neo.form.field.FileUpload"},{"comment":"/**\n         * An Object containing a default set of headers to be passed to the server on every HTTP request.\n         * @member {Object} headers\n         */","meta":{"filename":"FileUpload.mjs","lineno":127,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"description":"<p>An Object containing a default set of headers to be passed to the server on every HTTP request.</p>","kind":"member","name":"headers","type":{"names":["Object"]},"longname":"headers","scope":"global","$longname":"headers","$kind":"property","id":2290,"neoClassName":"Neo.form.field.FileUpload"},{"comment":"/**\n         * An Object which allows the status text returned from the {@link #property-documentStatusUrl} to be\n         * mapped to the corresponding next widget state.\n         * @member {Object} documentStatusMap\n         */","meta":{"filename":"FileUpload.mjs","lineno":134,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"description":"<p>An Object which allows the status text returned from the {@link #property-documentStatusUrl} to be\nmapped to the corresponding next widget state.</p>","kind":"member","name":"documentStatusMap","type":{"names":["Object"]},"longname":"documentStatusMap","scope":"global","$longname":"documentStatusMap","$kind":"property","id":2291,"neoClassName":"Neo.form.field.FileUpload"},{"comment":"/**\n         * @member {String|null} document_=null\n         */","meta":{"filename":"FileUpload.mjs","lineno":152,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"kind":"member","name":"document_","type":{"names":["String","null"]},"defaultvalue":null,"longname":"document_","scope":"global","$longname":"document_","$kind":"property","id":2292,"neoClassName":"Neo.form.field.FileUpload"},{"comment":"/**\n         * If this widget should reference an existing document, configure the widget with a documentId\n         * so that it can initialize in the correct \"uploaded\" state.\n         *\n         * If this is *not* configured, then this property will be set after a successful upload to\n         * the id returned from the {@link #property-uploadUrl}.\n         * @member {String|Number} documentId\n         */","meta":{"filename":"FileUpload.mjs","lineno":162,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"description":"<p>If this widget should reference an existing document, configure the widget with a documentId\nso that it can initialize in the correct \"uploaded\" state.</p>\n<p>If this is <em>not</em> configured, then this property will be set after a successful upload to\nthe id returned from the {@link #property-uploadUrl}.</p>","kind":"member","name":"documentId","type":{"names":["String","Number"]},"longname":"documentId","scope":"global","$longname":"documentId","$kind":"property","id":2293,"neoClassName":"Neo.form.field.FileUpload"},{"comment":"/**\n         * The URL of the file upload service to which the selected file is sent.\n         *\n         * This service must return a JSON response of the form:\n         *\n         * ```json\n         * {\n         *     \"success\"    : true,\n         *     \"message\"    : \"Only needed if the success property is false\",\n         *     \"documentId\" : 1\n         * }\n         * ```\n         *\n         * The document id is needed so that this widget can follow up and request the results of the\n         * scan operation to see if the file was accepted, and whether it is to be subsequently downloadable.\n         *\n         * The document status request URL must be configured in {@link #member-documentStatusUrl}\n         * @member {String|null} uploadUrl=null\n         */","meta":{"filename":"FileUpload.mjs","lineno":183,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"description":"<p>The URL of the file upload service to which the selected file is sent.</p>\n<p>This service must return a JSON response of the form:</p>\n<pre><code class=\"json language-json\">{\n    \"success\"    : true,\n    \"message\"    : \"Only needed if the success property is false\",\n    \"documentId\" : 1\n}\n</code></pre>\n<p>The document id is needed so that this widget can follow up and request the results of the\nscan operation to see if the file was accepted, and whether it is to be subsequently downloadable.</p>\n<p>The document status request URL must be configured in {@link #member-documentStatusUrl}</p>","kind":"member","name":"uploadUrl","type":{"names":["String","null"]},"defaultvalue":null,"longname":"uploadUrl","scope":"global","$longname":"uploadUrl","$kind":"property","id":2294,"neoClassName":"Neo.form.field.FileUpload"},{"comment":"/**\n         * The name of the JSON property in which the document id is returned in the upload response\n         * JSON packet and the token string which is substituted for the document id when requesting\n         * a malware scan and a document deletion.\n         *\n         * Defaults fro `documentId`\n         *\n         * @member {String} documentIdParameter='documentId'\n         */","meta":{"filename":"FileUpload.mjs","lineno":194,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"description":"<p>The name of the JSON property in which the document id is returned in the upload response\nJSON packet and the token string which is substituted for the document id when requesting\na malware scan and a document deletion.</p>\n<p>Defaults fro <code>documentId</code></p>","kind":"member","name":"documentIdParameter","type":{"names":["String"]},"defaultvalue":"'documentId'","longname":"documentIdParameter","scope":"global","$longname":"documentIdParameter","$kind":"property","id":2295,"neoClassName":"Neo.form.field.FileUpload"},{"comment":"/**\n         * The URL from which the file may be downloaded after it has finished its scan.\n         *\n         * This must contain a substitution token named the same as the {@link #property-documentIdParameter}\n         * which is used when creating a URL\n         *\n         * for example:\n         *\n         * ```json\n         * {\n         *     downloadUrl : '/getDocument/${documentId}'\n         * }\n         * ```\n         *\n         * The document id returned from the {@link #member-uploadUrl upload} is passed in the parameter named\n         * by the {@link #member-documentIdParameter}. It defaults to `'documentId'`.\n         *\n         * @member {String|null} downloadUrl_=null\n         */","meta":{"filename":"FileUpload.mjs","lineno":215,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"description":"<p>The URL from which the file may be downloaded after it has finished its scan.</p>\n<p>This must contain a substitution token named the same as the {@link #property-documentIdParameter}\nwhich is used when creating a URL</p>\n<p>for example:</p>\n<pre><code class=\"json language-json\">{\n    downloadUrl : '/getDocument/${documentId}'\n}\n</code></pre>\n<p>The document id returned from the {@link #member-uploadUrl upload} is passed in the parameter named\nby the {@link #member-documentIdParameter}. It defaults to <code>'documentId'</code>.</p>","kind":"member","name":"downloadUrl_","type":{"names":["String","null"]},"defaultvalue":null,"longname":"downloadUrl_","scope":"global","$longname":"downloadUrl_","$kind":"property","id":2296,"neoClassName":"Neo.form.field.FileUpload"},{"comment":"/**\n         * The URL of the file status reporting service.\n         *\n         * This must contain a substitution token named the same as the {@link #property-documentIdParameter}\n         * which is used when creating a URL\n         *\n         * for example:\n         *\n         * ```json\n         * {\n         *     documentStatusUrl : '/getDocumentStatus/${documentId}'\n         * }\n         * ```\n         *\n         * This widget will use this service after a successful upload to determine its next\n         * state.\n         *\n         * This service must return a JSON response of the form:\n         *\n         * ```json\n         * {\n         *     \"status\" : \"scanning\" or \"scan-failed\" or \"downloadable or \"not-downloadable\"\n         * }\n         * ```\n         *\n         * @member {String|null} documentStatusUrl_=null\n         */","meta":{"filename":"FileUpload.mjs","lineno":244,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"description":"<p>The URL of the file status reporting service.</p>\n<p>This must contain a substitution token named the same as the {@link #property-documentIdParameter}\nwhich is used when creating a URL</p>\n<p>for example:</p>\n<pre><code class=\"json language-json\">{\n    documentStatusUrl : '/getDocumentStatus/${documentId}'\n}\n</code></pre>\n<p>This widget will use this service after a successful upload to determine its next\nstate.</p>\n<p>This service must return a JSON response of the form:</p>\n<pre><code class=\"json language-json\">{\n    \"status\" : \"scanning\" or \"scan-failed\" or \"downloadable or \"not-downloadable\"\n}\n</code></pre>","kind":"member","name":"documentStatusUrl_","type":{"names":["String","null"]},"defaultvalue":null,"longname":"documentStatusUrl_","scope":"global","$longname":"documentStatusUrl_","$kind":"property","id":2297,"neoClassName":"Neo.form.field.FileUpload"},{"comment":"/**\n         * The polling interval *in milliseconds* to wait between asking the server how the document scan\n         * is proceeding.\n         *\n         * Defaults to 2000ms\n         *\n         * @member {Number} statusScanInterval=2000\n         */","meta":{"filename":"FileUpload.mjs","lineno":254,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"description":"<p>The polling interval <em>in milliseconds</em> to wait between asking the server how the document scan\nis proceeding.</p>\n<p>Defaults to 2000ms</p>","kind":"member","name":"statusScanInterval","type":{"names":["Number"]},"defaultvalue":2000,"longname":"statusScanInterval","scope":"global","$longname":"statusScanInterval","$kind":"property","id":2298,"neoClassName":"Neo.form.field.FileUpload"},{"comment":"/**\n         * The URL of the file deletion service.\n         *\n         * This must contain a substitution token named the same as the {@link #property-documentIdParameter}\n         * which is used when creating a URL\n         *\n         * for example:\n         *\n         * ```json\n         * {\n         *     documentDeleteUrl : '/deleteDocument/${documentId}'\n         * }\n         * ```\n         *\n         * This widget will use this service after a successful upload to determine its next\n         * state.\n         *\n         * If this service yields an HTTP 200 status, the deletion is taken to have been successful.\n         *\n         * @member {String|null} documentDeleteUrl_=null\n         */","meta":{"filename":"FileUpload.mjs","lineno":277,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"description":"<p>The URL of the file deletion service.</p>\n<p>This must contain a substitution token named the same as the {@link #property-documentIdParameter}\nwhich is used when creating a URL</p>\n<p>for example:</p>\n<pre><code class=\"json language-json\">{\n    documentDeleteUrl : '/deleteDocument/${documentId}'\n}\n</code></pre>\n<p>This widget will use this service after a successful upload to determine its next\nstate.</p>\n<p>If this service yields an HTTP 200 status, the deletion is taken to have been successful.</p>","kind":"member","name":"documentDeleteUrl_","type":{"names":["String","null"]},"defaultvalue":null,"longname":"documentDeleteUrl_","scope":"global","$longname":"documentDeleteUrl_","$kind":"property","id":2299,"neoClassName":"Neo.form.field.FileUpload"},{"comment":"/**\n         * The HTTP method to use when requesting a document deletion using the {@link #member-documentDeleteUrl}.\n         *\n         * Defaults to `DELETE`.\n         * @member {String} documentDeleteMethod='DELETE'\n         */","meta":{"filename":"FileUpload.mjs","lineno":285,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"description":"<p>The HTTP method to use when requesting a document deletion using the {@link #member-documentDeleteUrl}.</p>\n<p>Defaults to <code>DELETE</code>.</p>","kind":"member","name":"documentDeleteMethod","type":{"names":["String"]},"defaultvalue":"'DELETE'","longname":"documentDeleteMethod","scope":"global","$longname":"documentDeleteMethod","$kind":"property","id":2300,"neoClassName":"Neo.form.field.FileUpload"},{"comment":"/**\n         * @member {String} state_=ready\n         */","meta":{"filename":"FileUpload.mjs","lineno":290,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"kind":"member","name":"state_","type":{"names":["String"]},"defaultvalue":"ready","longname":"state_","scope":"global","$longname":"state_","$kind":"property","id":2301,"neoClassName":"Neo.form.field.FileUpload"},{"comment":"/**\n         * @member {Object} types=null\n         */","meta":{"filename":"FileUpload.mjs","lineno":295,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"kind":"member","name":"types","type":{"names":["Object"]},"defaultvalue":null,"longname":"types","scope":"global","$longname":"types","$kind":"property","id":2302,"neoClassName":"Neo.form.field.FileUpload"},{"comment":"/**\n         * @member {String|Number|null} maxSize=null\n         */","meta":{"filename":"FileUpload.mjs","lineno":300,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"kind":"member","name":"maxSize","type":{"names":["String","Number","null"]},"defaultvalue":null,"longname":"maxSize","scope":"global","$longname":"maxSize","$kind":"property","id":2303,"neoClassName":"Neo.form.field.FileUpload"},{"comment":"/**\n         * The error text to show below the widget\n         * @member {String|null} error_=null\n         */","meta":{"filename":"FileUpload.mjs","lineno":306,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"description":"<p>The error text to show below the widget</p>","kind":"member","name":"error_","type":{"names":["String","null"]},"defaultvalue":null,"longname":"error_","scope":"global","$longname":"error_","$kind":"property","id":2304,"neoClassName":"Neo.form.field.FileUpload"},{"comment":"/**\n     * @param {Object} config\n     */","meta":{"range":[10534,10820],"filename":"FileUpload.mjs","lineno":330,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100068246","name":"FileUpload#construct","type":"MethodDefinition","paramnames":["config"]},"vars":{"":null}},"params":[{"type":{"names":["Object"]},"name":"config"}],"name":"construct","longname":"FileUpload#construct","kind":"function","memberof":"FileUpload","scope":"instance","$longname":"FileUpload#construct","$kind":"method","id":2305,"neoClassName":"Neo.form.field.FileUpload"},{"comment":"/**\n     * @returns {Object}\n     */","meta":{"range":[11257,11309],"filename":"FileUpload.mjs","lineno":359,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100068344","name":"FileUpload#getInputEl","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"returns":[{"type":{"names":["Object"]}}],"name":"getInputEl","longname":"FileUpload#getInputEl","kind":"function","memberof":"FileUpload","scope":"instance","params":[],"$longname":"FileUpload#getInputEl","$kind":"method","id":2306,"neoClassName":"Neo.form.field.FileUpload"},{"comment":"/**\n     * @param {Object} data\n     * @protected\n     */","meta":{"range":[12024,13474],"filename":"FileUpload.mjs","lineno":391,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100068450","name":"FileUpload#onInputValueChange","type":"MethodDefinition","paramnames":[""]},"vars":{"":null}},"params":[{"type":{"names":["Object"]},"name":"data"}],"access":"protected","name":"onInputValueChange","longname":"FileUpload#onInputValueChange","kind":"function","memberof":"FileUpload","scope":"instance","$longname":"FileUpload#onInputValueChange","$kind":"method","id":2307,"neoClassName":"Neo.form.field.FileUpload"},{"comment":"/**\n         * This event fires before every HTTP request is sent to the server via any of the configured URLs.\n         *\n         * @event beforeRequest\n         * @param {Object} event The event\n         * @param {Object} event.headers An object containing the configured {@link #property-headers}\n         * for this widget, into which new headers may be injected.\n         * @returns {Object}\n         */","meta":{"filename":"FileUpload.mjs","lineno":466,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"description":"<p>This event fires before every HTTP request is sent to the server via any of the configured URLs.</p>","kind":"event","name":"beforeRequest","params":[{"type":{"names":["Object"]},"description":"<p>The event</p>","name":"event"},{"type":{"names":["Object"]},"description":"<p>An object containing the configured {@link #property-headers}\nfor this widget, into which new headers may be injected.</p>","name":"event.headers"}],"returns":[{"type":{"names":["Object"]}}],"longname":"event:beforeRequest","scope":"global","$longname":"event:beforeRequest","$kind":"event","id":2308,"neoClassName":"Neo.form.field.FileUpload"},{"comment":"/**\n     * Triggered after the state config got changed\n     * @param {String} value\n     * @param {String} oldValue\n     * @protected\n     */","meta":{"range":[21543,23782],"filename":"FileUpload.mjs","lineno":683,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100069502","name":"FileUpload#afterSetState","type":"MethodDefinition","paramnames":["value","oldValue"]},"vars":{"":null}},"description":"<p>Triggered after the state config got changed</p>","params":[{"type":{"names":["String"]},"name":"value"},{"type":{"names":["String"]},"name":"oldValue"}],"access":"protected","name":"afterSetState","longname":"FileUpload#afterSetState","kind":"function","memberof":"FileUpload","scope":"instance","$longname":"FileUpload#afterSetState","$kind":"method","id":2309,"neoClassName":"Neo.form.field.FileUpload"},{"comment":"/**\n     * Creates a URL substituting the passed parameter names in at the places where the name\n     * occurs within `{}` in the pattern.\n     * @param {String} urlPattern\n     * @param {Object} params\n     */","meta":{"range":[24003,24201],"filename":"FileUpload.mjs","lineno":753,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100069815","name":"FileUpload#createUrl","type":"MethodDefinition","paramnames":["urlPattern","params"]},"vars":{"":null}},"description":"<p>Creates a URL substituting the passed parameter names in at the places where the name\noccurs within <code>{}</code> in the pattern.</p>","params":[{"type":{"names":["String"]},"name":"urlPattern"},{"type":{"names":["Object"]},"name":"params"}],"name":"createUrl","longname":"FileUpload#createUrl","kind":"function","memberof":"FileUpload","scope":"instance","$longname":"FileUpload#createUrl","$kind":"method","id":2310,"neoClassName":"Neo.form.field.FileUpload"},{"comment":"/**\n     * @returns {Boolean}\n     */","meta":{"range":[26310,26513],"filename":"FileUpload.mjs","lineno":834,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100070122","name":"FileUpload#validate","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"returns":[{"type":{"names":["Boolean"]}}],"name":"validate","longname":"FileUpload#validate","kind":"function","memberof":"FileUpload","scope":"instance","params":[],"$longname":"FileUpload#validate","$kind":"method","id":2311,"neoClassName":"Neo.form.field.FileUpload"}]}