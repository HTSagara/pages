{"classData":[{"comment":"/**\n * The base class for (almost) all classes inside the Neo namespace\n * Exceptions are e.g. core.IdGenerator, vdom.VNode\n * @class Neo.core.Base\n */","meta":{"filename":"Base.mjs","lineno":7,"columnno":0,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{}},"description":"<p>The base class for (almost) all classes inside the Neo namespace\nExceptions are e.g. core.IdGenerator, vdom.VNode</p>","kind":"class","name":"Base","memberof":"Neo.core","longname":"Neo.core.Base","scope":"static","$longname":"Neo.core.Base","$kind":"class","id":1549,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Regex to grab the MethodName from an error\n     * which is a second generation function\n     * @type {*}\n     */","meta":{"range":[504,559],"filename":"Base.mjs","lineno":23,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100049300","name":"methodNameRegex","type":"ClassProperty"}},"description":"<p>Regex to grab the MethodName from an error\nwhich is a second generation function</p>","type":{"names":["*"]},"name":"methodNameRegex","longname":"Base#methodNameRegex","kind":"member","memberof":"Base","scope":"instance","$longname":"Base#methodNameRegex","$kind":"property","id":1550,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * True automatically applies the core.Observable mixin\n     * @member {Boolean} observable=false\n     * @static\n     */","meta":{"filename":"Base.mjs","lineno":24,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{}},"description":"<p>True automatically applies the core.Observable mixin</p>","kind":"member","name":"observable","type":{"names":["Boolean"]},"defaultvalue":false,"scope":"static","longname":"observable","$longname":"observable","$kind":"property","id":1551,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Keep the overwritten methods\n     * @member {Object} overwrittenMethods={}\n     * @protected\n     * @static\n     */","meta":{"filename":"Base.mjs","lineno":31,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{}},"description":"<p>Keep the overwritten methods</p>","kind":"member","name":"overwrittenMethods","type":{"names":["Object"]},"defaultvalue":"{}","access":"protected","scope":"static","longname":"overwrittenMethods","$longname":"overwrittenMethods","$kind":"property","id":1552,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Set this one to false in case you don't want to stick\n     * to the \"anti-pattern\" to apply classes to the global Neo or App namespace\n     * @member {Boolean} registerToGlobalNs=true\n     * @protected\n     * @static\n     */","meta":{"filename":"Base.mjs","lineno":39,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{}},"description":"<p>Set this one to false in case you don't want to stick\nto the \"anti-pattern\" to apply classes to the global Neo or App namespace</p>","kind":"member","name":"registerToGlobalNs","type":{"names":["Boolean"]},"defaultvalue":true,"access":"protected","scope":"static","longname":"registerToGlobalNs","$longname":"registerToGlobalNs","$kind":"property","id":1553,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Configs will get merged throughout the class hierarchy\n     * @returns {Object} config\n     * @tutorial 02_ClassSystem\n     */","meta":{"range":[1312,2494],"filename":"Base.mjs","lineno":50,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100049308","name":"config","type":"ClassProperty"}},"description":"<p>Configs will get merged throughout the class hierarchy</p>","returns":[{"type":{"names":["Object"]},"description":"config"}],"tags":[{"originalTitle":"tutorial","title":"tutorial","text":"02_ClassSystem","value":"02_ClassSystem"}],"name":"config","longname":"Base#config","kind":"member","memberof":"Base","scope":"instance","$longname":"Base#config","$kind":"property","id":1554,"neoClassName":"Neo.core.Base"},{"comment":"/**\n         * The class name which will get mapped into the Neo or app namespace\n         * @member {String} className='Neo.core.Base'\n         * @protected\n         */","meta":{"filename":"Base.mjs","lineno":51,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{}},"description":"<p>The class name which will get mapped into the Neo or app namespace</p>","kind":"member","name":"className","type":{"names":["String"]},"defaultvalue":"'Neo.core.Base'","access":"protected","longname":"className","scope":"global","$longname":"className","$kind":"property","id":1555,"neoClassName":"Neo.core.Base"},{"comment":"/**\n         * The class shortcut-name to use for e.g. creating child components inside a JSON-format\n         * @member {String} ntype='base'\n         * @protected\n         */","meta":{"filename":"Base.mjs","lineno":57,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{}},"description":"<p>The class shortcut-name to use for e.g. creating child components inside a JSON-format</p>","kind":"member","name":"ntype","type":{"names":["String"]},"defaultvalue":"'base'","access":"protected","longname":"ntype","scope":"global","$longname":"ntype","$kind":"property","id":1556,"neoClassName":"Neo.core.Base"},{"comment":"/**\n         * The unique component id\n         * @member {String|null} id_=null\n         */","meta":{"filename":"Base.mjs","lineno":62,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{}},"description":"<p>The unique component id</p>","kind":"member","name":"id_","type":{"names":["String","null"]},"defaultvalue":null,"longname":"id_","scope":"global","$longname":"id_","$kind":"property","id":1557,"neoClassName":"Neo.core.Base"},{"comment":"/**\n         * Neo.create() will change this flag to true after the onConstructed() chain is done.\n         * @member {Boolean} isConstructed=false\n         * @protected\n         */","meta":{"filename":"Base.mjs","lineno":68,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{}},"description":"<p>Neo.create() will change this flag to true after the onConstructed() chain is done.</p>","kind":"member","name":"isConstructed","type":{"names":["Boolean"]},"defaultvalue":false,"access":"protected","longname":"isConstructed","scope":"global","$longname":"isConstructed","$kind":"property","id":1558,"neoClassName":"Neo.core.Base"},{"comment":"/**\n         * Add mixins as an array of classNames, imported modules or a mixed version\n         * @member {String[]|Neo.core.Base[]|null} mixins=null\n         */","meta":{"filename":"Base.mjs","lineno":73,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{}},"description":"<p>Add mixins as an array of classNames, imported modules or a mixed version</p>","kind":"member","name":"mixins","type":{"names":["Array.<String>","Array.<Neo.core.Base>","null"]},"defaultvalue":null,"longname":"mixins","scope":"global","$longname":"mixins","$kind":"property","id":1559,"neoClassName":"Neo.core.Base"},{"comment":"/**\n         * You can create a new instance by passing an imported class (JS module default export)\n         * @member {Class} module=null\n         * @protected\n         */","meta":{"filename":"Base.mjs","lineno":79,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{}},"description":"<p>You can create a new instance by passing an imported class (JS module default export)</p>","kind":"member","name":"module","type":{"names":["Class"]},"defaultvalue":null,"access":"protected","longname":"module","scope":"global","$longname":"module","$kind":"property","id":1560,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Internal cache for all timeout ids when using this.timeout()\n     * @member {Number[]} timeoutIds=[]\n     * @private\n     */","meta":{"filename":"Base.mjs","lineno":87,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{}},"description":"<p>Internal cache for all timeout ids when using this.timeout()</p>","kind":"member","name":"timeoutIds","type":{"names":["Array.<Number>"]},"defaultvalue":"[]","access":"private","longname":"timeoutIds","scope":"global","$longname":"timeoutIds","$kind":"property","id":1561,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Applies the observable mixin if needed, grants remote access if needed.\n     * @param {Object} config={}\n     */","meta":{"range":[2790,3735],"filename":"Base.mjs","lineno":93,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100049324","name":"Base#construct","type":"MethodDefinition","paramnames":["config"]},"vars":{"":null}},"description":"<p>Applies the observable mixin if needed, grants remote access if needed.</p>","params":[{"type":{"names":["Object"]},"defaultvalue":"{}","name":"config"}],"name":"construct","longname":"Base#construct","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#construct","$kind":"method","id":1562,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Triggered after the id config got changed.\n     * You can dynamically change instance ids if needed. They need to stay unique at any given point.\n     * Use case: e.g. component based lists, where you want to re-use item instances.\n     * @param {String|null} value\n     * @param {String|null} oldValue\n     * @protected\n     */","meta":{"range":[4085,4593],"filename":"Base.mjs","lineno":139,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100049444","name":"Base#afterSetId","type":"MethodDefinition","paramnames":["value","oldValue"]},"vars":{"":null}},"description":"<p>Triggered after the id config got changed.\nYou can dynamically change instance ids if needed. They need to stay unique at any given point.\nUse case: e.g. component based lists, where you want to re-use item instances.</p>","params":[{"type":{"names":["String","null"]},"name":"value"},{"type":{"names":["String","null"]},"name":"oldValue"}],"access":"protected","name":"afterSetId","longname":"Base#afterSetId","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#afterSetId","$kind":"method","id":1563,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Applying overwrites and adding overwrittenMethods to the class constructors\n     * @param {Object} cfg\n     * @protected\n     */","meta":{"range":[4743,5447],"filename":"Base.mjs","lineno":164,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100049519","name":"Base.applyOverwrites","type":"MethodDefinition","paramnames":["cfg"]},"vars":{"":null}},"description":"<p>Applying overwrites and adding overwrittenMethods to the class constructors</p>","params":[{"type":{"names":["Object"]},"name":"cfg"}],"access":"protected","name":"applyOverwrites","longname":"Base.applyOverwrites","kind":"function","memberof":"Base","scope":"static","$longname":"Base.applyOverwrites","$kind":"method","id":1564,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Convenience method for beforeSet functions which test if a given value is inside a static array\n     * @param {String|Number} value\n     * @param {String|Number} oldValue\n     * @param {String} name config name\n     * @param {Array|String} [staticName=name + 's'] name of the static config array\n     * @returns {String|Number} value or oldValue\n     */","meta":{"range":[5822,6183],"filename":"Base.mjs","lineno":195,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100049590","name":"Base#beforeSetEnumValue","type":"MethodDefinition","paramnames":["value","oldValue","name","staticName"]},"vars":{"":null}},"description":"<p>Convenience method for beforeSet functions which test if a given value is inside a static array</p>","params":[{"type":{"names":["String","Number"]},"name":"value"},{"type":{"names":["String","Number"]},"name":"oldValue"},{"type":{"names":["String"]},"description":"<p>config name</p>","name":"name"},{"type":{"names":["Array","String"]},"optional":true,"defaultvalue":"name + 's'","description":"<p>name of the static config array</p>","name":"staticName"}],"returns":[{"type":{"names":["String","Number"]},"description":"value or oldValue"}],"name":"beforeSetEnumValue","longname":"Base#beforeSetEnumValue","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#beforeSetEnumValue","$kind":"method","id":1565,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * From within an overwrite, a method can call a parent method, by using callOverwritten.\n     *\n     * @example\n     *    afterSetHeight(value, oldValue) {\n     *        // do the standard\n     *        this.callOverwritten(...arguments);\n     *        // do you own stuff\n     *    }\n     *\n     * We create an error to get the caller.name and then run that method on the constructor.\n     * This is based on the following error structure, e.g. afterSetHeight.\n     *\n     *     Error\n     *         at Base.callOverwritten (Base.mjs:176:21)\n     *         at Base.afterSetHeight (Overrides.mjs:19:26)\n     *\n     * @param args\n     */","meta":{"range":[6839,7097],"filename":"Base.mjs","lineno":225,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100049645","name":"Base#callOverwritten","type":"MethodDefinition","paramnames":["args"]},"vars":{"":null}},"description":"<p>From within an overwrite, a method can call a parent method, by using callOverwritten.</p>","examples":["afterSetHeight(value, oldValue) {\n       // do the standard\n       this.callOverwritten(...arguments);\n       // do you own stuff\n   }\n\nWe create an error to get the caller.name and then run that method on the constructor.\nThis is based on the following error structure, e.g. afterSetHeight.\n\n    Error\n        at Base.callOverwritten (Base.mjs:176:21)\n        at Base.afterSetHeight (Overrides.mjs:19:26)"],"params":[{"name":"args","variable":true}],"name":"callOverwritten","longname":"Base#callOverwritten","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#callOverwritten","$kind":"method","id":1566,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Uses the IdGenerator to create an id if a static one is not explicitly set.\n     * Registers the instance to manager.Instance if this one is already created,\n     * otherwise stores it inside a tmp map.\n     * @param {String} id\n     */","meta":{"range":[7355,7434],"filename":"Base.mjs","lineno":239,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100049688","name":"Base#createId","type":"MethodDefinition","paramnames":["id"]},"vars":{"":null}},"description":"<p>Uses the IdGenerator to create an id if a static one is not explicitly set.\nRegisters the instance to manager.Instance if this one is already created,\notherwise stores it inside a tmp map.</p>","params":[{"type":{"names":["String"]},"name":"id"}],"name":"createId","longname":"Base#createId","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#createId","$kind":"method","id":1567,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Unregisters this instance from Neo.manager.Instance\n     * and removes all object entries from this instance\n     */","meta":{"range":[7572,8041],"filename":"Base.mjs","lineno":247,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100049708","name":"Base#destroy","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Unregisters this instance from Neo.manager.Instance\nand removes all object entries from this instance</p>","name":"destroy","longname":"Base#destroy","kind":"function","memberof":"Base","scope":"instance","params":[],"$longname":"Base#destroy","$kind":"method","id":1568,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Used inside createId() as the default value passed to the IdGenerator.\n     * Override this method as needed.\n     * @returns {String}\n     */","meta":{"range":[8205,8249],"filename":"Base.mjs","lineno":272,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100049789","name":"Base#getIdKey","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Used inside createId() as the default value passed to the IdGenerator.\nOverride this method as needed.</p>","returns":[{"type":{"names":["String"]}}],"name":"getIdKey","longname":"Base#getIdKey","kind":"function","memberof":"Base","scope":"instance","params":[],"$longname":"Base#getIdKey","$kind":"method","id":1569,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Returns the value of a static config key or the staticConfig object itself in case no value is set\n     * @param {String} key The key of a staticConfig defined inside static getStaticConfig\n     * @returns {*}\n     */","meta":{"range":[8488,8553],"filename":"Base.mjs","lineno":281,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100049797","name":"Base#getStaticConfig","type":"MethodDefinition","paramnames":["key"]},"vars":{"":null}},"description":"<p>Returns the value of a static config key or the staticConfig object itself in case no value is set</p>","params":[{"type":{"names":["String"]},"description":"<p>The key of a staticConfig defined inside static getStaticConfig</p>","name":"key"}],"returns":[{"type":{"names":["*"]}}],"name":"getStaticConfig","longname":"Base#getStaticConfig","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#getStaticConfig","$kind":"method","id":1570,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Gets triggered after onConstructed() is done\n     * @see {@link Neo.core.Base#onConstructed onConstructed}\n     * @tutorial 02_ClassSystem\n     */","meta":{"range":[8721,8730],"filename":"Base.mjs","lineno":290,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100049808","name":"Base#init","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Gets triggered after onConstructed() is done</p>","see":["{@link Neo.core.Base#onConstructed onConstructed}"],"tags":[{"originalTitle":"tutorial","title":"tutorial","text":"02_ClassSystem","value":"02_ClassSystem"}],"name":"init","longname":"Base#init","kind":"function","memberof":"Base","scope":"instance","params":[],"$longname":"Base#init","$kind":"method","id":1571,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Applies all class configs to this instance\n     * @param {Object} config\n     * @param {Boolean} [preventOriginalConfig] True prevents the instance from getting an originalConfig property\n     */","meta":{"range":[8947,9136],"filename":"Base.mjs","lineno":297,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100049812","name":"Base#initConfig","type":"MethodDefinition","paramnames":["config","preventOriginalConfig"]},"vars":{"":null}},"description":"<p>Applies all class configs to this instance</p>","params":[{"type":{"names":["Object"]},"name":"config"},{"type":{"names":["Boolean"]},"optional":true,"description":"<p>True prevents the instance from getting an originalConfig property</p>","name":"preventOriginalConfig"}],"name":"initConfig","longname":"Base#initConfig","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#initConfig","$kind":"method","id":1572,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Does get triggered with a delay to ensure that Neo.workerId & Neo.worker.Manager are defined\n     * Remote method access via promises\n     */","meta":{"range":[9299,10124],"filename":"Base.mjs","lineno":308,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100049841","name":"Base#initRemote","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Does get triggered with a delay to ensure that Neo.workerId &amp; Neo.worker.Manager are defined\nRemote method access via promises</p>","name":"initRemote","longname":"Base#initRemote","kind":"function","memberof":"Base","scope":"instance","params":[],"$longname":"Base#initRemote","$kind":"method","id":1573,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Override this method to change the order configs are applied to this instance.\n     * @param {Object} config\n     * @param {Boolean} [preventOriginalConfig] True prevents the instance from getting an originalConfig property\n     * @returns {Object} config\n     */","meta":{"range":[10409,10801],"filename":"Base.mjs","lineno":337,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100049940","name":"Base#mergeConfig","type":"MethodDefinition","paramnames":["config","preventOriginalConfig"]},"vars":{"":null}},"description":"<p>Override this method to change the order configs are applied to this instance.</p>","params":[{"type":{"names":["Object"]},"name":"config"},{"type":{"names":["Boolean"]},"optional":true,"description":"<p>True prevents the instance from getting an originalConfig property</p>","name":"preventOriginalConfig"}],"returns":[{"type":{"names":["Object"]},"description":"config"}],"name":"mergeConfig","longname":"Base#mergeConfig","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#mergeConfig","$kind":"method","id":1574,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     *\n     */","meta":{"range":[10830,11067],"filename":"Base.mjs","lineno":355,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100049993","name":"Base#onAfterConstructed","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"name":"onAfterConstructed","longname":"Base#onAfterConstructed","kind":"function","memberof":"Base","scope":"instance","params":[],"$longname":"Base#onAfterConstructed","$kind":"method","id":1575,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Gets triggered after all constructors are done\n     * @tutorial 02_ClassSystem\n     */","meta":{"range":[11175,11193],"filename":"Base.mjs","lineno":368,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100050020","name":"Base#onConstructed","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Gets triggered after all constructors are done</p>","tags":[{"originalTitle":"tutorial","title":"tutorial","text":"02_ClassSystem","value":"02_ClassSystem"}],"name":"onConstructed","longname":"Base#onConstructed","kind":"function","memberof":"Base","scope":"instance","params":[],"$longname":"Base#onConstructed","$kind":"method","id":1576,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Helper method to replace string based values containing \"@config:\" with the matching config value\n     * of this instance.\n     * @param {Object|Object[]} items\n     */","meta":{"range":[11383,12898],"filename":"Base.mjs","lineno":375,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100050024","name":"Base#parseItemConfigs","type":"MethodDefinition","paramnames":["items"]},"vars":{"":null}},"description":"<p>Helper method to replace string based values containing \"@config:\" with the matching config value\nof this instance.</p>","params":[{"type":{"names":["Object","Array.<Object>"]},"name":"items"}],"name":"parseItemConfigs","longname":"Base#parseItemConfigs","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#parseItemConfigs","$kind":"method","id":1577,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * When using set(), configs without a trailing underscore can already be assigned,\n     * so the hasOwnProperty() check will return true\n     * @param {Boolean} [forceAssign=false]\n     */","meta":{"range":[13106,14037],"filename":"Base.mjs","lineno":417,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100050195","name":"Base#processConfigs","type":"MethodDefinition","paramnames":["forceAssign"]},"vars":{"":null}},"description":"<p>When using set(), configs without a trailing underscore can already be assigned,\nso the hasOwnProperty() check will return true</p>","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"name":"forceAssign"}],"name":"processConfigs","longname":"Base#processConfigs","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#processConfigs","$kind":"method","id":1578,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * @param {String} className\n     * @param {Object} remote\n     */","meta":{"range":[14122,14581],"filename":"Base.mjs","lineno":443,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100050269","name":"Base.sendRemotes","type":"MethodDefinition","paramnames":["className","remote"]},"vars":{"":null}},"params":[{"type":{"names":["String"]},"name":"className"},{"type":{"names":["Object"]},"name":"remote"}],"name":"sendRemotes","longname":"Base.sendRemotes","kind":"function","memberof":"Base","scope":"static","$longname":"Base.sendRemotes","$kind":"method","id":1579,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Change multiple configs at once, ensuring that all afterSet methods get all new assigned values\n     * @param {Object} values={}\n     */","meta":{"range":[14739,15244],"filename":"Base.mjs","lineno":463,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100050327","name":"Base#set","type":"MethodDefinition","paramnames":["values"]},"vars":{"":null}},"description":"<p>Change multiple configs at once, ensuring that all afterSet methods get all new assigned values</p>","params":[{"type":{"names":["Object"]},"defaultvalue":"{}","name":"values"}],"name":"set","longname":"Base#set","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#set","$kind":"method","id":1580,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * We want to assign class fields first and remove them from the config object,\n     * so that afterSet(), beforeGet() and beforeSet() methods can get the new values right away\n     * @param {Object} config\n     * @returns {Object}\n     */","meta":{"range":[15502,15871],"filename":"Base.mjs","lineno":486,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100050385","name":"Base#setFields","type":"MethodDefinition","paramnames":["config"]},"vars":{"":null}},"description":"<p>We want to assign class fields first and remove them from the config object,\nso that afterSet(), beforeGet() and beforeSet() methods can get the new values right away</p>","params":[{"type":{"names":["Object"]},"name":"config"}],"returns":[{"type":{"names":["Object"]}}],"name":"setFields","longname":"Base#setFields","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#setFields","$kind":"method","id":1581,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Sets the value of a static config by a given key\n     * @param {String} key The key of a staticConfig defined inside static getStaticConfig\n     * @param {*} value\n     * @returns {Boolean} true in case the config exists and got changed\n     */","meta":{"range":[16137,16374],"filename":"Base.mjs","lineno":506,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100050442","name":"Base#setStaticConfig","type":"MethodDefinition","paramnames":["key","value"]},"vars":{"":null}},"description":"<p>Sets the value of a static config by a given key</p>","params":[{"type":{"names":["String"]},"description":"<p>The key of a staticConfig defined inside static getStaticConfig</p>","name":"key"},{"type":{"names":["*"]},"name":"value"}],"returns":[{"type":{"names":["Boolean"]},"description":"true in case the config exists and got changed"}],"name":"setStaticConfig","longname":"Base#setStaticConfig","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#setStaticConfig","$kind":"method","id":1582,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Stores timeoutIds internally, so that destroy() can clear them if needed\n     * @param {Number} time in milliseconds\n     * @returns {Promise<any>}\n     */","meta":{"range":[16551,16829],"filename":"Base.mjs","lineno":522,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100050473","name":"Base#timeout","type":"MethodDefinition","paramnames":["time"]},"vars":{"":null}},"description":"<p>Stores timeoutIds internally, so that destroy() can clear them if needed</p>","params":[{"type":{"names":["Number"]},"description":"<p>in milliseconds</p>","name":"time"}],"returns":[{"type":{"names":["Promise.<any>"]}}],"name":"timeout","longname":"Base#timeout","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#timeout","$kind":"method","id":1583,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * <p>Enhancing the toString() method, e.g.</p>\n     * `Neo.create('Neo.button.Base').toString() => \"[object Neo.button.Base (neo-button-1)]\"`\n     * @returns {String}\n     */","meta":{"range":[17023,17109],"filename":"Base.mjs","lineno":541,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100050518","name":"Base#Symbol.toStringTag","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Enhancing the toString() method, e.g.</p>\n<p><code>Neo.create('Neo.button.Base').toString() =&gt; \"[object Neo.button.Base (neo-button-1)]\"</code></p>","returns":[{"type":{"names":["String"]}}],"name":"toStringTag","longname":"Base#Symbol.toStringTag","kind":"member","memberof":"Base#Symbol","scope":"static","params":[],"$longname":"Base#Symbol.toStringTag","$kind":"property","id":1584,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * <p>Enhancing the instanceof method. Without this change:</p>\n     * `Neo.collection.Base.prototype instanceof Neo.core.Base => true`\n     * <p>With this change:</p>\n     * `Neo.collection.Base.prototype instanceof Neo.core.Base => false`<br>\n     * `Neo.create(Neo.collection.Base) instanceof Neo.core.Base => true`\n     * @returns {Boolean}\n     */","meta":{"range":[17480,17677],"filename":"Base.mjs","lineno":548,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100050535","name":"Base.Symbol.hasInstance","type":"MethodDefinition","paramnames":["instance"]},"vars":{"":null}},"description":"<p>Enhancing the instanceof method. Without this change:</p>\n<p><code>Neo.collection.Base.prototype instanceof Neo.core.Base =&gt; true</code></p>\n<p>With this change:</p>\n<p><code>Neo.collection.Base.prototype instanceof Neo.core.Base =&gt; false</code><br>\n<code>Neo.create(Neo.collection.Base) instanceof Neo.core.Base =&gt; true</code></p>","returns":[{"type":{"names":["Boolean"]}}],"name":"hasInstance","longname":"Base.Symbol.hasInstance","kind":"function","memberof":"Base.Symbol","scope":"static","params":[],"$longname":"Base.Symbol.hasInstance","$kind":"method","id":1585,"neoClassName":"Neo.core.Base"}]}